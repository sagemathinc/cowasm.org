const VERSION=6,log=(...e)=>{},PREFIX="/python-wasm-sw/";function delay(e){return new Promise((t=>setTimeout(t,e)))}async function handleSleep(e){const t=await e.request.json(),n=Math.round(t?.ms)??100;return await delay(n),new Response({status:304})}self.addEventListener("install",(e=>{})),self.addEventListener("activate",(e=>{}));const cache={sig:{},stdin:{},callOnStdin:{},output:{}};async function handleWriteSignal(e){const{sig:t,id:n}=await e.request.json();return cache.sig[n]=t,new Response(`${t}`,{status:200})}async function handleReadSignal(e){const{clear:t,id:n}=await e.request.json(),a=cache.sig[n]??0;return t&&(cache.sig[n]=0),new Response(`${a}`,{status:200})}async function handleWriteStdin(e){const{data:t,id:n}=await e.request.json();null==cache.stdin[n]?cache.stdin[n]=t:cache.stdin[n]+=t;const a=cache.callOnStdin[n];return null!=a&&(a(),cache.callOnStdin[n]=null),new Response(`${cache.stdin[n].length}`,{status:200})}async function waitForStdin(e,t=3e3){cache.stdin[e]||await new Promise(((n,a)=>{let s=!1,i=!1,c=0;cache.callOnStdin[e]=()=>{i||(clearTimeout(c),s=!0,n())},c=setTimeout((()=>{s||(cache.callOnStdin[e]=null,i=!0,a("timeout"))}),t)}))}async function handleReadStdin(e){const{id:t,ms:n}=await e.request.json();try{await waitForStdin(t,n??3e3)}catch(e){}const a=cache.stdin[t];return cache.stdin[t]="",new Response(a,{status:200})}async function handleWriteOutput(e){let{stream:t,data:n,id:a}=await e.request.json();if(cache.output[a]){if(cache.output[a][0]!=t){const e=(new Date).valueOf();let n=1;for(;cache.output[a]&&cache.output[a][0]!=t;){if((new Date).valueOf()-e>3e3)return new Response("",{status:200});await delay(n),n=Math.min(1.3*n,200)}cache.output[a]||(cache.output[a]=t)}}else cache.output[a]=t;return cache.output[a]+=n,new Response("",{status:200})}async function handleReadOutput(e){const{id:t}=await e.request.json(),n=cache.output[t];return cache.output[t]="",new Response(n,{status:200})}self.addEventListener("fetch",(e=>{const{pathname:t}=new URL(e.request.url);if(!t.startsWith(PREFIX))return!1;switch(t.slice(PREFIX.length)){case"sleep":return void e.respondWith(handleSleep(e));case"write-stdin":return void e.respondWith(handleWriteStdin(e));case"read-stdin":return void e.respondWith(handleReadStdin(e));case"write-output":return void e.respondWith(handleWriteOutput(e));case"read-output":return void e.respondWith(handleReadOutput(e));case"write-signal":return void e.respondWith(handleWriteSignal(e));case"read-signal":return void e.respondWith(handleReadSignal(e))}}));