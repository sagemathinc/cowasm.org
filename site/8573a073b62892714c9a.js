(()=>{var t,e,n={8445:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(4503),o=i(n(1618)),a=i(n(7152)),_=(0,o.default)("dylink:dlopen"),l=1048576;e.default=class{constructor(t,e,n,r,i,s,o,a){this.dlerrorPtr=0,this.pathToLibrary={},this.handleToLibrary={},this.mainGetFunction=t,this.memory=e,this.globalOffsetTable=n,this.functionTable=r,this.readFileSync=i,this.importObject=s,this.importWebAssemblySync=o,this.getMainInstanceExports=a}add_dlmethods(t){for(const e of["dlopen","dladdr","dlclose","dlerror","dlsym"])t[e]=this[e].bind(this)}getState(){const t=new Set;for(const e in this.handleToLibrary)t.add(e);return t}setState(t){for(const e in this.handleToLibrary)t.has(e)||this.dlclose(parseInt(e))}malloc(t,e){if(null==this._malloc){const t=this.mainGetFunction("malloc");if(null==t)throw Error("malloc from libc must be available in the  main instance");this._malloc=t}const n=this._malloc(t);if(0==n){const t=`out of memory -- malloc failed allocating ${e}`;throw _(t),r.warn(t),Error(t)}return n}free(t){if(null==this._free){const t=this.mainGetFunction("free");if(null==t)throw Error("free from libc must be available in the  main instance");this.free=t}this.free(t)}dlopenEnvHandler(t){return(e,n)=>{if(n in e)return Reflect.get(e,n);_("dlopenEnvHandler",n);const r=this.mainGetFunction(n,t);if(null!=r)return r;_("dlopenEnvHandler got null")}}symbolViaPointer(t){const e=this.getMainInstanceExports();if(null==e)return;_("symbolViaPointer",t);let n=e[`__WASM_EXPORT__${t}`];if(null==n)return null;const r=n();return _("symbolViaPointer",t,"--\x3e",r),r}dlopen(t,e){if(null==this.memory)throw Error("bug");const n=(0,s.recvString)(t,this.memory);if(_("dlopen: path='%s'",n),null!=this.pathToLibrary[n])return this.pathToLibrary[n].handle;const i=new Uint8Array(this.readFileSync(n)),o=(0,a.default)(i);_("metadata",o);let I=Math.pow(2,o.memoryAlign??0);if(I=Math.max(I,16),null==o.memorySize)throw Error("memorySize must be defined in the shared library");const c=this.malloc(o.memorySize+I,"space for "+n),u=this.malloc(l,"stack for "+n);_("allocating %s bytes for shared library -- at ",o.memorySize+I,c);const S=o.memorySize?(0,s.alignMemory)(c,I):0,f=o.tableSize?this.functionTable.getNextTablePos():0,E={memory:this.memory,__indirect_function_table:this.functionTable.table,__memory_base:S,__table_base:f,__stack_pointer:new WebAssembly.Global({value:"i32",mutable:!0},u+l)};_("env =",E);const d={...this.importObject,env:new Proxy(E,{get:this.dlopenEnvHandler(n)}),"GOT.mem":this.globalOffsetTable.mem,"GOT.func":this.globalOffsetTable.func};o.tableSize&&this.functionTable.prepareForImport(o.tableSize);let A=0;_.enabled&&(A=(new Date).valueOf(),_("importing ",n));const h=this.importWebAssemblySync(n,d);_.enabled&&_("imported ",n,", time =",(new Date).valueOf()-A,"ms");const T={};for(const t in h.exports){if(null!=this.globalOffsetTable.funcMap[t])continue;const e=h.exports[t];null==T[t]&&"function"==typeof e&&(T[t]=this.functionTable.set(e))}for(const t in this.globalOffsetTable.funcMap){const e=h.exports[t]??this.getMainInstanceExports()[t];if(_("table[%s] = %s",this.globalOffsetTable.funcMap[t]?.index,t,e),null==e)throw Error(`dlopen -- UNRESOLVED FUNCTION: ${t}`);this.globalOffsetTable.funcMap[t].set(e),T[t]=this.globalOffsetTable.funcMap[t].index,delete this.globalOffsetTable.funcMap[t]}const{memMap:m}=this.globalOffsetTable;for(const t in m){const e=m[t];delete m[t];const i=h.exports[t]?.value;if(null==i){const i=this.symbolViaPointer(t);if(null==i)throw r.error(`dlopen: FATAL ERROR - Symbol '${t}' is not available in the cowasm kernel or any loaded library via __WASM_EXPORT__${t} but is required by '${n}'.`),Error(`dlopen -- UNRESOLVED SYMBOL: ${t}`);e.value=i}else e.value=i+S}null!=h.exports.__wasm_call_ctors&&(_("calling __wasm_call_ctors for dynamic library"),h.exports.__wasm_call_ctors()),null!=h.exports.__wasm_apply_data_relocs&&(_("calling __wasm_apply_data_relocs for dynamic library"),h.exports.__wasm_apply_data_relocs());const p=Math.max(0,...Object.keys(this.handleToLibrary).map((t=>parseInt(t))))+1,g={path:n,handle:p,instance:h,symToPtr:T,stack_alloc:u};return this.pathToLibrary[n]=g,this.handleToLibrary[p]=g,p}dlsym(t,e){const n=(0,s.recvString)(e,this.memory);_("dlsym: handle=%s, symName='%s'",t,n);const r=this.handleToLibrary[t];if(null==r)throw Error(`dlsym: invalid handle ${t}`);let i=r.symToPtr[n];return _("sym= ",n,", ptr = ",i),null!=i?i:(i=r.instance.exports[`__WASM_EXPORT__${n}`]?.(),null!=i?i:(this.set_dlerror(`dlsym: handle=${t} - unknown symbol '${n}'`),0))}dladdr(){return _("dladdr: NOT IMPLEMENTED"),this.set_dlerror("dladdr is not yet implemented"),0}dlclose(t){_("dlclose",t);const e=this.handleToLibrary[t];if(null==e)return this.set_dlerror(`dlclose: invalid handle ${t}`),1;if(null!=e){for(const t in e.symToPtr){const n=e.symToPtr[t];this.functionTable.delete(n)}this.free(e.stack_alloc),delete this.handleToLibrary[t],delete this.pathToLibrary[e.path]}return 0}set_dlerror(t){this.dlerrorPtr||(this.dlerrorPtr=this.malloc(1024,"dlerror pointer")),(0,s.sendString)(t.slice(0,1023),this.dlerrorPtr,this.memory)}dlerror(){return this.dlerrorPtr}getFunction(t){for(const e in this.handleToLibrary){const{path:n,symToPtr:r,instance:i}=this.handleToLibrary[e],s=r[t]??i.exports[`__WASM_EXPORT__${t}`]?.();if(null!=s)return _("getFunction",t,n,"handle=",e),this.functionTable.get(s)}}}},3146:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(1618)),s=n(4503),o=(0,i.default)("dylink:function-table");e.default=class{constructor(t){this.availableTableIndexes=new Set,this.nextTablePos=0,o("constructor"),this.table=t}updateAfterImport(){this.nextTablePos=Math.max(0,...(0,s.nonzeroPositions)(this.table))+1}prepareForImport(t){this.nextTablePos+=t,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length)}getNextTablePos(){return this.nextTablePos}getNextAvailableIndex(){for(const t of this.availableTableIndexes)return this.availableTableIndexes.delete(t),o("getNextAvailableIndex: from availableTableIndexes",t),t;const t=this.nextTablePos;return o("getNextAvailableIndex: from nextTablePos",t),this.nextTablePos+=1,this.table.length<=this.nextTablePos+50&&this.table.grow(this.nextTablePos+50-this.table.length),t}setLater(){const t=this.getNextAvailableIndex();return{index:t,set:e=>{this.set(e,t)}}}set(t,e){const n=e??this.getNextAvailableIndex();if(null!=this.table.get(n))throw Error("BUG: trying to set a table index that is already set");return this.table.set(n,t),n}get(t){return this.table.get(t)}delete(t){this.table.set(t,null),this.availableTableIndexes.add(t)}}},4783:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=(0,r(n(1618)).default)("dylink:global-offset-table");e.default=class{constructor(t,e){this.GOT={},this.memMap={},this.funcMap={},this.mem=new Proxy(this.GOT,{get:this.GOTMemHandler.bind(this)}),this.func=new Proxy(this.GOT,{get:this.GOTFuncHandler.bind(this)}),this.getMainInstanceExports=t,this.functionTable=e}getState(){const t=new Set;for(const e in this.GOT)t.add(e);return t}setState(t){for(const e in this.GOT)t.has(e)||(delete this.GOT[e],delete this.memMap[e],delete this.funcMap[e])}GOTMemHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){const t=new WebAssembly.Global({value:"i32",mutable:!0},0);this.memMap[e]=t,n=this.GOT[e]=t}return n}GOTFuncHandler(t,e){if(e in this.GOT)return Reflect.get(this.GOT,e);let n=this.GOT[e];if(!n){let t;const r=this.getMainInstanceExports()[`__WASM_EXPORT__${e}`];null==r?(this.funcMap[e]=this.functionTable.setLater(),t=this.funcMap[e].index):t=r(),i("GOTFuncHandler ",e,"--\x3e",t);const s=new WebAssembly.Global({value:"i32",mutable:!0},t);n=this.GOT[e]=s}return n}}},2963:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=i(n(7653)),o=i(n(1618)),a=i(n(3146)),_=i(n(8445)),l=i(n(4783)),I=(0,o.default)("dylink"),c=(0,o.default)("dylink:import");e.default=async function({path:t,importObject:e,importWebAssembly:n,importWebAssemblySync:i,readFileSync:o,stub:u,allowMainExports:S}){let f=null;null==e&&(e={});let{env:E}=e;null==E&&(E=e.env={});let{memory:d}=E;null==d&&(d=E.memory=new WebAssembly.Memory({initial:10}));let{__indirect_function_table:A}=E;null==A&&(A=E.__indirect_function_table=new WebAssembly.Table({initial:1500,element:"anyfunc"}));const h=new a.default(A);function T(t){if(null==f)return;const e=f.exports[`__WASM_EXPORT__${t}`];if(null==e)return;const n=e();return I("functionViaPointer",t,n),h.get(n)}function m(){if(null==f?.exports)throw Error("bug");return f.exports}const p=new l.default(m,h),g=new _.default((function(t,n=""){I("getFunction",t);let i=e?.env?.[t];if(null!=i)return I("getFunction ",t,"from env"),i;if(i=T(t),null!=i)return I("getFunction ",t,"from function pointer"),i;if(i=g.getFunction(t),null!=i)return I("getFunction ",t,"from other library"),i;if(S&&(i=f?.exports[t],null!=i))return I("getFunction ",t,"from mainInstance exports (potentially dangerous!)"),i;if(n?.includes("numpy")&&t.startsWith("_Z"))return()=>{r.log("WARNING: calling dangerous stub for ",t)};if(n)throw Error(`${t} -- undefined when importing ${n}`);return W.env[t]}),d,p,h,o,e,i,m);g.add_dlmethods(E);const W=u?{...e,env:(0,s.default)(e.env,T,u)}:e;let R=0;return c.enabled&&(R=(new Date).valueOf(),c("importing ",t)),f=null!=n?await n(t,W):i(t,W),c.enabled&&c("imported ",t,", time =",(new Date).valueOf()-R,"ms"),null!=f.exports.__wasm_call_ctors&&f.exports.__wasm_call_ctors(),h.updateAfterImport(),f.env=E,f.getDlopenState=()=>({dlopen:g.getState(),got:p.getState()}),f.setDlopenState=t=>{const{dlopen:e,got:n}=t;g.setState(e),p.setState(n)},f}},9168:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=void 0;const i=r(n(2963));e.default=i.default;var s=n(4503);Object.defineProperty(e,"MBtoPages",{enumerable:!0,get:function(){return s.MBtoPages}})},7152:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){let e=0,r=0;function i(){let n=0,r=1;for(;;){const i=t[e++];if(n+=(127&i)*r,r*=128,!(128&i))break}return n}function s(){const r=i();return e+=r,function(t,e,r){const i=e+r;let s=e;for(;t[s]&&s<i;)s++;const o=t.slice(e,s);return n.decode(o)}(t,e-r,r)}function o(t,e){if(t)throw new Error(e)}let a="dylink.0";o(!(1836278016==new Uint32Array(new Uint8Array(t.subarray(0,24)).buffer)[0]),"need to see wasm magic number"),o(0!==t[8],"need the dylink section to be first"),e=9;const _=i();r=e+_,a=s();const l={neededDynlibs:[],tlsExports:new Set,weakImports:new Set};if(null==l.neededDynlibs)throw Error("bug: typescript");if(null==l.tlsExports)throw Error("bug: typescript");if(null==l.weakImports)throw Error("bug: typescript");if("dylink"==a){l.memorySize=i(),l.memoryAlign=i(),l.tableSize=i(),l.tableAlign=i();let t=i();for(let e=0;e<t;++e){const t=s();l.neededDynlibs.push(t)}}else{o("dylink.0"!==a,"invalid format -- name must be dylink.0 or dylink");const n=1,_=2,I=3,c=4,u=256,S=3,f=1;for(;e<r;){const r=t[e++],o=i();if(r===n)l.memorySize=i(),l.memoryAlign=i(),l.tableSize=i(),l.tableAlign=i();else if(r===_){const t=i();for(let e=0;e<t;++e){const t=s();l.neededDynlibs.push(t)}}else if(r===I){let t=i();for(;t--;){const t=s();i()&u&&l.tlsExports.add(t)}}else if(r===c){let t=i();for(;t--;){s();const t=s();(i()&S)==f&&l.weakImports.add(t)}}else e+=o}}return l};const n=new TextDecoder},7653:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=i(n(1618)),o=(0,s.default)("stub"),a=(0,s.default)("stub:use"),_=(0,s.default)("stub:first");e.default=function(t,e,n){return new Proxy(t,{get(t,i){if(i in t)return Reflect.get(t,i);const s=e(i);return null!=s?(o("using function via pointer for ",i),s):("warn"==n&&r.warn(`\n* WARNING: creating UNSAFE stub for ${String(i)}.  Please fix ASAP!`),a.enabled||_.enabled?(...t)=>(function(t,e){if(a("WARNING: using stub",t,e),_.enabled){if(l.has(t))return;l.add(t)}_("WARNING: first use of stub",t,e)}(i,t),0):()=>0)}})};const l=new Set([])},4503:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MBtoPages=e.alignMemory=e.strlen=e.sendString=e.recvString=e.nonzeroPositions=void 0,e.nonzeroPositions=function(t){const e=[];for(let n=0;n<t.length;n++)null!=t.get(n)&&e.push(n);return e};const n=new TextDecoder,r=new TextEncoder;function i(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t}e.recvString=function(t,e){const r=i(t,e),s=e.buffer.slice(t,t+r);return n.decode(s)},e.sendString=function(t,e,n){const i=r.encode(t),s=i.length+1,o=new Int8Array(n.buffer,e,s);o.set(i),o[s-1]=0},e.strlen=i,e.alignMemory=function(t,e){return Math.ceil(t/e)*e},e.MBtoPages=function(t){return 16*t}},7746:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initConstants=void 0;const n={};e.default=n,e.initConstants=function(t){const{names:e,values:r}=function({callFunction:t,recv:e},n){let r=t("getConstants");if(0==r)throw Error("unable to receive JSON object");return JSON.parse(e.string(r))}(t);for(let t=0;t<e.length;t++)n[e[t]]=r[t]}},3691:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function({sleep:t}){return{epoll_create:t=>0,epoll_create1:t=>0,epoll_ctl:(t,e,n,r)=>0,epoll_wait:(e,n,r,i)=>(t?.(i),0)}}},7962:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.nativeToWasm=void 0;const i=r(n(7746));e.default=function(t){const e=i.default[t],n=Error(`Error ${t}  (errno=${e}).`);return n.wasiErrno=e,n},e.nativeToWasm=function(t){const e=["E2BIG","EACCES","EBADF","EBUSY","ECHILD","EDEADLK","EEXIST","EFAULT","EFBIG","EINTR","EINVAL","EIO","EISDIR","EMFILE","EMLINK","ENFILE","ENODEV","ENOENT","ENOEXEC","ENOMEM","ENOSPC","ENOTDIR","ENOTTY","ENXIO","EPERM","EPIPE","EROFS","ESPIPE","ESRCH","ETXTBSY","EXDEV"],n={};for(const r of e){const e=t.constants?.[r];if(!e)throw Error(`posix constant ${r} not known`);const s=i.default[r];if(!s)throw Error(`wasm constant ${r} not known`);n[e]=s}return n}},6600:function(t,e,n){"use strict";var r=n(8764).Buffer,i=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=s(n(5022)),a=n(7962),_=s(n(7746)),l=n(6470),I=(0,o.default)("posix:fork-exec"),c=r.from("\0asm");e.default=function({posix:t,recv:e,wasi:n,run:s,fs:o,child_process:u}){function S(t){const e=n.FD_MAP.get(t);return null==e?-1:e.real}function f(){const e={};for(const r of n.FD_MAP.keys()){const i=n.FD_MAP.get(r);try{t.is_inheritable(i.real)&&(e[r]=i.real)}catch(t){I("getInheritableDescriptorsMap",i.real,t)}}return e}return{python_wasm_set_inheritable:(e,n)=>{if(null==t.set_inheritable)return 0;const r=S(e);if(-1==r)throw Error("invalid file descriptor");try{t.set_inheritable(r,!!n)}catch(t){return 0}return 0},python_wasm_fork_exec:(n,r,i,s,o,l,c,u,E,d,A,h,T,m,p,g,W,R,O,y,w,N,b,D,L,F)=>{I("called fork_exec"),I("ignoring these: ",{restore_signals:m,call_setsid:p,pgid_to_set:g,call_setgid:W,gid:R,call_setgroups:O,groups_size:y,groups:w,call_setuid:N,uid:b,child_umask:D,child_sigmask:L}),I("before change",{p2cread:o,p2cwrite:l,c2pread:c,c2pwrite:u,errread:E,errwrite:d,errpipe_read:A,errpipe_write:h});const G=[],P=(0,a.nativeToWasm)(t);for(let t=0;t<100;t++)G[t]=P[t]??_.default.ENOENT;const C=JSON.stringify(f()),v=e.arrayOfStrings(i);v.length>0&&v.push(`WASI_FD_INFO=${C}`);const M={exec_array:e.arrayOfStrings(n),argv:e.arrayOfStrings(r),envp:v,cwd:e.string(s),p2cread:S(o),p2cwrite:S(l),c2pread:S(c),c2pwrite:S(u),errread:S(E),errwrite:S(d),errpipe_read:S(A),errpipe_write:S(h),close_fds:T,fds_to_keep:e.arrayOfI32(F).map(S),err_map:G,WASI_FD_INFO:C};I("opts",M),I("descriptors map = ",f());try{const e=t.fork_exec(M);return I("got subprocess = ",e),e}catch(t){return I("error doing fork",t),-1}},cowasm_vforkexec:(t,n=0)=>{const a=e.arrayOfStrings(t),_=n?e.string(n):"";if(I("cowasm_vforkexec",a),!a[0])throw I("cowasm_vforkexec","no argv[0]"),Error("argv[0] must be defined");try{if(!a[0].includes("/")){I("cowasm_vforkexec","go through search path to find",a[0]);for(const t of _.split(":")){const e=(0,l.join)((0,l.resolve)(t),a[0]);try{if(o.statSync(e).mode&o.constants.S_IXUSR){a[0]=e;break}}catch(t){}}I("cowasm_vforkexec","found",a[0])}if(!a[0].includes("/")||!o.existsSync(a[0]))return I("cowasm_vforkexec","could not find executable"),i.error(`${a[0]}: not found\n`),127;if(!(o.statSync(a[0]).mode&o.constants.S_IXUSR))return I("cowasm_vforkexec","executable has wrong permissions (missing IXUSR)"),i.error(`${a[0]}: Permission denied\n`),126;const t=function(t){const e=o.openSync(t,"r"),n=r.alloc(4);return o.readSync(e,n,0,4,0),c.equals(n)}(a[0]);if(I("isWasm = ",t),t)return I("running wasm executable",a[0]),s(a);if(null!=u)return I("running native executable",a[0]),function(t){if(null==u)return i.log("ERROR: Running native commands not yet implemented in this environment."),1;try{return u.execFileSync(t[0],t.slice(1),{stdio:"inherit"}),0}catch(t){return t.status}}(a);I("can't run anything"),i.error(`${a[0]}: cannot execute binary file\n`)}catch(t){i.trace(`${a[0]}: ${t}`)}return 127}}}},8256:function(t,e,n){"use strict";var r=n(4155),i=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=s(n(6600)),a=s(n(3691)),_=s(n(9939)),l=s(n(2252)),I=s(n(7810)),c=s(n(3976)),u=s(n(2518)),S=s(n(3505)),f=s(n(7683)),E=s(n(5198)),d=s(n(434)),A=s(n(5268)),h=s(n(6542)),T=s(n(1544)),m=s(n(8385)),p=s(n(1142)),g=n(7746),W=s(n(7746)),R=s(n(5022)),O=(0,R.default)("posix:not-implemented"),y=(0,R.default)("posix:call"),w=(0,R.default)("posix:return");r.env.__STUPID_HACK__="",e.default=function(t){const e={...(0,a.default)(t),...(0,o.default)(t),...(0,_.default)(t),...(0,l.default)(t),...(0,I.default)(t),...(0,c.default)(t),...(0,u.default)(t),...(0,S.default)(t),...(0,f.default)(t),...(0,A.default)(t),...(0,E.default)(t),...(0,d.default)(t),...(0,T.default)(t),...(0,h.default)(t),...(0,m.default)(t),...(0,p.default)(t)},n={};let r,s={};if(null!=t.posix.constants)for(const e in t.posix.constants)s[t.posix.constants[e]]=e;function R(e){const n=s[e];if(null!=n){const e=W.default[n];if(null!=e)return void t.callFunction("setErrno",e)}O("Unable to map nativeErrno (please update code)",e)}r=null!=t.posix.chdir?()=>{try{t.posix.chdir?.(t.getcwd())}catch(t){}}:()=>{};for(const s in e)n[s]=(...n)=>{r();try{y(s,n);const t=e[s](...n);return w(s,t),t}catch(e){return null!=e.wasiErrno?t.callFunction("setErrno",e.wasiErrno):null!=e.code?R(parseInt(e.code)):"NotImplementedError"==e.name?t.callFunction("setErrno",W.default.ENOSYS):(i.trace(`WARNING: Posix library raised exception without error code: ${e}`),O(`Posix call to ${s} raised exception without error code`,e)),e.ret??-1}};return n.init=()=>{(0,g.initConstants)(t)},n}},9939:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.wasmToNativeSocktype=e.wasmToNativeFamily=void 0;const s=n(911),o=i(n(7746));function a(t,e){if(0==e)return e;if(e==o.default.AF_INET)return t.constants.AF_INET;if(e==o.default.AF_INET6)return t.constants.AF_INET6;throw Error(`unsupported WASM address family: ${e}`)}function _(t,e){if(0==e)return e;if(e==t.constants.AF_INET)return o.default.AF_INET;if(e==t.constants.AF_INET6)return o.default.AF_INET6;throw Error(`unsupported native address family: ${e}`)}function l(t,e){if(!e)return e;let n=0;for(const i in o.default)if(i.startsWith("SOCK")&&o.default[i]&e){if(null==t.constants[i]){const t=`We need the constant ${i} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=t.constants[i],e&=~o.default[i]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* constants are defined.`;throw r.warn(t),Error(t)}return n}function I(t,e){if(!e)return e;let n=0;for(const i in t.constants)if(i.startsWith("SOCK")&&t.constants[i]&e){if(null==o.default[i]){const t=`We need the constant ${i} to be defined in the posix-node module.`;throw r.warn(t),Error(t)}n|=o.default[i],e&=~t.constants[i]}if(0!=e){const t=`Unable to convert remainging socktype ${e} to native. Make sure all SOCK* posix.constants are defined.`;throw r.warn(t),Error(t)}return n}e.default=function({memory:t,posix:e,callFunction:n,recv:r,send:i,free:o}){const c={};for(const t of" getprotobyname getservbyname getservbyport getnameinfo getpeername".split(/\s+/))c[t]=()=>(0,s.notImplemented)(t);function u(e,n,r){const s=i.malloc(2+n),o=new DataView(t.buffer);o.setUint16(s,e,!0);for(let t=0;t<n;t++)o.setUint8(s+2+t,r[t]);return s}function S(e,n){new DataView(t.buffer).setUint32(e,n,!0)}function f(t){const e=i.malloc(4*(t.length+1));if(0==e)throw Error("out of memory");for(let n=0;n<t.length;n++)S(e+4*n,i.string(t[n]));return S(e+4*t.length,0),e}function E(t){const r=_(e,t.h_addrtype);return n("sendHostent",i.string(t.h_name),f(t.h_aliases),r,t.h_length,f(t.h_addr_list),t.h_addr_list.length)}c.gethostbyname=t=>{try{null==e.gethostbyname&&(0,s.notImplemented)("gethostbyaddr",0);const n=r.string(t);return E(e.gethostbyname(n))}catch(t){throw t.ret=0,t}},c.gethostbyaddr=(t,i,a)=>{try{null==e.gethostbyaddr&&(0,s.notImplemented)("gethostbyaddr",0);const i=n("recvAddr",t,a);if(0==i)return 0;const _=r.string(i);return o(i),E(e.gethostbyaddr(_))}catch(t){throw t.ret=0,t}},c.getaddrinfo=(o,c,f,E)=>{if(null==e.getaddrinfo)return(0,s.notImplemented)("getaddrinfo"),-1;const d=r.string(o),A=r.string(c),h=function(n){const r=new DataView(t.buffer),i=r.getUint32(n,!0);n+=4;let s=a(e,r.getUint32(n,!0));n+=4;const o=l(e,r.getUint32(n,!0));return n+=4,{flags:i,family:s,socktype:o,protocol:r.getUint32(n,!0)}}(f);let T;try{T=e.getaddrinfo(d,A,h)}catch(t){if(t.code)return parseInt(t.code);throw t}let m=0,p=0,g=T.length-1;for(;g>=0;){const t=T[g];t.ai_socktype=I(e,t.ai_socktype),t.ai_family=t.sa_family=_(e,t.ai_family);const r=u(t.sa_family,t.ai_addrlen,t.sa_data);if(!r)throw Error("error creating sockaddr");if(p=n("sendAddrinfo",t.ai_flags,t.ai_family,t.ai_socktype,t.ai_protocol,t.ai_addrlen,r,null!=t.ai_canonname?i.string(t.ai_canonname):0,m),!p)throw Error("error creating addrinfo structure");m=p,g-=1}if(!p)throw Error("error creating addrinfo structure");return S(E,p),0};const d={};c.gai_strerror=t=>{if(null!=d[t])return d[t];const n=i.string(e.gai_strerror?.(t)??"Unknown error");return d[t]=n,n};const A={};c.hstrerror=t=>{if(null!=A[t])return A[t];const n=i.string(e.hstrerror?.(t)??"Unknown error");return A[t]=n,n};let h=null;return c.__h_errno_location=()=>{if(null==h&&(h=i.malloc(4),i.i32(h,0)),null==h)throw Error("bug");return h},c},e.wasmToNativeFamily=a,e.wasmToNativeSocktype=l},2252:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(911),s=r(n(7746));e.default=function({posix:t,recv:e,send:n,callFunction:r}){return{if_indextoname:(e,r)=>{const{if_indextoname:o}=t;let a;null==o&&(0,i.notImplemented)("if_indextoname");try{a=o(e)}catch(t){return 0}return n.string(a,{ptr:r,len:s.default.IFNAMSIZ}),r},if_nametoindex:n=>{const{if_nametoindex:r}=t;null==r&&(0,i.notImplemented)("if_nametoindex");const s=e.string(n);try{return r(s)}catch(t){return 0}},if_nameindex:()=>{const{if_nameindex:e}=t;try{if(null==e){const t=r("createNameIndexArray",0);if(0==t)throw Error("out of memory");return t}const t=e(),i=r("createNameIndexArray",t.length);if(0==i)throw Error("out of memory");for(let e=0;e<t.length;e++)r("setNameIndexElement",i,e,t[e][0],n.string(t[e][1]));return i}catch(t){throw t.ret=0,t}},if_freenameindex:t=>{r("freeNameIndexArray",t)}}}},7810:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const i=n(911);e.default=function(t){const{callFunction:e,posix:n,recv:s,send:o,wasi:a}=t;function _(t,n){e("set_statvfs",t,n.f_bsize,n.f_frsize,BigInt(n.f_blocks),BigInt(n.f_bfree),BigInt(n.f_bavail),BigInt(n.f_files),BigInt(n.f_ffree),BigInt(n.f_favail),n.f_fsid,n.f_flag,n.f_namemax)}function l(t){const e=a.FD_MAP.get(t);return null==e?-1:e.real}t.state.user_from_uid_cache={};const I={syslog:()=>{(0,i.notImplemented)("syslog")},login_tty:t=>(null==n.login_tty&&(0,i.notImplemented)("login_tty"),n.login_tty(l(t)),0),statvfs:(t,e)=>{null==n.statvfs&&(0,i.notImplemented)("statvfs");const r=s.string(t);return _(e,n.statvfs(r)),0},fstatvfs:(t,e)=>(null==n.fstatvfs&&(0,i.notImplemented)("fstatvfs"),_(e,n.fstatvfs(l(t))),0),ctermid:e=>{if(null==n.ctermid&&(0,i.notImplemented)("ctermid"),e){const t=n.ctermid();return o.string(t,{ptr:e,len:t.length+1}),e}if(t.state.ctermidPtr)return t.state.ctermidPtr;const r=n.ctermid();return t.state.ctermidPtr=o.string(r)},getpwnam_r:(t,e,n,r,i)=>(o.pointer(i,0),0),getpwuid:()=>0,getpwuid_r:(t,e,n,r,i)=>(o.pointer(i,0),0),openpty:()=>{(0,i.notImplemented)("openpty")},msync:()=>{(0,i.notImplemented)("msync")},madvise:()=>{(0,i.notImplemented)("madvise")},mremap:()=>{(0,i.notImplemented)("mremap")},tmpfile:()=>{(0,i.notImplemented)("tmpfile")},tcflush:()=>{(0,i.notImplemented)("tcflush")},getpwnam:()=>(r.log("STUB: getpwnam"),0),getrlimit:()=>{(0,i.notImplemented)("getrlimit")},setrlimit:()=>{(0,i.notImplemented)("setrlimit")},user_from_uid:(e,n=0)=>n?0:t.state.user_from_uid_cache[e]?t.state.user_from_uid_cache[e]:t.state.user_from_uid_cache[e]=o.string(`${e}`),group_from_gid:(t,e=0)=>I.user_from_uid(t,e),getrusage:(t,e)=>((0,i.notImplemented)("getrusage"),0)};return I}},3976:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(911);e.default=function({}){const t={};for(const e of"sched_get_priority_max sched_get_priority_min sched_getparam sched_getscheduler sched_rr_get_interval sched_setparam sched_setscheduler".split(/\s+/))t[e]=()=>(0,r.notImplemented)(e);return t}},2518:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.setSignalSet=e.getSignalSet=void 0;const i=r(n(7746)),s=n(911),o={};function a(t){return null==o[t]&&(o[t]=new Set),o[t]}e.getSignalSet=a,e.setSignalSet=function(t,e){o[t]=e};const _=new Set;e.default=function({process:t}){const e={kill:(e,n)=>(null==t.kill||t.kill(e,n),0),raise:n=>e.kill(t.pid??1,n),killpg:(e,n)=>(null==t.kill||t.kill(-e,n),0),sigemptyset:t=>(a(t).clear(),0),sigfillset:t=>{const e=a(t);for(let t=1;t<=31;t++)e.add(t);return 0},sigaddset:(t,e)=>(a(t).add(e),0),sigdelset:(t,e)=>(a(t).delete(e),0),sigismember:(t,e)=>a(t).has(e)?1:0,sigprocmask:(t,e,n)=>{try{if(!e)return 0;const r=a(e);switch(t){case i.default.SIG_BLOCK:for(const t of r)_.add(t);return 0;case i.default.SIG_UNBLOCK:for(const t of r)_.delete(t);return 0;case i.default.SIG_SETMASK:_.clear();for(const t of r)_.add(t);return 0;default:throw Error(`sigprocmask - invalid how=${t}`)}}finally{n&&function(t){const e=a(t);e.clear();for(const t of _)e.add(t)}(n)}},sigsuspend:()=>{(0,s.notImplemented)("sigsuspend")}};return e.pthread_sigmask=e.sigprocmask,e}},3505:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=i(n(7962)),o=(n(9939),i(n(7746)),n(3728),n(911));e.default=function({callFunction:t,posix:e,recv:n,wasi:i}){return{socket(t,e,n){throw(0,s.default)("ENOTSUP")},bind(e,i,s){r.log("bind stub ",{socket:e,sockaddrPtr:i,address_len:s});const a=t("recv_sockaddr_sa_family",i),_=n.buffer(t("recv_sockaddr_sa_data",i),s-2);return r.log({sa_family:a,sa_data:_.toString()}),r.log("sa_data = ",new Uint8Array(_)),(0,o.notImplemented)("bind"),-1},getsockname:(t,e,n)=>(r.log("getsockname stub ",{socket:t,sockaddrPtr:e,addressLenPtr:n}),(0,o.notImplemented)("getsockname"),-1),connect:(t,e,n)=>(r.log("connect stub ",{socket:t,sockaddrPtr:e,address_len:n}),(0,o.notImplemented)("connect"),-1)}}},7683:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(911),i=n(2518);e.default=function(t){const{callFunction:e,posix:n,recv:s,send:o}=t;function a(){return null==t.state.fileActions&&(t.state.spawn_fileActions={}),t.state.spawn_fileActions}function _(){return null==t.state.spawn_attrs&&(t.state.spawn_attrs={}),t.state.spawn_attrs}function l(t,e=!1){const n=_();if(null==n[t])return n[t]={};const r=n[t];if(null!=r)return e&&(null!=r.sigdefaultPtr&&(r.sigdefault=(0,i.getSignalSet)(r.sigdefaultPtr)),null!=r.sigmaskPtr&&(r.sigmask=(0,i.getSignalSet)(r.sigmaskPtr))),r;throw Error("bug")}return{posix_spawnattr_setschedparam:(t,n)=>(l(t).schedparam={sched_priority:e("get_posix_spawnattr_schedparam_sched_priority",n)},0),posix_spawnattr_getschedparam:(t,n)=>{const r=l(t).schedparam??0;return e("set_posix_spawnattr_schedparam_sched_priority",n,r),0},posix_spawnattr_setschedpolicy:(t,e)=>(l(t).schedpolicy=e,0),posix_spawnattr_getschedpolicy:(t,e)=>(o.i32(e,l(t).schedpolicy??0),0),posix_spawnattr_init:t=>(_()[t]={},0),posix_spawnattr_destroy:t=>(delete _()[t],0),posix_spawnattr_setflags:(t,e)=>(l(t).flags=e,0),posix_spawnattr_getflags:(t,e)=>(o.i32(e,l(t).flags??0),0),posix_spawnattr_setpgroup:(t,e)=>(l(t).pgroup=e,0),posix_spawnattr_getpgroup:(t,e)=>(o.i32(e,l(t).pgroup??0),0),posix_spawnattr_setsigmask:(t,e)=>(l(t).sigmaskPtr=e,0),posix_spawnattr_getsigmask:(t,e)=>{const n=l(t).sigmaskPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(n)),0},posix_spawnattr_setsigdefault:(t,e)=>(l(t).sigdefaultPtr=e,0),posix_spawnattr_getsigdefault:(t,e)=>{const n=l(t).sigdefaultPtr;return(0,i.setSignalSet)(e,(0,i.getSignalSet)(n)),0},posix_spawn:(t,e,i,_,I,c)=>{null==n.posix_spawn&&(0,r.notImplemented)("posix_spawn");const u=s.string(e),S=s.arrayOfStrings(I),f=s.arrayOfStrings(c),E=a(),d=n.posix_spawn(u,E[i],l(_,!0),S,f);return o.i32(t,d),0},posix_spawnp:(t,e,i,_,I,c)=>{null==n.posix_spawnp&&(0,r.notImplemented)("posix_spawnp");const u=s.string(e),S=s.arrayOfStrings(I),f=s.arrayOfStrings(c),E=a(),d=n.posix_spawnp(u,E[i],l(_,!0),S,f);return o.i32(t,d),0},posix_spawn_file_actions_init:t=>(a()[t]=[],0),posix_spawn_file_actions_destroy:t=>(delete a()[t],0),posix_spawn_file_actions_addclose:(t,e)=>{const n=a();return null==n[t]&&(n[t]=[]),n[t].push(["addclose",e]),0},posix_spawn_file_actions_addopen:(t,e,n,r,i)=>{const o=a();null==o[t]&&(o[t]=[]);const _=s.string(n);return o[t].push(["addopen",e,_,r,i]),0},posix_spawn_file_actions_adddup2:(t,e,n)=>{const r=a();return null==r[t]&&(r[t]=[]),r[t].push(["adddup2",e,n]),0}}}},5268:function(t,e,n){"use strict";n(5108);var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),n(6470),r(n(7746)),r(n(7962));const i=n(911);e.default=function({fs:t,process:e,recv:n,wasi:r}){return{chmod:(t,e)=>0,_fchmod:(t,e)=>0,fchmodat:(t,e,n,r)=>0,lchmod:(t,e)=>0,umask:t=>e.umask?.(t)??18,mkfifo:()=>{(0,i.notImplemented)("mkfifo")},mknod:()=>{(0,i.notImplemented)("mknod")}}}},434:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){const{fs:e,send:n}=t;return{tmpnam(r){for(let i=0;i<1e3;i++){let i="/tmp/tmpnam_";for(let t=0;t<6;t++)i+=String.fromCharCode(65+Math.floor(26*Math.random()));if(!e.existsSync(i))return r?(n.string(i,{ptr:r,len:20}),r):(t.state.tmpnam_buf||(t.state.tmpnam_buf=n.malloc(20)),n.string(i,{ptr:t.state.tmpnam_buf,len:20}),t.state.tmpnam_buf)}return 0},popen:(t,e)=>0,pclose:t=>-1}}},5198:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(911),o=(0,i(n(5022)).default)("posix:stdlib");e.default=function({child_process:t,os:e,recv:n,send:i,fs:a}){return{setjmp:()=>(o("STUB: setjmp - no op"),0),longjmp:()=>(o("STUB: longjmp - no op"),0),siglongjmp:()=>(o("STUB: siglongjmp - no op"),0),sigsetjmp:()=>(o("STUB: sigsetjmp - no op"),0),getloadavg:(t,n)=>{const{loadavg:r}=e;if(null==r)return-1;const s=r();return i.f64(t,s[0]),i.f64(t+8,s[1]),i.f64(t+16,s[2]),n},system:e=>{null==t.spawnSync&&(0,s.notImplemented)("system is not implemented yet");const i=n.string(e),{stdout:o,stderr:a,status:_}=t.spawnSync(i,{shell:!0});return r.log(o.toString()),r.warn(a.toString()),_},realpath:(t,e)=>{try{const r=n.string(t);o("realpath",{path:r});const s=a.realpathSync(r);return i.string(s,{ptr:e,len:4096})}catch(t){return o("realpath error ",t),0}}}}},6542:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5022)),s=r(n(7746)),o=(0,i.default)("posix:termios"),a={c_iflag:["IGNBRK","BRKINT","IGNPAR","PARMRK","INPCK","ISTRIP","INLCR","IGNCR","ICRNL","IXON","IXANY","IXOFF","IMAXBEL","IUTF8"],c_oflag:["OPOST","ONLCR","OCRNL","ONOCR","ONLRET","OFILL","OFDEL"],c_cflag:["CSIZE","CS5","CS6","CS7","CS8","CSTOPB","CREAD","PARENB","PARODD","HUPCL","CLOCAL"],c_lflag:["ISIG","ICANON","ECHO","ECHOE","ECHOK","ECHONL","NOFLSH","TOSTOP","IEXTEN"]};e.default=function({posix:t,callFunction:e,recv:n,send:r,wasi:i}){function _(e){const n={c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0};let r=[];for(const i in e){n[i]=0;for(const _ of a[i])e[i]&t.constants[_]&&(n[i]|=s.default[_],o.enabled&&r.push(_))}return o.enabled&&(r.sort(),o("NATIVE: ",r.join(" "))),n}return{tcgetattr(n,s){const o=i.FD_MAP.get(n).real;let a,l;return null!=t.tcgetattr?(l=t.tcgetattr(o),a=_(l)):(l={},a=0==o||1==o?{c_iflag:27906,c_oflag:5,c_cflag:1200,c_lflag:32827}:{c_iflag:0,c_oflag:0,c_cflag:0,c_lflag:0}),function(t,{c_iflag:n,c_oflag:i,c_cflag:s,c_lflag:o}){let a=0;try{a=r.malloc(16),r.u32(a,n??0),r.u32(a+4,i??0),r.u32(a+8,s??0),r.u32(a+12,o??0),e("cowasm_termios_set",t,a)}finally{a&&r.free(a)}}(s,a),0},tcsetattr(l,I,c){const u=i.FD_MAP.get(l).real,S=function(t){let i=0;try{const s=4;return i=r.malloc(4*s),e("cowasm_termios_get",t,i),{c_iflag:n.u32(i),c_oflag:n.u32(i+s),c_cflag:n.u32(i+2*s),c_lflag:n.u32(i+3*s)}}finally{i&&r.free(i)}}(c);if(null==t.tcsetattr||null==t.tcgetattr)return 0;const f=t.tcgetattr(u),E={...f},d=_(f);let A=!1;for(const e in a)for(const n of a[e])(S[e]&s.default[n])!=(d[e]&s.default[n])&&(A=!0,S[e]&s.default[n]?f[e]|=t.constants[n]:f[e]&=~t.constants[n]);return A?(o("tcsetattr",{fd:u,tio_native:f,tio_native_orig:E}),t.tcsetattr(u,t.constants.TCSANOW,f),0):(o("tcsetattr: nothing changed"),0)},tcdrain:()=>(o("tcdrain - STUB"),0),tcflow:()=>(o("tcflow - STUB"),0),tcflush:()=>(o("tcflush - STUB"),0),tcsendbreak:()=>(o("tcsendbreak - STUB"),0)}}},1544:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(1743),i=n(911);e.default=function({child_process:t,memory:e,os:n}){return{adjtime(){(0,i.notImplemented)("TODO: implement adjtime")},settimeofday(){(0,i.notImplemented)("TODO: settimeofday")},clock_settime(i,s){if(null==t.spawnSync)throw Error("clock_settime is not supported on this platform");const o=new DataView(e.buffer).getUint32(s,!0);let a,_,l="",I=[];switch(n.platform?.()){case"darwin":a="date",_=["-f","%s",`${o}`];break;case"linux":a="date",_=[`--set=@${o}`];break;case"win32":const t=new Date(1e3*o);a="date",_=[r("m/d/yyyy",t)],l="time",_=[r("HH:MM:ss",t)];break;default:throw Error(`clock_settime not supported on platform  = ${n.platform?.()}`)}const{status:c,stderr:u}=t.spawnSync(a,_);if(c)throw Error(`clock_settime failed - ${u}`);if(l){const{status:e,stderr:n}=t.spawnSync(l,I);if(e)throw Error(`clock_settime failed - ${n}`)}return 0}}}},8385:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(911),o=i(n(7746)),a=i(n(5022)),_=n(3728),l=(0,a.default)("posix:unistd");e.default=function(t){const{fs:e,os:n,process:i,recv:a,send:I,wasi:c,posix:u,memory:S,callWithString:f}=t;function E(t){const e=c.FD_MAP.get(t);if(null==e)throw Error("invalid file descriptor");return e.real}const d=c.FD_MAP.get(0),A=c.FD_MAP.get(1),h={chown:(t,n,r)=>{const i=a.string(t);return e.chownSync(i,n,r),0},lchown:(t,n,r)=>{const i=a.string(t);return e.lchownSync(i,n,r),0},_fchown:(t,n,r)=>(e.fchownSync(E(t),n,r),0),getuid:()=>i.getuid?.()??0,getgid:()=>i.getgid?.()??0,_geteuid:()=>i.geteuid?.()??0,getegid:()=>i.getegid?.()??0,getgroups:(t,e)=>{const n=i.getgroups?.();if(null==n)return 0;if(0==t)return n.length;const r=Math.min(n.length,t);if(0==r)return 0;const s=new DataView(S.buffer);for(let t=0;t<r;t++)s.setUint32(e+4*t,n[t],!0);return r},getpid:()=>i.pid??1,getpgid:t=>u.getpgid?.(t)??1,setpgid:(t,e)=>(null==u.setpgid&&(0,s.notImplemented)("setpgid"),u.setpgid(t,e),0),getpgrp:()=>u.getpgrp?.()??1,nice:t=>{const e=n.getPriority?.();null!=e&&n.setPriority?.(e+t)},getpriority:(t,e)=>null==n.getPriority?0:0!=t?(r.warn("getpriority can only be implemented in node.js for *process id*"),0):n.getPriority?.(e),setpriority:(t,e,i)=>null==n.setPriority?0:0!=t?(r.warn("setpriority can only be implemented in node.js for *process id*"),-1):n.setPriority?.(e,i),dup:t=>{null==u.dup&&(0,s.notImplemented)("dup");const e=c.FD_MAP.get(t),n=u.dup(e.real),r=c.getUnusedFileDescriptor();return c.FD_MAP.set(r,{...e,real:n}),r},dup2:(t,e)=>{null==u.dup2&&(0,s.notImplemented)("dup2");const n=c.FD_MAP.get(t);let r;r=c.FD_MAP.has(e)?c.FD_MAP.get(e).real??e:e;const i=u.dup2(n.real,r);return c.FD_MAP.set(e,{...n,real:i}),e},sync:()=>{if(null!=e.fsyncSync)for(const[t,{real:n}]of c.FD_MAP)e.fsyncSync(n)},setuid:()=>{throw Error("setuid is not supported")},seteuid:t=>(null==u.seteuid&&(0,s.notImplemented)("seteuid"),u.seteuid(t),0),setegid:t=>(null==u.setegid&&(0,s.notImplemented)("setegid"),u.setegid(t),0),setgid:t=>(null==i.setgid&&(0,s.notImplemented)("setgid"),i.setgid(t),0),setsid:t=>(null==u.setsid&&(0,s.notImplemented)("setsid"),u.setsid(t)),getsid:()=>{(0,s.notImplemented)("getsid")},setreuid:t=>(null==u.setreuid&&(0,s.notImplemented)("setreuid"),u.setreuid(t),0),setregid:t=>(null==u.setregid&&(0,s.notImplemented)("setregid"),u.setregid(t),0),getppid:()=>null==u.getppid?h.getpid():u.getppid(),setgroups:()=>{(0,s.notImplemented)("setgroups")},setpgrp:()=>{(0,s.notImplemented)("setpgrp")},tcgetpgrp:()=>{(0,s.notImplemented)("tcgetpgrp")},tcsetpgrp:()=>{(0,s.notImplemented)("tcsetpgrp")},fork:()=>{null==u.fork&&(0,s.notImplemented)("fork");const t=u.fork();return 0==t&&u.close_event_loop?.(),t},fork1:()=>{(0,s.notImplemented)("fork1")},vfork:()=>h.fork(),forkpty:()=>{(0,s.notImplemented)("forkpty")},getlogin:()=>{if(null!=t.state.getlogin_ptr)return t.state.getlogin_ptr;const e=n.userInfo?.()?.username??"user";return t.state.getlogin_ptr=I.string(e)},gethostname:(t,e)=>{if(null==n.hostname)throw Error("gethostname not supported on this platform");const r=n.hostname();return I.string(r,{ptr:t,len:e}),0},sethostname:(t,e)=>{if(null==u.sethostname)throw Error("sethostname not supported on this platform");const n=a.string(t,e);return u.sethostname(n),0},ttyname:e=>{if(null==u.ttyname)throw Error("ttyname_r is not supported on this platform");return null!=t.state.ttyname_ptr||(t.state.ttyname_ptr=I.malloc(128),I.string(u.ttyname(e),{ptr:t.state.ttyname_ptr,len:128})),t.state.ttyname_ptr},ttyname_r:(t,e,n)=>{if(null==u.ttyname)throw Error("ttyname_r is not supported on this platform");return I.string(u.ttyname(t),{ptr:e,len:n}),0},alarm:t=>{if(null==u.alarm)throw Error("alarm is not supported on this platform");return u.alarm(t)},getresuid:(t,e,n)=>{let r,i,s;null==u.getresuid?r=i=s=0:({ruid:r,euid:i,suid:s}=u.getresuid());const o=new DataView(S.buffer);return o.setUint32(t,r,!0),o.setUint32(e,i,!0),o.setUint32(n,s,!0),0},getresgid:(t,e,n)=>{let r,i,s;null==u.getresgid?r=i=s=0:({rgid:r,egid:i,sgid:s}=u.getresgid());const o=new DataView(S.buffer);return o.setUint32(t,r,!0),o.setUint32(e,i,!0),o.setUint32(n,s,!0),0},setresuid:(t,e,n)=>(null!=u.setresuid&&u.setresuid(t,e,n),0),setresgid:(t,e,n)=>(null!=u.setresgid&&u.setresgid(t,e,n),0),execve:(t,e,n)=>{null==u._execve&&(0,s.notImplemented)("execve");const r=a.string(t),i=a.arrayOfStrings(e),o=a.arrayOfStrings(n);return l("execve",r,i,o),u._execve(r,i,o),0},execv:(t,e)=>{null==u.execv&&(0,s.notImplemented)("execv");const n=a.string(t),r=a.arrayOfStrings(e);return l("execv",n,r),u.execv(n,r),0},execvp:(t,e)=>{null==u.execvp&&(0,s.notImplemented)("execvp");const n=a.string(t),r=a.arrayOfStrings(e);return l("execvp",n,r),u.execvp(n,r),0},execlp:()=>{(0,s.notImplemented)("execlp")},fexecve:(t,e,n)=>{null==u._fexecve&&(0,s.notImplemented)("fexecve");const r=a.arrayOfStrings(e),i=a.arrayOfStrings(n);return u._fexecve(E(t),r,i),0},pipe:t=>{null==u.pipe&&(0,s.notImplemented)("pipe");const{readfd:e,writefd:n}=u.pipe(),r=c.getUnusedFileDescriptor();c.FD_MAP.set(r,{real:e,rights:d.rights,filetype:_.constants.WASI_FILETYPE_SOCKET_STREAM});const i=c.getUnusedFileDescriptor();return c.FD_MAP.set(i,{real:n,rights:A.rights,filetype:_.constants.WASI_FILETYPE_SOCKET_STREAM}),I.i32(t,r),I.i32(t+4,i),0},pipe2:(t,e)=>{null==u.pipe2&&(0,s.notImplemented)("pipe2");let n=0;e&o.default.O_NONBLOCK&&(n+=u.constants?.O_NONBLOCK??0);const{readfd:i,writefd:a}=u.pipe2(n);return r.warn("pipe2 -- TODO: we almost certainly need to abstract these through our WASI fd object!"),I.i32(t,i),I.i32(t+4,a),0},lockf:(t,e,n)=>{const{lockf:r}=u;let i;null==r&&(0,s.notImplemented)("lockf");for(const t of["F_ULOCK","F_LOCK","F_TLOCK","F_TEST"])if(e==o.default[t]){i=u.constants[t];break}if(null==i)throw Error(`invalid cmd ${e}`);return r(E(t),i,BigInt(n)),0},pause:()=>{const{pause:t}=u;return null==t&&(0,s.notImplemented)("pause"),t()},initgroups:(t,e)=>{const{initgroups:n}=i;return null==n&&(0,s.notImplemented)("initgroups"),n(a.string(t),e),0},getgrouplist:(t,e,n,r)=>{const{getgrouplist:i}=u,s=a.string(t),o=a.i32(r);let _;_=null==i?[e]:i(s,e);const l=Math.min(_.length,o);for(let t=0;t<l;t++)I.u32(n+4*t,_[t]);return I.i32(r,_.length),l<_.length?-1:0},fchdir:t=>{const e=c.FD_MAP.get(t)?.path;return e?f("chdir",e):(r.error(`fchdir: invalid file descriptor: ${t}`),-1)}};return h}},911:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.notImplemented=e.NotImplementedError=void 0;const s=(0,i(n(5022)).default)("posix");class o extends Error{constructor(t,e){super(`${t} is not implemented yet`),this.name="NotImplementedError",null!=e&&(this.ret=e)}}e.NotImplementedError=o,e.notImplemented=function(t,e=-1){throw r.warn("WARNING: calling NOT IMPLEMENTED function",t),s("WARNING: calling NOT IMPLEMENTED function",t),new o(t,e)}},1142:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(911),o=i(n(7746));e.default=function({posix:t,send:e}){function n(e){let n=0;for(const r of["WNOHANG","WUNTRACED"])e&o.default[r]&&(n|=t.constants[r]);return n}return{wait:n=>{null==t.wait&&(0,s.notImplemented)("wait");const{ret:r,wstatus:i}=t.wait();return e.i32(n,i),r},waitid:()=>((0,s.notImplemented)("waitid"),-1),waitpid:(r,i,o)=>{null==t.waitpid&&(0,s.notImplemented)("waitpid");const{ret:a,wstatus:_}=t.waitpid(r,n(o));return e.i32(i,_),a},wait3:(i,o,a)=>{null==t.wait3&&(0,s.notImplemented)("wait3"),0!=a&&(r.warn("wait3 not implemented for non-NULL *rusage"),(0,s.notImplemented)("wait3"));const{ret:_,wstatus:l}=t.wait3(n(o));return e.i32(i,l),_}}}},3267:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0});const i={createKey:t=>JSON.stringify(t),ignoreSingleUndefined:!1};e.default=function(t,e){e={...i,...e||{}};const n={};return function(...i){e.ignoreSingleUndefined&&1===i.length&&void 0===i[0]&&(r.warn("Ignoring single undefined arg (reuseInFlight)"),i=[]);const s=e.createKey(i);return n.hasOwnProperty(s)||(n[s]=t.apply(this,i).then((t=>(delete n[s],t)),(t=>{throw delete n[s],t}))),n[s]}}},2835:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(3728),s=r(n(5516)),o=r(n(6578)),a=r(n(9714)),_=r(n(5022)),l=n(7187),I=r(n(4279)),c=r(n(8094)),u=r(n(5002)),S=(0,_.default)("wasm:worker:browser");async function f(t,e={}){S("wasmImportBrowser"),S("processing fs=",e.fs);const n=[];for(const t of e.fs??[])if("zipurl"==t.type){let e;e=t.async?{type:"zip-async",getData:async()=>await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint}:{type:"zip",data:await(await fetch(t.zipurl)).arrayBuffer(),mountpoint:t.mountpoint},n.push(e)}else n.push(t);const r=(0,i.createFileSystem)(n),a=await(0,o.default)({source:t,bindings:{...s.default,fs:r,posix:I.default},options:e,importWebAssembly:E,importWebAssemblySync:function(t,e){const n=new Uint8Array(r.readFileSync(t)),i=new WebAssembly.Module(n);return new WebAssembly.Instance(i,e)},readFileSync:t=>r.readFileSync(t),maxMemoryMB:1e3});return a}async function E(t,e){const{instance:n}=await WebAssembly.instantiateStreaming(fetch(t),e);return n}e.default=f,null==self.document&&function(){S("initializing worker");class t extends l.EventEmitter{constructor(){super(),this.postMessage=self.postMessage.bind(self),self.onmessage=({data:t})=>{this.emit("message",t)}}}const e=new t;(0,a.default)({wasmImport:f,parent:e,captureOutput:!0,IOHandler:crossOriginIsolated?c.default:u.default})}()},6578:function(t,e,n){"use strict";var r=n(5108),i=n(4155),s=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&s(e,t,n);return o(e,t),e},_=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.strlen=void 0;const l=_(n(3728)),I=_(n(3267)),c=_(n(227)),u=a(n(9168)),S=_(n(5229)),f=_(n(5022)),E=_(n(7050)),d=(0,f.default)("wasm-worker");e.strlen=function(t,e){const n=new Uint8Array(e.buffer);let r=t;for(;n[r];)r+=1;return r-t};const A={},h=(0,I.default)((async function({source:t,bindings:e,options:n={},importWebAssemblySync:s,importWebAssembly:o,readFileSync:a,maxMemoryMB:_}){if(d("doWasmImport",t),null==t)throw Error("source must be defined");if(null!=A[t])return A[t];const I=(new Date).valueOf(),f=new WebAssembly.Memory({initial:(0,u.MBtoPages)(10),..._?{maximum:(0,u.MBtoPages)(_)}:{}}),h=new WebAssembly.Table({initial:1e4,element:"anyfunc"}),T={env:{reportError:(t,e)=>{const n=f.buffer.slice(t,t+e),r=new TextDecoder;throw Error(r.decode(n))},...n.wasmEnv,memory:f,__indirect_function_table:h}};let m;null==T.env.wasmGetSignalState&&(r.warn("wasmGetSignalState not defined; using STUB"),T.env.wasmGetSignalState=()=>0),null==T.env.wasmSendString&&(T.env.wasmSendString=(t,e)=>{m.result=m.recv.string(t,e)}),null==T.env.wasmSetException&&(T.env.wasmSetException=()=>{m.resultException=!0}),null==T.env.getrandom&&(T.env.getrandom=(t,n,r)=>(e.randomFillSync(new Uint8Array(f.buffer),t,n),n)),null==T.env.main&&(T.env.main=()=>0),null==T.env._Py_emscripten&&(T.env._Py_emscripten_runtime=()=>0),(0,S.default)(h,T.env);const{fs:p}=e,g={preopens:{"/":"/"},bindings:e,args:i.argv,env:n.env,sleep:n.sleep,getStdin:n.getStdin,sendStdout:n.sendStdout,sendStderr:n.sendStderr},W=new l.default(g);T.wasi_snapshot_preview1=W.wasiImport;const R={importWebAssemblySync:s,importWebAssembly:o,readFileSync:a,stub:!1},O=new E.default({memory:f,wasi:W,wasiConfig:g});O.injectFunctions(T.env);const y=await(0,u.default)({...R,path:t,importObject:T});return null!=W&&W.start(y,f),m=new c.default(y,f,p,h),O.init(m),A[t]=m,n.time&&d.enabled&&d(`imported ${t} in ${(new Date).valueOf()-I}ms`),m.table=h,m.wasi=W,m.posixContext=O,m.instance=y,m}),{createKey:t=>t[0]});e.default=h},9714:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=r(n(5022)),s=n(4504),o=(0,i.default)("wasm:worker:init");e.default=function({wasmImport:t,parent:e,captureOutput:n,IOHandler:r}){let a;async function _(_){switch(o("worker got message ",_),_.event){case"init":const l=new r(_.options,(()=>{e.postMessage({event:"service-worker-broken"})}));_.debug&&i.default.enable(_.debug);const I={..._.options,sleep:l.sleep.bind(l),getStdin:l.getStdin.bind(l),wasmEnv:{wasmGetSignalState:l.getSignalState.bind(l)}};return n&&(I.sendStdout=t=>{l.sendOutput(s.Stream.STDOUT,t)},I.sendStderr=t=>{l.sendOutput(s.Stream.STDERR,t)}),a=await t(_.name,I),{event:"init",status:"ok"};case"callWithString":if(null==a)throw Error("wasm must be initialized");return{result:a.callWithString(_.name,_.str,..._.args)};case"call":if(null==a)throw Error("wasm must be initialized");return{result:a.callWithString(_.name,"",[])};case"waitUntilFsLoaded":if(null==a?.fs)throw Error("wasm.fs must be initialized");const{waitUntilLoaded:c}=a.fs;return null==c?o("waitUntilLoaded - no wait function defined"):(await c(),o("waited and now file system")),void(o.enabled&&o("ls / = ",a.fs.readdirSync("/")));case"fetch":if(null==a?.fs)throw Error("wasm.fs must be initialized");return void await a.fetch(_.url,_.path,_.mode)}}e.on("message",(async t=>{try{const n={id:t.id,...await _(t)};e.postMessage(n)}catch(n){e.postMessage({id:t.id,error:n})}}))}},227:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=n(7187),o=i(n(9644)),a=i(n(8087)),_=n(9730),l=n(6470),I=new TextEncoder,c=8192;class u extends s.EventEmitter{constructor(t,e,n,r){super(),this.result=void 0,this.resultException=!1,this._getFunctionCache={},this.exports=t.exports,this.instance=t,this.memory=e,this.table=r,this.fs=n;const i={memory:this.memory,callFunction:(t,...e)=>{const n=this.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)},callWithString:this.callWithString.bind(this)};this.send=new o.default(i),this.recv=new a.default(i)}terminate(){}exec(t=["command"]){return this.callWithString("cowasm_exec",t)}writeToStdin(t){throw Error("not implemented")}callWithString(t,e,...n){let r,i;if(r="string"==typeof t?this.getFunction(t):"object"==typeof t?this.getFunction(t.name,t.dll):t,null==r)throw Error(`no function "${"object"==typeof t?JSON.stringify(t):t}" defined in wasm module`);if(this.result=void 0,this.resultException=!1,null==e)i=r();else if("string"==typeof e){const t=I.encode(e);if(t.length<c)return i=this.callWithSmallString(r,t),this.result??i;const s=this.send.encodedString(t);try{i=r(s,...n)}finally{this.exports.c_free(s)}}else{const t=[];for(const n of e)t.push(this.send.string(n));const s=t.length,o=this.exports.c_malloc(4*(s+1)),a=new Int32Array(this.memory.buffer,o,s+1);let _=0;for(const e of t)a[_]=e,_+=1;a[s]=0;try{i=r(s,o,...n)}finally{this.exports.c_free(o);for(const e of t)this.exports.c_free(e)}}if(this.resultException)throw Error("RuntimeError");return this.result??i}getSmallStringPtr(){if(null==this.smallStringPtr&&(this.smallStringPtr=this.exports.c_malloc(c),!this.smallStringPtr))throw Error("MemoryError -- out of memory allocating small string buffer");return this.smallStringPtr}callWithSmallString(t,e,...n){const r=this.getSmallStringPtr(),i=e.length+1,s=new Int8Array(this.memory.buffer,r,i);return s.set(e),s[i-1]=0,t(r,...n)}getFunction(t,e){if(null!=e)return this.getFunctionUsingDlopen(t,e);const n=this._getFunctionCache[t];if(null!=n)return n;if(null!=this.table){const e=this.exports[`__WASM_EXPORT__${t}`];if(null!=e){const n=this.table.get(e());if(null!=n)return this._getFunctionCache[t]=n,n}}return this.exports[t]??this.instance.env[t]}getFunctionUsingDlopen(t,e){const n=this.callWithString("dlopen",e),r=this.getFunction("dlsym");if(null==r)throw Error("dlsym must be defined");const i=this.getSmallStringPtr();this.send.string(t,{ptr:i,len:c});const s=r(n,i);return this.table?.get(s)}closeDynamicLibrary(t){const e=this.callWithString("dlopen",t);if(0!=e){const t=this.getFunction("dlclose");if(null==t)throw Error("dlclose not defined");t(e)}}getcwd(){const t=this.getFunction("getcwd");if(null==t)throw Error("C library function getcwd must be exported");return this.recv.string(t(this.getSmallStringPtr(),c))}async waitUntilFsLoaded(){if(null==this.fs)throw Error("fs must be defined");return await(this.fs.waitUntilLoaded?.())}signal(t){throw Error("not implemented")}async fetch(t,e,n){const i=await(await fetch(t)).arrayBuffer(),{fs:s}=this;if(null==s)throw Error("fs must be defined");const o=(0,l.dirname)(e);await(0,_.callback)((t=>{s.mkdir(o,{recursive:!0},t)})),await(0,_.callback)((t=>{s.writeFile(e,r.from(i),t)})),n&&await(0,_.callback)((t=>{s.chmod(e,n,t)}))}}e.default=u},8094:function(t,e,n){"use strict";var r=n(8764).Buffer,i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const s=(0,i(n(5022)).default)("wasm:worker:io-using-atomics");e.default=class{constructor(t){if(s("creating ioHandler"),null==t.stdinLengthBuffer)throw Error("must define stdinLengthBuffer");if(null==t.stdinBuffer)throw Error("must define stdinBuffer");if(null==t.outputLengthBuffer)throw Error("must define outputLengthBuffer");if(null==t.outputBuffer)throw Error("must define outputBuffer");if(null==t.signalBuffer)throw Error("must define signalBuffer");this.stdinBuffer=r.from(t.stdinBuffer),this.stdinLength=new Int32Array(t.stdinLengthBuffer),this.outputBuffer=r.from(t.outputBuffer),this.outputLength=new Int32Array(t.outputLengthBuffer),this.signalState=new Int32Array(t.signalBuffer),this.sleepArray=new Int32Array(new SharedArrayBuffer(4))}sleep(t){for(s("sleep starting, milliseconds=",t);t>0;){const e=Math.min(t,500);if(Atomics.wait(this.sleepArray,0,0,e),t-=e,Atomics.load(this.signalState,0))return}}getStdin(t){const e=null!=t?(new Date).valueOf():0;for(;0==this.stdinLength[0];){if(s("getStdin: waiting for some new stdin"),Atomics.wait(this.stdinLength,0,0,t??1e3),Atomics.load(this.signalState,0))return r.from("");if(null!=t&&0==this.stdinLength[0]&&(new Date).valueOf()-e>t)return r.from("")}const n=this.stdinLength[0];s("getStdin: have stdin, processing ",n," bytes");const i=r.alloc(n);return this.stdinBuffer.copy(i,0,0,n),Atomics.store(this.stdinLength,0,0),Atomics.notify(this.stdinLength,0),i}sendOutput(t,e){for(s.enabled&&s("sendOutput",t,e,{len:this.outputLength[0]},(new TextDecoder).decode(e));e.length>0;){for(;this.outputLength[0]>0&&this.outputBuffer[0]!=t||this.outputLength[0]==this.outputBuffer.length;)Atomics.wait(this.outputLength,0,this.outputLength[0]);0==this.outputLength[0]&&(this.outputBuffer[0]=t,this.outputLength[0]=1);const n=e.copy(this.outputBuffer,this.outputLength[0]);e=e.subarray(n);const r=n+this.outputLength[0];s("setting output buffer size to ",r),Atomics.store(this.outputLength,0,r),Atomics.notify(this.outputLength,0)}}getSignalState(){const t=Atomics.load(this.signalState,0);return t?(s("signalState",this.signalState[0]),Atomics.store(this.signalState,0,0),t):0}}},5002:function(t,e,n){"use strict";var r=n(8764).Buffer,i=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=(0,s(n(5022)).default)("wasm:worker:io-using-atomics"),a=new TextDecoder;function _(t,e=3e3){i.warn("service worker not working, so burning CPU to avoid DOS'ing the server -- ",t);const n=(new Date).valueOf();for(;(new Date).valueOf()-n<=e;);}e.default=class{constructor(t,e){if(this.lastSignalCheck=0,o(t),this.id=t.id,this.serviceWorkerBroken=e,null==this.id)throw Error(`${this.id} must be a v4 uuid`)}request(t,e={}){const n=new XMLHttpRequest;n.open("POST",`/python-wasm-sw/${t}`,!1),n.setRequestHeader("cache-control","no-cache, no-store, max-age=0");try{n.send(JSON.stringify(e))}catch(t){this.serviceWorkerBroken(),_(t)}return 200!=n.status&&304!=n.status&&(this.serviceWorkerBroken(),_(`invalid status=${n.status}`)),n}sleep(t){o("sleep ",t);const e=(new Date).valueOf();for(;(new Date).valueOf()-e<=t;){try{this.request("sleep",{ms:Math.min(t,500)})}catch(t){return void o("sleep error",t)}if(this.getSignal(!1))return}}getStdin(t){const e=this.request("read-stdin",{id:this.id,ms:t??3e3});return 200==e.status?r.from(e.responseText??""):r.from("")}getSignal(t){const e=this.request("read-signal",{clear:t,id:this.id});return parseInt(e.responseText)??0}sendOutput(t,e){let n;try{n=a.decode(e)}catch(t){return}o("sendOutput",n),this.request("write-output",{id:this.id,stream:`${t}`,data:n})}getSignalState(){const t=(new Date).valueOf();return t-this.lastSignalCheck<500?0:(this.lastSignalCheck=t,this.getSignal(!0))}}},4279:(t,e,n)=>{"use strict";var r=n(4155);Object.defineProperty(e,"__esModule",{value:!0});const i={getpid:()=>r.pid,getppid:()=>i.getpid?.()??1};e.default=i},7050:function(t,e,n){"use strict";var r=n(4155),i=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=s(n(8256)),a=s(n(9644)),_=s(n(8087)),l=n(4241),I=(0,s(n(5022)).default)("kernel:posix-context");e.default=class{constructor({wasiConfig:t,memory:e,wasi:n}){this.memory=e,this.wasi=n,this.wasiConfig=t;const{bindings:r,sleep:i}=t,s=this.callFunction.bind(this),o=this.callWithString.bind(this);this.posixEnv=this.createPosixEnv({memory:e,wasi:n,bindings:r,callFunction:s,callWithString:o,sleep:i})}createPosixEnv({bindings:t,memory:e,wasi:n,callFunction:i,callWithString:s,sleep:l}){return this.context={state:{},fs:t.fs,send:new a.default({memory:e,callFunction:i}),recv:new _.default({memory:e,callFunction:i}),wasi:n,run:this.run.bind(this),process:r,os:t.os??{},posix:t.posix??{},child_process:t.child_process??{},memory:e,callFunction:i,callWithString:s,getcwd:this.getcwd.bind(this),free:this.free.bind(this),sleep:l},(0,o.default)(this.context)}init(t){this.wasm=t,this.posixEnv.init()}injectFunctions(t){for(const e in this.posixEnv)null==t[e]&&(t[e]=this.posixEnv[e])}callWithString(t,e,...n){if(null==this.wasm)throw Error("wasm must be define");return this.wasm.callWithString(t,e,...n)}callFunction(t,...e){if(null==this.wasm)throw Error("wasm must be define");const n=this.wasm.getFunction(t);if(null==n)throw Error(`error - ${t} is not defined`);return n(...e)}getcwd(){if(null==this.wasm)throw Error("wasm must be define");if(null==this.wasm.getcwd)throw Error("error - getcwd is not defined");return this.wasm.getcwd()}free(t){this.wasm?.exports.c_free(t)}run(t){I("run",t);const{wasm:e}=this;if(null==e)throw Error("wasm must be define");if(null==t[0])throw Error("args must have length at least 1");const n={memory:new Uint8Array(this.memory.buffer).slice(),context:this.context.state,wasi:this.wasi.getState(),exit:this.wasiConfig.bindings.exit,dlopen:e.instance.getDlopenState()};this.context.state=(0,l.cloneDeep)(n.context);const r=(0,l.cloneDeep)(n.wasi);let s=-1;r.bindings.exit=t=>{s=t};try{let o;this.wasi.setState(r);try{if(o=e.getFunction("__main_argc_argv",t[0]),null==o)throw Error("main is null")}catch(n){try{if(o=e.getFunction("main",t[0]),null==o)throw Error("main is null")}catch(e){return i.error(`${t[0]}: ${e}`),127}}try{return o(t.length,e.send.arrayOfStrings(t))}catch(e){if(-1==s)return i.error(t[0],e),139}return-1==s?139:s}finally{e.instance.setDlopenState(n.dlopen),new Uint8Array(this.memory.buffer).set(n.memory),this.context.state=n.context,this.wasi.setState(n.wasi)}}}},8087:(t,e,n)=>{"use strict";var r=n(5108),i=n(8764).Buffer;Object.defineProperty(e,"__esModule",{value:!0}),e.RecvFromWasmAbstractBase=void 0;const s=new TextDecoder;class o{view(){return new DataView(this.memory.buffer)}strlen(t){const e=new Uint8Array(this.memory.buffer);let n=t;for(;e[n];)n+=1;return n-t}pointer(t){return this.view().getUint32(t,!0)}u32(t){return this.view().getUint32(t,!0)}i32(t){return this.view().getInt32(t,!0)}pointer2(t){return new Uint32Array(this.memory.buffer)[t]}string(t,e){if(null==e&&null==(e=this.strlen(t)))throw Error("bug");const n=this.memory.buffer.slice(t,t+e);return s.decode(n)}buffer(t,e){return r.log(this.memory.buffer.slice(t,t+e)),i.from(this.memory.buffer.slice(t,t+e))}arrayOfStrings(t){const e=[];for(;;){const n=this.pointer(t);if(!n)break;e.push(this.string(n)),t+=4}return e}arrayOfI32(t){const e=[];if(0==t)return e;for(;;){const n=this.pointer(t);if(!n)break;e.push(this.i32(n)),t+=4}return e}}e.RecvFromWasmAbstractBase=o,e.default=class extends o{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},9644:(t,e,n)=>{"use strict";var r=n(5108);Object.defineProperty(e,"__esModule",{value:!0}),e.SendToWasmAbstractBase=void 0;const i=new TextEncoder;class s{malloc(t){const e=this.callFunction("c_malloc",t);if(!e)throw Error("Out of Memory");return e}free(t){this.callFunction("c_free",t)}view(){return new DataView(this.memory.buffer)}pointer(t,e){this.view().setUint32(t,e,!0)}i32(t,e){this.view().setInt32(t,e,!0)}f64(t,e){this.view().setFloat64(t,e,!0)}f32(t,e){this.view().setFloat32(t,e,!0)}u32(t,e){this.view().setUint32(t,e,!0)}string(t,e){return this.encodedString(i.encode(t),e)}encodedString(t,e){null!=e&&(e.len||r.warn("send-to-wasm: encodedString -- suspicious dest.len = 0!"),t=t.slice(0,e.len-1));const n=t.length+1,i=e?.ptr??this.malloc(n),s=new Int8Array(this.memory.buffer,i,n);return s.set(t),s[n-1]=0,i}arrayOfStrings(t){const e=this.malloc(4*(t.length+1));for(let n=0;n<t.length;n++){const r=this.string(t[n]);this.pointer(e+4*n,r)}return this.pointer(e+4*t.length,0),e}buffer(t){const e=this.malloc(t.byteLength),n=new Uint8Array(this.memory.buffer);return t.copy(n,e),e}}e.SendToWasmAbstractBase=s,e.default=class extends s{constructor({memory:t,callFunction:e}){super(),this.memory=t,this.callFunction=e}}},5229:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=(0,r(n(5022)).default)("python-wasm-trampoline");e.default=function(t,e){e._PyImport_InitFunc_TrampolineCall=e=>{const n=t.get(e)();return i("_PyImport_InitFunc_TrampolineCall - ptr=",e," r=",n),n},e._PyCFunctionWithKeywords_TrampolineCall=(e,n,r,i)=>t.get(e)(n,r,i),e.descr_set_trampoline_call=(e,n,r,i)=>t.get(e)(n,r,i),e.descr_get_trampoline_call=(e,n,r)=>t.get(e)(n,r)}},4504:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.Stream=void 0,(n=e.Stream||(e.Stream={}))[n.STDOUT=1]="STDOUT",n[n.STDERR=2]="STDERR"},9696:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=t=>{(()=>{if("performance"in self||(self.performance={}),Date.now=Date.now||(()=>(new Date).getTime()),"now"in self.performance==0){let t=Date.now();performance.timing&&performance.timing.navigationStart&&(t=performance.timing.navigationStart),self.performance.now=()=>Date.now()-t}})();const e=Math.floor(.001*(Date.now()-performance.now())),n=.001*performance.now();let r=Math.floor(n)+e,i=Math.floor(n%1*1e9);return t&&(r-=t[0],i-=t[1],i<0&&(r--,i+=1e9)),[r,i]};n.bigint=t=>{const e=n(t);return 1e9*e[0]+e[1]},e.default=n},5516:function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=n(1632),s=r(n(3182)),o=r(n(9696)),a=n(2327),_={hrtime:o.default.bigint,exit:t=>{throw new a.WASIExitError(t)},kill:t=>{throw new a.WASIKillError(t)},randomFillSync:i.randomFillSync,isTTY:()=>!0,path:s.default,fs:null};e.default=_},3622:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASI_ENOMSG=e.WASI_ENOMEM=e.WASI_ENOLINK=e.WASI_ENOLCK=e.WASI_ENOEXEC=e.WASI_ENOENT=e.WASI_ENODEV=e.WASI_ENOBUFS=e.WASI_ENFILE=e.WASI_ENETUNREACH=e.WASI_ENETRESET=e.WASI_ENETDOWN=e.WASI_ENAMETOOLONG=e.WASI_EMULTIHOP=e.WASI_EMSGSIZE=e.WASI_EMLINK=e.WASI_EMFILE=e.WASI_ELOOP=e.WASI_EISDIR=e.WASI_EISCONN=e.WASI_EIO=e.WASI_EINVAL=e.WASI_EINTR=e.WASI_EINPROGRESS=e.WASI_EILSEQ=e.WASI_EIDRM=e.WASI_EHOSTUNREACH=e.WASI_EFBIG=e.WASI_EFAULT=e.WASI_EEXIST=e.WASI_EDQUOT=e.WASI_EDOM=e.WASI_EDESTADDRREQ=e.WASI_EDEADLK=e.WASI_ECONNRESET=e.WASI_ECONNREFUSED=e.WASI_ECONNABORTED=e.WASI_ECHILD=e.WASI_ECANCELED=e.WASI_EBUSY=e.WASI_EBADMSG=e.WASI_EBADF=e.WASI_EALREADY=e.WASI_EAGAIN=e.WASI_EAFNOSUPPORT=e.WASI_EADDRNOTAVAIL=e.WASI_EADDRINUSE=e.WASI_EACCES=e.WASI_E2BIG=e.WASI_ESUCCESS=void 0,e.WASI_SIGVTALRM=e.WASI_SIGUSR2=e.WASI_SIGUSR1=e.WASI_SIGURG=e.WASI_SIGTTOU=e.WASI_SIGTTIN=e.WASI_SIGTSTP=e.WASI_SIGTRAP=e.WASI_SIGTERM=e.WASI_SIGSTOP=e.WASI_SIGSEGV=e.WASI_SIGQUIT=e.WASI_SIGPIPE=e.WASI_SIGKILL=e.WASI_SIGINT=e.WASI_SIGILL=e.WASI_SIGHUP=e.WASI_SIGFPE=e.WASI_SIGCONT=e.WASI_SIGCHLD=e.WASI_SIGBUS=e.WASI_SIGALRM=e.WASI_SIGABRT=e.WASI_ENOTCAPABLE=e.WASI_EXDEV=e.WASI_ETXTBSY=e.WASI_ETIMEDOUT=e.WASI_ESTALE=e.WASI_ESRCH=e.WASI_ESPIPE=e.WASI_EROFS=e.WASI_ERANGE=e.WASI_EPROTOTYPE=e.WASI_EPROTONOSUPPORT=e.WASI_EPROTO=e.WASI_EPIPE=e.WASI_EPERM=e.WASI_EOWNERDEAD=e.WASI_EOVERFLOW=e.WASI_ENXIO=e.WASI_ENOTTY=e.WASI_ENOTSUP=e.WASI_ENOTSOCK=e.WASI_ENOTRECOVERABLE=e.WASI_ENOTEMPTY=e.WASI_ENOTDIR=e.WASI_ENOTCONN=e.WASI_ENOSYS=e.WASI_ENOSPC=e.WASI_ENOPROTOOPT=void 0,e.RIGHTS_REGULAR_FILE_BASE=e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL=e.WASI_RIGHT_SOCK_SHUTDOWN=e.WASI_RIGHT_POLL_FD_READWRITE=e.WASI_RIGHT_PATH_UNLINK_FILE=e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=e.WASI_RIGHT_PATH_SYMLINK=e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=e.WASI_RIGHT_FD_FILESTAT_GET=e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=e.WASI_RIGHT_PATH_FILESTAT_GET=e.WASI_RIGHT_PATH_RENAME_TARGET=e.WASI_RIGHT_PATH_RENAME_SOURCE=e.WASI_RIGHT_PATH_READLINK=e.WASI_RIGHT_FD_READDIR=e.WASI_RIGHT_PATH_OPEN=e.WASI_RIGHT_PATH_LINK_TARGET=e.WASI_RIGHT_PATH_LINK_SOURCE=e.WASI_RIGHT_PATH_CREATE_FILE=e.WASI_RIGHT_PATH_CREATE_DIRECTORY=e.WASI_RIGHT_FD_ALLOCATE=e.WASI_RIGHT_FD_ADVISE=e.WASI_RIGHT_FD_WRITE=e.WASI_RIGHT_FD_TELL=e.WASI_RIGHT_FD_SYNC=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=e.WASI_RIGHT_FD_SEEK=e.WASI_RIGHT_FD_READ=e.WASI_RIGHT_FD_DATASYNC=e.WASI_FDFLAG_SYNC=e.WASI_FDFLAG_RSYNC=e.WASI_FDFLAG_NONBLOCK=e.WASI_FDFLAG_DSYNC=e.WASI_FDFLAG_APPEND=e.WASI_FILETYPE_SYMBOLIC_LINK=e.WASI_FILETYPE_SOCKET_STREAM=e.WASI_FILETYPE_SOCKET_DGRAM=e.WASI_FILETYPE_REGULAR_FILE=e.WASI_FILETYPE_DIRECTORY=e.WASI_FILETYPE_CHARACTER_DEVICE=e.WASI_FILETYPE_BLOCK_DEVICE=e.WASI_FILETYPE_UNKNOWN=e.WASI_SIGXFSZ=e.WASI_SIGXCPU=void 0,e.SIGNAL_MAP=e.ERROR_MAP=e.WASI_WHENCE_END=e.WASI_WHENCE_CUR=e.WASI_WHENCE_SET=e.WASI_STDERR_FILENO=e.WASI_STDOUT_FILENO=e.WASI_STDIN_FILENO=e.WASI_DIRCOOKIE_START=e.WASI_PREOPENTYPE_DIR=e.WASI_O_TRUNC=e.WASI_O_EXCL=e.WASI_O_DIRECTORY=e.WASI_O_CREAT=e.WASI_FILESTAT_SET_MTIM_NOW=e.WASI_FILESTAT_SET_MTIM=e.WASI_FILESTAT_SET_ATIM_NOW=e.WASI_FILESTAT_SET_ATIM=e.WASI_EVENTTYPE_FD_WRITE=e.WASI_EVENTTYPE_FD_READ=e.WASI_EVENTTYPE_CLOCK=e.WASI_CLOCK_THREAD_CPUTIME_ID=e.WASI_CLOCK_PROCESS_CPUTIME_ID=e.WASI_CLOCK_MONOTONIC=e.WASI_CLOCK_REALTIME=e.RIGHTS_TTY_INHERITING=e.RIGHTS_TTY_BASE=e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_SOCKET_BASE=e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE=e.RIGHTS_REGULAR_FILE_INHERITING=void 0,e.WASI_ESUCCESS=0,e.WASI_E2BIG=1,e.WASI_EACCES=2,e.WASI_EADDRINUSE=3,e.WASI_EADDRNOTAVAIL=4,e.WASI_EAFNOSUPPORT=5,e.WASI_EAGAIN=6,e.WASI_EALREADY=7,e.WASI_EBADF=8,e.WASI_EBADMSG=9,e.WASI_EBUSY=10,e.WASI_ECANCELED=11,e.WASI_ECHILD=12,e.WASI_ECONNABORTED=13,e.WASI_ECONNREFUSED=14,e.WASI_ECONNRESET=15,e.WASI_EDEADLK=16,e.WASI_EDESTADDRREQ=17,e.WASI_EDOM=18,e.WASI_EDQUOT=19,e.WASI_EEXIST=20,e.WASI_EFAULT=21,e.WASI_EFBIG=22,e.WASI_EHOSTUNREACH=23,e.WASI_EIDRM=24,e.WASI_EILSEQ=25,e.WASI_EINPROGRESS=26,e.WASI_EINTR=27,e.WASI_EINVAL=28,e.WASI_EIO=29,e.WASI_EISCONN=30,e.WASI_EISDIR=31,e.WASI_ELOOP=32,e.WASI_EMFILE=33,e.WASI_EMLINK=34,e.WASI_EMSGSIZE=35,e.WASI_EMULTIHOP=36,e.WASI_ENAMETOOLONG=37,e.WASI_ENETDOWN=38,e.WASI_ENETRESET=39,e.WASI_ENETUNREACH=40,e.WASI_ENFILE=41,e.WASI_ENOBUFS=42,e.WASI_ENODEV=43,e.WASI_ENOENT=44,e.WASI_ENOEXEC=45,e.WASI_ENOLCK=46,e.WASI_ENOLINK=47,e.WASI_ENOMEM=48,e.WASI_ENOMSG=49,e.WASI_ENOPROTOOPT=50,e.WASI_ENOSPC=51,e.WASI_ENOSYS=52,e.WASI_ENOTCONN=53,e.WASI_ENOTDIR=54,e.WASI_ENOTEMPTY=55,e.WASI_ENOTRECOVERABLE=56,e.WASI_ENOTSOCK=57,e.WASI_ENOTSUP=58,e.WASI_ENOTTY=59,e.WASI_ENXIO=60,e.WASI_EOVERFLOW=61,e.WASI_EOWNERDEAD=62,e.WASI_EPERM=63,e.WASI_EPIPE=64,e.WASI_EPROTO=65,e.WASI_EPROTONOSUPPORT=66,e.WASI_EPROTOTYPE=67,e.WASI_ERANGE=68,e.WASI_EROFS=69,e.WASI_ESPIPE=70,e.WASI_ESRCH=71,e.WASI_ESTALE=72,e.WASI_ETIMEDOUT=73,e.WASI_ETXTBSY=74,e.WASI_EXDEV=75,e.WASI_ENOTCAPABLE=76,e.WASI_SIGABRT=0,e.WASI_SIGALRM=1,e.WASI_SIGBUS=2,e.WASI_SIGCHLD=3,e.WASI_SIGCONT=4,e.WASI_SIGFPE=5,e.WASI_SIGHUP=6,e.WASI_SIGILL=7,e.WASI_SIGINT=8,e.WASI_SIGKILL=9,e.WASI_SIGPIPE=10,e.WASI_SIGQUIT=11,e.WASI_SIGSEGV=12,e.WASI_SIGSTOP=13,e.WASI_SIGTERM=14,e.WASI_SIGTRAP=15,e.WASI_SIGTSTP=16,e.WASI_SIGTTIN=17,e.WASI_SIGTTOU=18,e.WASI_SIGURG=19,e.WASI_SIGUSR1=20,e.WASI_SIGUSR2=21,e.WASI_SIGVTALRM=22,e.WASI_SIGXCPU=23,e.WASI_SIGXFSZ=24,e.WASI_FILETYPE_UNKNOWN=0,e.WASI_FILETYPE_BLOCK_DEVICE=1,e.WASI_FILETYPE_CHARACTER_DEVICE=2,e.WASI_FILETYPE_DIRECTORY=3,e.WASI_FILETYPE_REGULAR_FILE=4,e.WASI_FILETYPE_SOCKET_DGRAM=5,e.WASI_FILETYPE_SOCKET_STREAM=6,e.WASI_FILETYPE_SYMBOLIC_LINK=7,e.WASI_FDFLAG_APPEND=1,e.WASI_FDFLAG_DSYNC=2,e.WASI_FDFLAG_NONBLOCK=4,e.WASI_FDFLAG_RSYNC=8,e.WASI_FDFLAG_SYNC=16,e.WASI_RIGHT_FD_DATASYNC=BigInt(1),e.WASI_RIGHT_FD_READ=BigInt(2),e.WASI_RIGHT_FD_SEEK=BigInt(4),e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS=BigInt(8),e.WASI_RIGHT_FD_SYNC=BigInt(16),e.WASI_RIGHT_FD_TELL=BigInt(32),e.WASI_RIGHT_FD_WRITE=BigInt(64),e.WASI_RIGHT_FD_ADVISE=BigInt(128),e.WASI_RIGHT_FD_ALLOCATE=BigInt(256),e.WASI_RIGHT_PATH_CREATE_DIRECTORY=BigInt(512),e.WASI_RIGHT_PATH_CREATE_FILE=BigInt(1024),e.WASI_RIGHT_PATH_LINK_SOURCE=BigInt(2048),e.WASI_RIGHT_PATH_LINK_TARGET=BigInt(4096),e.WASI_RIGHT_PATH_OPEN=BigInt(8192),e.WASI_RIGHT_FD_READDIR=BigInt(16384),e.WASI_RIGHT_PATH_READLINK=BigInt(32768),e.WASI_RIGHT_PATH_RENAME_SOURCE=BigInt(65536),e.WASI_RIGHT_PATH_RENAME_TARGET=BigInt(131072),e.WASI_RIGHT_PATH_FILESTAT_GET=BigInt(262144),e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE=BigInt(524288),e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES=BigInt(1048576),e.WASI_RIGHT_FD_FILESTAT_GET=BigInt(2097152),e.WASI_RIGHT_FD_FILESTAT_SET_SIZE=BigInt(4194304),e.WASI_RIGHT_FD_FILESTAT_SET_TIMES=BigInt(8388608),e.WASI_RIGHT_PATH_SYMLINK=BigInt(16777216),e.WASI_RIGHT_PATH_REMOVE_DIRECTORY=BigInt(33554432),e.WASI_RIGHT_PATH_UNLINK_FILE=BigInt(67108864),e.WASI_RIGHT_POLL_FD_READWRITE=BigInt(134217728),e.WASI_RIGHT_SOCK_SHUTDOWN=BigInt(268435456),e.RIGHTS_ALL=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_BLOCK_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_BLOCK_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_BASE=e.RIGHTS_ALL,e.RIGHTS_CHARACTER_DEVICE_INHERITING=e.RIGHTS_ALL,e.RIGHTS_REGULAR_FILE_BASE=e.WASI_RIGHT_FD_DATASYNC|e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_SEEK|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_TELL|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_FD_ALLOCATE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_SIZE|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_REGULAR_FILE_INHERITING=BigInt(0),e.RIGHTS_DIRECTORY_BASE=e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_SYNC|e.WASI_RIGHT_FD_ADVISE|e.WASI_RIGHT_PATH_CREATE_DIRECTORY|e.WASI_RIGHT_PATH_CREATE_FILE|e.WASI_RIGHT_PATH_LINK_SOURCE|e.WASI_RIGHT_PATH_LINK_TARGET|e.WASI_RIGHT_PATH_OPEN|e.WASI_RIGHT_FD_READDIR|e.WASI_RIGHT_PATH_READLINK|e.WASI_RIGHT_PATH_RENAME_SOURCE|e.WASI_RIGHT_PATH_RENAME_TARGET|e.WASI_RIGHT_PATH_FILESTAT_GET|e.WASI_RIGHT_PATH_FILESTAT_SET_SIZE|e.WASI_RIGHT_PATH_FILESTAT_SET_TIMES|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_FD_FILESTAT_SET_TIMES|e.WASI_RIGHT_PATH_SYMLINK|e.WASI_RIGHT_PATH_UNLINK_FILE|e.WASI_RIGHT_PATH_REMOVE_DIRECTORY|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_DIRECTORY_INHERITING=e.RIGHTS_DIRECTORY_BASE|e.RIGHTS_REGULAR_FILE_BASE,e.RIGHTS_SOCKET_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE|e.WASI_RIGHT_SOCK_SHUTDOWN,e.RIGHTS_SOCKET_INHERITING=e.RIGHTS_ALL,e.RIGHTS_TTY_BASE=e.WASI_RIGHT_FD_READ|e.WASI_RIGHT_FD_FDSTAT_SET_FLAGS|e.WASI_RIGHT_FD_WRITE|e.WASI_RIGHT_FD_FILESTAT_GET|e.WASI_RIGHT_POLL_FD_READWRITE,e.RIGHTS_TTY_INHERITING=BigInt(0),e.WASI_CLOCK_REALTIME=0,e.WASI_CLOCK_MONOTONIC=1,e.WASI_CLOCK_PROCESS_CPUTIME_ID=2,e.WASI_CLOCK_THREAD_CPUTIME_ID=3,e.WASI_EVENTTYPE_CLOCK=0,e.WASI_EVENTTYPE_FD_READ=1,e.WASI_EVENTTYPE_FD_WRITE=2,e.WASI_FILESTAT_SET_ATIM=1,e.WASI_FILESTAT_SET_ATIM_NOW=2,e.WASI_FILESTAT_SET_MTIM=4,e.WASI_FILESTAT_SET_MTIM_NOW=8,e.WASI_O_CREAT=1,e.WASI_O_DIRECTORY=2,e.WASI_O_EXCL=4,e.WASI_O_TRUNC=8,e.WASI_PREOPENTYPE_DIR=0,e.WASI_DIRCOOKIE_START=0,e.WASI_STDIN_FILENO=0,e.WASI_STDOUT_FILENO=1,e.WASI_STDERR_FILENO=2,e.WASI_WHENCE_SET=0,e.WASI_WHENCE_CUR=1,e.WASI_WHENCE_END=2,e.ERROR_MAP={E2BIG:e.WASI_E2BIG,EACCES:e.WASI_EACCES,EADDRINUSE:e.WASI_EADDRINUSE,EADDRNOTAVAIL:e.WASI_EADDRNOTAVAIL,EAFNOSUPPORT:e.WASI_EAFNOSUPPORT,EALREADY:e.WASI_EALREADY,EAGAIN:e.WASI_EAGAIN,EBADF:e.WASI_EBADF,EBADMSG:e.WASI_EBADMSG,EBUSY:e.WASI_EBUSY,ECANCELED:e.WASI_ECANCELED,ECHILD:e.WASI_ECHILD,ECONNABORTED:e.WASI_ECONNABORTED,ECONNREFUSED:e.WASI_ECONNREFUSED,ECONNRESET:e.WASI_ECONNRESET,EDEADLOCK:e.WASI_EDEADLK,EDESTADDRREQ:e.WASI_EDESTADDRREQ,EDOM:e.WASI_EDOM,EDQUOT:e.WASI_EDQUOT,EEXIST:e.WASI_EEXIST,EFAULT:e.WASI_EFAULT,EFBIG:e.WASI_EFBIG,EHOSTDOWN:e.WASI_EHOSTUNREACH,EHOSTUNREACH:e.WASI_EHOSTUNREACH,EIDRM:e.WASI_EIDRM,EILSEQ:e.WASI_EILSEQ,EINPROGRESS:e.WASI_EINPROGRESS,EINTR:e.WASI_EINTR,EINVAL:e.WASI_EINVAL,EIO:e.WASI_EIO,EISCONN:e.WASI_EISCONN,EISDIR:e.WASI_EISDIR,ELOOP:e.WASI_ELOOP,EMFILE:e.WASI_EMFILE,EMLINK:e.WASI_EMLINK,EMSGSIZE:e.WASI_EMSGSIZE,EMULTIHOP:e.WASI_EMULTIHOP,ENAMETOOLONG:e.WASI_ENAMETOOLONG,ENETDOWN:e.WASI_ENETDOWN,ENETRESET:e.WASI_ENETRESET,ENETUNREACH:e.WASI_ENETUNREACH,ENFILE:e.WASI_ENFILE,ENOBUFS:e.WASI_ENOBUFS,ENODEV:e.WASI_ENODEV,ENOENT:e.WASI_ENOENT,ENOEXEC:e.WASI_ENOEXEC,ENOLCK:e.WASI_ENOLCK,ENOLINK:e.WASI_ENOLINK,ENOMEM:e.WASI_ENOMEM,ENOMSG:e.WASI_ENOMSG,ENOPROTOOPT:e.WASI_ENOPROTOOPT,ENOSPC:e.WASI_ENOSPC,ENOSYS:e.WASI_ENOSYS,ENOTCONN:e.WASI_ENOTCONN,ENOTDIR:e.WASI_ENOTDIR,ENOTEMPTY:e.WASI_ENOTEMPTY,ENOTRECOVERABLE:e.WASI_ENOTRECOVERABLE,ENOTSOCK:e.WASI_ENOTSOCK,ENOTTY:e.WASI_ENOTTY,ENXIO:e.WASI_ENXIO,EOVERFLOW:e.WASI_EOVERFLOW,EOWNERDEAD:e.WASI_EOWNERDEAD,EPERM:e.WASI_EPERM,EPIPE:e.WASI_EPIPE,EPROTO:e.WASI_EPROTO,EPROTONOSUPPORT:e.WASI_EPROTONOSUPPORT,EPROTOTYPE:e.WASI_EPROTOTYPE,ERANGE:e.WASI_ERANGE,EROFS:e.WASI_EROFS,ESPIPE:e.WASI_ESPIPE,ESRCH:e.WASI_ESRCH,ESTALE:e.WASI_ESTALE,ETIMEDOUT:e.WASI_ETIMEDOUT,ETXTBSY:e.WASI_ETXTBSY,EXDEV:e.WASI_EXDEV},e.SIGNAL_MAP={[e.WASI_SIGHUP]:"SIGHUP",[e.WASI_SIGINT]:"SIGINT",[e.WASI_SIGQUIT]:"SIGQUIT",[e.WASI_SIGILL]:"SIGILL",[e.WASI_SIGTRAP]:"SIGTRAP",[e.WASI_SIGABRT]:"SIGABRT",[e.WASI_SIGBUS]:"SIGBUS",[e.WASI_SIGFPE]:"SIGFPE",[e.WASI_SIGKILL]:"SIGKILL",[e.WASI_SIGUSR1]:"SIGUSR1",[e.WASI_SIGSEGV]:"SIGSEGV",[e.WASI_SIGUSR2]:"SIGUSR2",[e.WASI_SIGPIPE]:"SIGPIPE",[e.WASI_SIGALRM]:"SIGALRM",[e.WASI_SIGTERM]:"SIGTERM",[e.WASI_SIGCHLD]:"SIGCHLD",[e.WASI_SIGCONT]:"SIGCONT",[e.WASI_SIGSTOP]:"SIGSTOP",[e.WASI_SIGTSTP]:"SIGTSTP",[e.WASI_SIGTTIN]:"SIGTTIN",[e.WASI_SIGTTOU]:"SIGTTOU",[e.WASI_SIGURG]:"SIGURG",[e.WASI_SIGXCPU]:"SIGXCPU",[e.WASI_SIGXFSZ]:"SIGXFSZ",[e.WASI_SIGVTALRM]:"SIGVTALRM"}},214:function(t,e,n){"use strict";var r=n(5108),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystem=void 0;const s=i(n(6665)),o=n(5829),a=n(2839);function _(t,e){if("zip"==t.type)return function(t,e="/"){const n=(0,o.createFsFromVolume)(new o.Volume);return n.mkdirSync(e,{recursive:!0}),(0,s.default)({data:t,fs:n,directory:e}),n}(t.data,t.mountpoint);if("zip-async"==t.type)return function(t,e="/"){const n=(0,o.createFsFromVolume)(new o.Volume),i=(async()=>{let i;try{i=await t()}catch(t){throw r.warn(`FAILED to load async filesystem for '${e}' - ${t}`),t}(0,s.default)({data:i,fs:n,directory:e})})();return n.waitUntilLoaded=()=>i,n}(t.getData,t.mountpoint);if("zipfile"==t.type)throw Error(`you must convert zipfile -- read ${t.zipfile} into memory`);if("zipurl"==t.type)throw Error(`you must convert zipurl -- read ${t.zipurl} into memory`);if("native"==t.type)return null==e?e:function(t){function e(e){let n=0;for(const r in o.fs.constants)r.startsWith("O_")&&e&o.fs.constants[r]&&(n|=t.constants[r]);return n}const n={...t.promises,open:async(e,n,r)=>await t.promises.open(e,n,r)};return{...{...t,promises:n},open:async(n,r,i)=>await t.open(n,e(r),i),openSync:(n,r,i)=>t.openSync(n,e(r),i),constants:o.fs.constants}}(e);if("mem"==t.type)return l(t.contents);if("dev"==t.type)return function(){const t=o.Volume.fromJSON({"/dev/stdin":"","/dev/stdout":"","/dev/stderr":""});t.releasedFds=[0,1,2];const e=t.openSync("/dev/stderr","w"),n=t.openSync("/dev/stdout","w"),r=t.openSync("/dev/stdin","r");if(2!=e)throw Error(`invalid handle for stderr: ${e}`);if(1!=n)throw Error(`invalid handle for stdout: ${n}`);if(0!=r)throw Error(`invalid handle for stdin: ${r}`);return(0,o.createFsFromVolume)(t)}();throw Error(`unknown spec type - ${JSON.stringify(t)}`)}function l(t){const e=null!=t?o.Volume.fromJSON(t):new o.Volume;return(0,o.createFsFromVolume)(e)}e.createFileSystem=function(t,e){if(0==t.length)return l();if(1==t.length)return _(t[0],e)??l();const n=new a.Union,r=[];for(const i of t){const t=_(i,e);null!=t&&(n.use(t),null!=t.waitUntilLoaded&&r.push(t.waitUntilLoaded.bind(t)))}return{...n,constants:o.fs.constants,waitUntilLoaded:async()=>{for(const t of r)await t()}}}},3728:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.constants=e.createFileSystem=void 0;const a=o(n(9215));e.default=a.default;var _=n(214);Object.defineProperty(e,"createFileSystem",{enumerable:!0,get:function(){return _.createFileSystem}});const l=s(n(3622));e.constants=l},2327:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WASIKillError=e.WASIExitError=e.WASIError=void 0;class n extends Error{constructor(t){super(),this.errno=t,Object.setPrototypeOf(this,n.prototype)}}e.WASIError=n;class r extends Error{constructor(t){super(`WASI Exit error: ${t}`),this.code=t,Object.setPrototypeOf(this,r.prototype)}}e.WASIExitError=r;class i extends Error{constructor(t){super(`WASI Kill signal: ${t}`),this.signal=t,Object.setPrototypeOf(this,i.prototype)}}e.WASIKillError=i},6665:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(6470),i=n(1811);e.default=function({data:t,fs:e,directory:n}){if(t instanceof ArrayBuffer&&(t=new Uint8Array(t)),!(t instanceof Uint8Array))throw Error("impossible");const s=(0,i.unzipSync)(t);for(const[t,i]of Object.entries(s)){const s=(0,r.join)(n,t);e.mkdirSync((0,r.dirname)(s),{recursive:!0}),s.endsWith("/")||(e.writeFileSync(s,i),e.chmodSync(s,511))}}},9215:function(t,e,n){"use strict";var r=n(8764).Buffer,i=n(5108),s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=s(n(5912)),a=(0,o.default)("wasi"),_=(0,o.default)("wasi:open"),l=n(2327),I=s(n(905)),c=n(3622),u=c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_SYNC|c.WASI_RIGHT_FD_ADVISE|c.WASI_RIGHT_FD_FILESTAT_GET|c.WASI_RIGHT_POLL_FD_READWRITE,S=c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_SYNC|c.WASI_RIGHT_FD_ADVISE|c.WASI_RIGHT_FD_FILESTAT_GET|c.WASI_RIGHT_POLL_FD_READWRITE,f=S,E=t=>{const e=Math.trunc(t),n=BigInt(Math.round(1e6*(t-e)));return BigInt(e)*BigInt(1e6)+n},d=t=>{"number"==typeof t&&(t=Math.trunc(t));const e=BigInt(t);return Number(e/BigInt(1e6))},A=t=>(...e)=>{try{return t(...e)}catch(t){let e=t;for(;null!=e.prev;)e=e.prev;if(e?.code&&"string"==typeof e?.code)return c.ERROR_MAP[e.code]||c.WASI_EINVAL;if(e instanceof l.WASIError)return e.errno;throw e}},h=(t,e)=>{const n=t.FD_MAP.get(e);if(!n)throw new l.WASIError(c.WASI_EBADF);if(void 0===n.filetype){const r=t.bindings.fs.fstatSync(n.real),{filetype:i,rightsBase:s,rightsInheriting:o}=T(t,e,r);n.filetype=i,n.rights||(n.rights={base:s,inheriting:o})}return n},T=(t,e,n)=>{switch(!0){case n.isBlockDevice():return{filetype:c.WASI_FILETYPE_BLOCK_DEVICE,rightsBase:c.RIGHTS_BLOCK_DEVICE_BASE,rightsInheriting:c.RIGHTS_BLOCK_DEVICE_INHERITING};case n.isCharacterDevice():{const n=c.WASI_FILETYPE_CHARACTER_DEVICE;return void 0!==e&&t.bindings.isTTY(e)?{filetype:n,rightsBase:c.RIGHTS_TTY_BASE,rightsInheriting:c.RIGHTS_TTY_INHERITING}:{filetype:n,rightsBase:c.RIGHTS_CHARACTER_DEVICE_BASE,rightsInheriting:c.RIGHTS_CHARACTER_DEVICE_INHERITING}}case n.isDirectory():return{filetype:c.WASI_FILETYPE_DIRECTORY,rightsBase:c.RIGHTS_DIRECTORY_BASE,rightsInheriting:c.RIGHTS_DIRECTORY_INHERITING};case n.isFIFO():return{filetype:c.WASI_FILETYPE_SOCKET_STREAM,rightsBase:c.RIGHTS_SOCKET_BASE,rightsInheriting:c.RIGHTS_SOCKET_INHERITING};case n.isFile():return{filetype:c.WASI_FILETYPE_REGULAR_FILE,rightsBase:c.RIGHTS_REGULAR_FILE_BASE,rightsInheriting:c.RIGHTS_REGULAR_FILE_INHERITING};case n.isSocket():return{filetype:c.WASI_FILETYPE_SOCKET_STREAM,rightsBase:c.RIGHTS_SOCKET_BASE,rightsInheriting:c.RIGHTS_SOCKET_INHERITING};case n.isSymbolicLink():return{filetype:c.WASI_FILETYPE_SYMBOLIC_LINK,rightsBase:BigInt(0),rightsInheriting:BigInt(0)};default:return{filetype:c.WASI_FILETYPE_UNKNOWN,rightsBase:BigInt(0),rightsInheriting:BigInt(0)}}};let m=!1;e.default=class{constructor(t){this.lastStdin=0,this.env={},this.sleep=t.sleep,this.getStdin=t.getStdin,this.sendStdout=t.sendStdout,this.sendStderr=t.sendStderr;let e={};t.preopens&&(e=t.preopens),t&&t.env&&(this.env=t.env);let n=[];t&&t.args&&(n=t.args),this.memory=void 0,this.view=void 0,this.bindings=t.bindings;const s=this.bindings.fs;this.FD_MAP=new Map([[c.WASI_STDIN_FILENO,{real:0,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:u,inheriting:BigInt(0)},path:"/dev/stdin"}],[c.WASI_STDOUT_FILENO,{real:1,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:S,inheriting:BigInt(0)},path:"/dev/stdout"}],[c.WASI_STDERR_FILENO,{real:2,filetype:c.WASI_FILETYPE_CHARACTER_DEVICE,rights:{base:f,inheriting:BigInt(0)},path:"/dev/stderr"}]]);const o=this.bindings.path;for(const[t,n]of Object.entries(e)){const e=s.openSync(n,s.constants.O_RDONLY),r=this.getUnusedFileDescriptor();this.FD_MAP.set(r,{real:e,filetype:c.WASI_FILETYPE_DIRECTORY,rights:{base:c.RIGHTS_DIRECTORY_BASE,inheriting:c.RIGHTS_DIRECTORY_INHERITING},fakePath:t,path:n})}const p=(t,e)=>(this.refreshMemory(),Array.from({length:e},((e,n)=>{const r=t+8*n,i=this.view.getUint32(r,!0);let s=this.view.getUint32(r+4,!0);s>this.memory.buffer.byteLength-i&&(a("getiovs: warning -- truncating buffer to fit in memory"),s=Math.min(s,this.memory.buffer.byteLength-i));const o=new Uint8Array(this.memory.buffer,i,s);return(0,I.default)(o)}))),g=(t,e)=>{const n=h(this,t);if(e!==BigInt(0)&&(n.rights.base&e)===BigInt(0))throw new l.WASIError(c.WASI_EPERM);return n},W=this.bindings.hrtime(),R=t=>{switch(t){case c.WASI_CLOCK_MONOTONIC:return this.bindings.hrtime();case c.WASI_CLOCK_REALTIME:return E(Date.now());case c.WASI_CLOCK_PROCESS_CPUTIME_ID:case c.WASI_CLOCK_THREAD_CPUTIME_ID:return this.bindings.hrtime()-W;default:return null}};this.wasiImport={args_get:(t,e)=>{this.refreshMemory();let i=t,s=e;return n.forEach((t=>{this.view.setUint32(i,s,!0),i+=4,s+=r.from(this.memory.buffer).write(`${t}\0`,s)})),c.WASI_ESUCCESS},args_sizes_get:(t,e)=>{this.refreshMemory(),this.view.setUint32(t,n.length,!0);const i=n.reduce(((t,e)=>t+r.byteLength(e)+1),0);return this.view.setUint32(e,i,!0),c.WASI_ESUCCESS},environ_get:(t,e)=>{this.refreshMemory();let n=t,i=e;return Object.entries(this.env).forEach((([t,e])=>{this.view.setUint32(n,i,!0),n+=4,i+=r.from(this.memory.buffer).write(`${t}=${e}\0`,i)})),c.WASI_ESUCCESS},environ_sizes_get:(t,e)=>{this.refreshMemory();const n=Object.entries(this.env).map((([t,e])=>`${t}=${e}\0`)),i=n.reduce(((t,e)=>t+r.byteLength(e)),0);return this.view.setUint32(t,n.length,!0),this.view.setUint32(e,i,!0),c.WASI_ESUCCESS},clock_res_get:(t,e)=>{let n;switch(t){case c.WASI_CLOCK_MONOTONIC:case c.WASI_CLOCK_PROCESS_CPUTIME_ID:case c.WASI_CLOCK_THREAD_CPUTIME_ID:n=BigInt(1);break;case c.WASI_CLOCK_REALTIME:n=BigInt(1e3)}if(!n)throw Error("invalid clockId");return this.view.setBigUint64(e,n),c.WASI_ESUCCESS},clock_time_get:(t,e,n)=>{this.refreshMemory();const r=R(t);return null===r?c.WASI_EINVAL:(this.view.setBigUint64(n,BigInt(r),!0),c.WASI_ESUCCESS)},fd_advise:A(((t,e,n,r)=>(g(t,c.WASI_RIGHT_FD_ADVISE),c.WASI_ENOSYS))),fd_allocate:A(((t,e,n)=>(g(t,c.WASI_RIGHT_FD_ALLOCATE),c.WASI_ENOSYS))),fd_close:A((t=>{const e=g(t,BigInt(0));return s.closeSync(e.real),this.FD_MAP.delete(t),c.WASI_ESUCCESS})),fd_datasync:A((t=>{const e=g(t,c.WASI_RIGHT_FD_DATASYNC);return s.fdatasyncSync(e.real),c.WASI_ESUCCESS})),fd_fdstat_get:A(((t,e)=>{const n=g(t,BigInt(0));if(this.refreshMemory(),null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),this.view.setUint16(e+2,0,!0),this.view.setUint16(e+4,0,!0),this.view.setBigUint64(e+8,BigInt(n.rights.base),!0),this.view.setBigUint64(e+8+8,BigInt(n.rights.inheriting),!0),c.WASI_ESUCCESS})),fd_fdstat_set_flags:A(((t,e)=>(g(t,c.WASI_RIGHT_FD_FDSTAT_SET_FLAGS),c.WASI_ENOSYS))),fd_fdstat_set_rights:A(((t,e,n)=>{const r=g(t,BigInt(0));return(r.rights.base|e)>r.rights.base||(r.rights.inheriting|n)>r.rights.inheriting?c.WASI_EPERM:(r.rights.base=e,r.rights.inheriting=n,c.WASI_ESUCCESS)})),fd_filestat_get:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_FILESTAT_GET),r=s.fstatSync(n.real);if(this.refreshMemory(),this.view.setBigUint64(e,BigInt(r.dev),!0),e+=8,this.view.setBigUint64(e,BigInt(r.ino),!0),e+=8,null==n.filetype)throw Error("stats.filetype must be set");return this.view.setUint8(e,n.filetype),e+=8,this.view.setBigUint64(e,BigInt(r.nlink),!0),e+=8,this.view.setBigUint64(e,BigInt(r.size),!0),e+=8,this.view.setBigUint64(e,E(r.atimeMs),!0),e+=8,this.view.setBigUint64(e,E(r.mtimeMs),!0),e+=8,this.view.setBigUint64(e,E(r.ctimeMs),!0),c.WASI_ESUCCESS})),fd_filestat_set_size:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_FILESTAT_SET_SIZE);return s.ftruncateSync(n.real,Number(e)),c.WASI_ESUCCESS})),fd_filestat_set_times:A(((t,e,n,r)=>{const i=g(t,c.WASI_RIGHT_FD_FILESTAT_SET_TIMES),o=s.fstatSync(i.real);let a=o.atime,_=o.mtime;const l=d(R(c.WASI_CLOCK_REALTIME)),I=c.WASI_FILESTAT_SET_ATIM|c.WASI_FILESTAT_SET_ATIM_NOW;if((r&I)===I)return c.WASI_EINVAL;const u=c.WASI_FILESTAT_SET_MTIM|c.WASI_FILESTAT_SET_MTIM_NOW;return(r&u)===u?c.WASI_EINVAL:((r&c.WASI_FILESTAT_SET_ATIM)===c.WASI_FILESTAT_SET_ATIM?a=d(e):(r&c.WASI_FILESTAT_SET_ATIM_NOW)===c.WASI_FILESTAT_SET_ATIM_NOW&&(a=l),(r&c.WASI_FILESTAT_SET_MTIM)===c.WASI_FILESTAT_SET_MTIM?_=d(n):(r&c.WASI_FILESTAT_SET_MTIM_NOW)===c.WASI_FILESTAT_SET_MTIM_NOW&&(_=l),s.futimesSync(i.real,new Date(a),new Date(_)),c.WASI_ESUCCESS)})),fd_prestat_get:A(((t,e)=>{const n=g(t,BigInt(0));return this.refreshMemory(),this.view.setUint8(e,c.WASI_PREOPENTYPE_DIR),this.view.setUint32(e+4,r.byteLength(n.fakePath??n.path??""),!0),c.WASI_ESUCCESS})),fd_prestat_dir_name:A(((t,e,n)=>{const i=g(t,BigInt(0));return this.refreshMemory(),r.from(this.memory.buffer).write(i.fakePath??i.path??"",e,n,"utf8"),c.WASI_ESUCCESS})),fd_pwrite:A(((t,e,n,r,i)=>{const o=g(t,c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_SEEK);let a=0;return p(e,n).forEach((t=>{let e=0;for(;e<t.byteLength;)e+=s.writeSync(o.real,t,e,t.byteLength-e,Number(r)+a+e);a+=e})),this.view.setUint32(i,a,!0),c.WASI_ESUCCESS})),fd_write:A(((t,e,n,r)=>{const i=g(t,c.WASI_RIGHT_FD_WRITE),o=1==i.real,a=2==i.real;let _=0;return p(e,n).forEach((t=>{if(0!=t.byteLength)if(o&&null!=this.sendStdout)this.sendStdout(t),_+=t.byteLength;else if(a&&null!=this.sendStderr)this.sendStderr(t),_+=t.byteLength;else{let e=0;for(;e<t.byteLength;){const n=s.writeSync(i.real,t,e,t.byteLength-e,i.offset?Number(i.offset):null);i.offset&&(i.offset+=BigInt(n)),e+=n}_+=e}})),this.view.setUint32(r,_,!0),c.WASI_ESUCCESS})),fd_pread:A(((t,e,n,r,i)=>{const o=g(t,c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_SEEK);let a=0;t:for(const t of p(e,n)){let e=0;for(;e<t.byteLength;){const n=t.byteLength-e,i=s.readSync(o.real,t,e,t.byteLength-e,Number(r)+a+e);if(e+=i,a+=i,0===i||i<n)break t}a+=e}return this.view.setUint32(i,a,!0),c.WASI_ESUCCESS})),fd_read:A(((t,e,n,r)=>{const o=g(t,c.WASI_RIGHT_FD_READ),a=0===o.real;let _=0;t:for(const t of p(e,n)){let e=0;for(;e<t.byteLength;){let n=t.byteLength-e,r=a||void 0===o.offset?null:Number(o.offset),l=0;if(a)if(null!=this.getStdin)null==this.stdinBuffer&&(this.stdinBuffer=this.getStdin()),null!=this.stdinBuffer&&(l=this.stdinBuffer.copy(t),l==this.stdinBuffer.length?this.stdinBuffer=void 0:this.stdinBuffer=this.stdinBuffer.slice(l),l>0&&(this.lastStdin=(new Date).valueOf()));else{null!=this.sleep||m||(m=!0,i.log("(cpu waiting for stdin: please define a way to sleep!) "));try{l=s.readSync(o.real,t,e,n,r)}catch(t){}0==l?this.shortPause():this.lastStdin=(new Date).valueOf()}else l=s.readSync(o.real,t,e,n,r);if(o.filetype==c.WASI_FILETYPE_REGULAR_FILE&&(o.offset=(o.offset?o.offset:BigInt(0))+BigInt(l)),e+=l,_+=l,0===l||l<n)break t}}return this.view.setUint32(r,_,!0),c.WASI_ESUCCESS})),fd_readdir:A(((t,e,n,i,a)=>{const _=g(t,c.WASI_RIGHT_FD_READDIR);this.refreshMemory();const l=s.readdirSync(_.path,{withFileTypes:!0}),I=e;for(let t=Number(i);t<l.length;t+=1){const i=l[t];let a=r.byteLength(i.name);if(e-I>n)break;if(this.view.setBigUint64(e,BigInt(t+1),!0),(e+=8)-I>n)break;const u=s.lstatSync(o.resolve(_.path,i.name));if(this.view.setBigUint64(e,BigInt(u.ino),!0),(e+=8)-I>n)break;if(this.view.setUint32(e,a,!0),(e+=4)-I>n)break;let S;switch(!0){case u.isBlockDevice():S=c.WASI_FILETYPE_BLOCK_DEVICE;break;case u.isCharacterDevice():S=c.WASI_FILETYPE_CHARACTER_DEVICE;break;case u.isDirectory():S=c.WASI_FILETYPE_DIRECTORY;break;case u.isFIFO():S=c.WASI_FILETYPE_SOCKET_STREAM;break;case u.isFile():S=c.WASI_FILETYPE_REGULAR_FILE;break;case u.isSocket():S=c.WASI_FILETYPE_SOCKET_STREAM;break;case u.isSymbolicLink():S=c.WASI_FILETYPE_SYMBOLIC_LINK;break;default:S=c.WASI_FILETYPE_UNKNOWN}if(this.view.setUint8(e,S),e+=1,(e+=3)+a>=I+n)break;r.from(this.memory.buffer).write(i.name,e),e+=a}const u=e-I;return this.view.setUint32(a,Math.min(u,n),!0),c.WASI_ESUCCESS})),fd_renumber:A(((t,e)=>(g(t,BigInt(0)),g(e,BigInt(0)),s.closeSync(this.FD_MAP.get(t).real),this.FD_MAP.set(t,this.FD_MAP.get(e)),this.FD_MAP.delete(e),c.WASI_ESUCCESS))),fd_seek:A(((t,e,n,r)=>{const i=g(t,c.WASI_RIGHT_FD_SEEK);switch(this.refreshMemory(),n){case c.WASI_WHENCE_CUR:i.offset=(i.offset?i.offset:BigInt(0))+BigInt(e);break;case c.WASI_WHENCE_END:const{size:t}=s.fstatSync(i.real);i.offset=BigInt(t)+BigInt(e);break;case c.WASI_WHENCE_SET:i.offset=BigInt(e)}if(null==i.offset)throw Error("stats.offset must be defined");return this.view.setBigUint64(r,i.offset,!0),c.WASI_ESUCCESS})),fd_tell:A(((t,e)=>{const n=g(t,c.WASI_RIGHT_FD_TELL);return this.refreshMemory(),n.offset||(n.offset=BigInt(0)),this.view.setBigUint64(e,n.offset,!0),c.WASI_ESUCCESS})),fd_sync:A((t=>{const e=g(t,c.WASI_RIGHT_FD_SYNC);return s.fsyncSync(e.real),c.WASI_ESUCCESS})),path_create_directory:A(((t,e,n)=>{const i=g(t,c.WASI_RIGHT_PATH_CREATE_DIRECTORY);if(!i.path)return c.WASI_EINVAL;this.refreshMemory();const a=r.from(this.memory.buffer,e,n).toString();return s.mkdirSync(o.resolve(i.path,a)),c.WASI_ESUCCESS})),path_filestat_get:A(((t,e,n,i,a)=>{const _=g(t,c.WASI_RIGHT_PATH_FILESTAT_GET);if(!_.path)return c.WASI_EINVAL;this.refreshMemory();const l=r.from(this.memory.buffer,n,i).toString();let I;return I=e?s.statSync(o.resolve(_.path,l)):s.lstatSync(o.resolve(_.path,l)),this.view.setBigUint64(a,BigInt(I.dev),!0),a+=8,this.view.setBigUint64(a,BigInt(I.ino),!0),a+=8,this.view.setUint8(a,T(this,void 0,I).filetype),a+=8,this.view.setBigUint64(a,BigInt(I.nlink),!0),a+=8,this.view.setBigUint64(a,BigInt(I.size),!0),a+=8,this.view.setBigUint64(a,E(I.atimeMs),!0),a+=8,this.view.setBigUint64(a,E(I.mtimeMs),!0),a+=8,this.view.setBigUint64(a,E(I.ctimeMs),!0),c.WASI_ESUCCESS})),path_filestat_set_times:A(((t,e,n,i,a,_,l)=>{const I=g(t,c.WASI_RIGHT_PATH_FILESTAT_SET_TIMES);if(!I.path)return c.WASI_EINVAL;this.refreshMemory();const u=s.fstatSync(I.real);let S=u.atime,f=u.mtime;const E=d(R(c.WASI_CLOCK_REALTIME)),A=c.WASI_FILESTAT_SET_ATIM|c.WASI_FILESTAT_SET_ATIM_NOW;if((l&A)===A)return c.WASI_EINVAL;const h=c.WASI_FILESTAT_SET_MTIM|c.WASI_FILESTAT_SET_MTIM_NOW;if((l&h)===h)return c.WASI_EINVAL;(l&c.WASI_FILESTAT_SET_ATIM)===c.WASI_FILESTAT_SET_ATIM?S=d(a):(l&c.WASI_FILESTAT_SET_ATIM_NOW)===c.WASI_FILESTAT_SET_ATIM_NOW&&(S=E),(l&c.WASI_FILESTAT_SET_MTIM)===c.WASI_FILESTAT_SET_MTIM?f=d(_):(l&c.WASI_FILESTAT_SET_MTIM_NOW)===c.WASI_FILESTAT_SET_MTIM_NOW&&(f=E);const T=r.from(this.memory.buffer,n,i).toString();return s.utimesSync(o.resolve(I.path,T),new Date(S),new Date(f)),c.WASI_ESUCCESS})),path_link:A(((t,e,n,i,a,_,l)=>{const I=g(t,c.WASI_RIGHT_PATH_LINK_SOURCE),u=g(a,c.WASI_RIGHT_PATH_LINK_TARGET);if(!I.path||!u.path)return c.WASI_EINVAL;this.refreshMemory();const S=r.from(this.memory.buffer,n,i).toString(),f=r.from(this.memory.buffer,_,l).toString();return s.linkSync(o.resolve(I.path,S),o.resolve(u.path,f)),c.WASI_ESUCCESS})),path_open:A(((t,e,n,i,a,I,u,S,f)=>{const E=g(t,c.WASI_RIGHT_PATH_OPEN);I=BigInt(I),u=BigInt(u);const d=(I&(c.WASI_RIGHT_FD_READ|c.WASI_RIGHT_FD_READDIR))!==BigInt(0),A=(I&(c.WASI_RIGHT_FD_DATASYNC|c.WASI_RIGHT_FD_WRITE|c.WASI_RIGHT_FD_ALLOCATE|c.WASI_RIGHT_FD_FILESTAT_SET_SIZE))!==BigInt(0);let T;A&&d?T=s.constants.O_RDWR:d?T=s.constants.O_RDONLY:A&&(T=s.constants.O_WRONLY);let m=I|c.WASI_RIGHT_PATH_OPEN,p=I|u;0!=(a&c.WASI_O_CREAT)&&(T|=s.constants.O_CREAT,m|=c.WASI_RIGHT_PATH_CREATE_FILE),0!=(a&c.WASI_O_DIRECTORY)&&(T|=s.constants.O_DIRECTORY),0!=(a&c.WASI_O_EXCL)&&(T|=s.constants.O_EXCL),0!=(a&c.WASI_O_TRUNC)&&(T|=s.constants.O_TRUNC,m|=c.WASI_RIGHT_PATH_FILESTAT_SET_SIZE),0!=(S&c.WASI_FDFLAG_APPEND)&&(T|=s.constants.O_APPEND),0!=(S&c.WASI_FDFLAG_DSYNC)&&(s.constants.O_DSYNC?T|=s.constants.O_DSYNC:T|=s.constants.O_SYNC,p|=c.WASI_RIGHT_FD_DATASYNC),0!=(S&c.WASI_FDFLAG_NONBLOCK)&&(T|=s.constants.O_NONBLOCK),0!=(S&c.WASI_FDFLAG_RSYNC)&&(s.constants.O_RSYNC?T|=s.constants.O_RSYNC:T|=s.constants.O_SYNC,p|=c.WASI_RIGHT_FD_SYNC),0!=(S&c.WASI_FDFLAG_SYNC)&&(T|=s.constants.O_SYNC,p|=c.WASI_RIGHT_FD_SYNC),A&&0==(T&(s.constants.O_APPEND|s.constants.O_TRUNC))&&(p|=c.WASI_RIGHT_FD_SEEK),this.refreshMemory();const W=r.from(this.memory.buffer,n,i).toString();if("dev/tty"==W)return this.view.setUint32(f,c.WASI_STDIN_FILENO,!0),c.WASI_ESUCCESS;if(_("path_open",W),W.startsWith("proc/"))throw new l.WASIError(c.WASI_EBADF);const R=o.resolve(E.path,W);let O,y,w;try{O=s.realpathSync(R)}catch(t){if("ENOENT"!==t?.code)throw t;O=R}if(A)try{y=s.statSync(O).isDirectory()}catch(t){}w=!A&&y?s.openSync(O,s.constants.O_RDONLY):s.openSync(O,T);const N=this.getUnusedFileDescriptor();return this.FD_MAP.set(N,{real:w,filetype:void 0,rights:{base:m,inheriting:p},path:O}),h(this,N),this.view.setUint32(f,N,!0),c.WASI_ESUCCESS})),path_readlink:A(((t,e,n,i,a,_)=>{const l=g(t,c.WASI_RIGHT_PATH_READLINK);if(!l.path)return c.WASI_EINVAL;this.refreshMemory();const I=r.from(this.memory.buffer,e,n).toString(),u=o.resolve(l.path,I),S=s.readlinkSync(u),f=r.from(this.memory.buffer).write(S,i,a);return this.view.setUint32(_,f,!0),c.WASI_ESUCCESS})),path_remove_directory:A(((t,e,n)=>{const i=g(t,c.WASI_RIGHT_PATH_REMOVE_DIRECTORY);if(!i.path)return c.WASI_EINVAL;this.refreshMemory();const a=r.from(this.memory.buffer,e,n).toString();return s.rmdirSync(o.resolve(i.path,a)),c.WASI_ESUCCESS})),path_rename:A(((t,e,n,i,a,_)=>{const l=g(t,c.WASI_RIGHT_PATH_RENAME_SOURCE),I=g(i,c.WASI_RIGHT_PATH_RENAME_TARGET);if(!l.path||!I.path)return c.WASI_EINVAL;this.refreshMemory();const u=r.from(this.memory.buffer,e,n).toString(),S=r.from(this.memory.buffer,a,_).toString();return s.renameSync(o.resolve(l.path,u),o.resolve(I.path,S)),c.WASI_ESUCCESS})),path_symlink:A(((t,e,n,i,a)=>{const _=g(n,c.WASI_RIGHT_PATH_SYMLINK);if(!_.path)return c.WASI_EINVAL;this.refreshMemory();const l=r.from(this.memory.buffer,t,e).toString(),I=r.from(this.memory.buffer,i,a).toString();return s.symlinkSync(l,o.resolve(_.path,I)),c.WASI_ESUCCESS})),path_unlink_file:A(((t,e,n)=>{const i=g(t,c.WASI_RIGHT_PATH_UNLINK_FILE);if(!i.path)return c.WASI_EINVAL;this.refreshMemory();const a=r.from(this.memory.buffer,e,n).toString();return s.unlinkSync(o.resolve(i.path,a)),c.WASI_ESUCCESS})),poll_oneoff:(t,e,n,r)=>{let s=0,o=BigInt(0);const a=BigInt(this.bindings.hrtime());this.refreshMemory();for(let r=0;r<n;r+=1){const n=this.view.getBigUint64(t,!0);t+=8;const r=this.view.getUint8(t);switch(t+=1,r){case c.WASI_EVENTTYPE_CLOCK:{t+=7;const r=this.view.getUint32(t,!0);t+=4,t+=4;const i=this.view.getBigUint64(t,!0);t+=8,t+=8;const a=this.view.getUint16(t,!0);t+=2,t+=6;const _=1===a;let l=c.WASI_ESUCCESS;const I=R(r);if(null==I)l=c.WASI_EINVAL;else{const t=(_?i:I+i)-I;t>o&&(o=t)}this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,l,!0),e+=2,this.view.setUint8(e,c.WASI_EVENTTYPE_CLOCK),e+=1,e+=5,s+=1;break}case c.WASI_EVENTTYPE_FD_READ:case c.WASI_EVENTTYPE_FD_WRITE:t+=3,t+=4,this.view.setBigUint64(e,n,!0),e+=8,this.view.setUint16(e,c.WASI_ENOSYS,!0),e+=2,this.view.setUint8(e,r),e+=1,e+=5,s+=1,n==BigInt(0)&&c.WASI_EVENTTYPE_FD_READ==r&&this.shortPause();break;default:return c.WASI_EINVAL}}if(this.view.setUint32(r,s,!0),o>0&&(o-=BigInt(this.bindings.hrtime())-a,o>=1e6))if(null!=this.sleep||m||(m=!0,i.log("(100% cpu burning waiting for stdin: please define a way to sleep!) ")),null!=this.sleep){const t=d(o);this.sleep(t)}else{const t=BigInt(this.bindings.hrtime())+o;for(;BigInt(this.bindings.hrtime())<t;);}return c.WASI_ESUCCESS},proc_exit:t=>(this.bindings.exit(t),c.WASI_ESUCCESS),proc_raise:t=>t in c.SIGNAL_MAP?(this.bindings.kill(c.SIGNAL_MAP[t]),c.WASI_ESUCCESS):c.WASI_EINVAL,random_get:(t,e)=>(this.refreshMemory(),this.bindings.randomFillSync(new Uint8Array(this.memory.buffer),t,e),c.WASI_ESUCCESS),sched_yield:()=>c.WASI_ESUCCESS,sock_recv:()=>c.WASI_ENOSYS,sock_send:()=>c.WASI_ENOSYS,sock_shutdown:()=>c.WASI_ENOSYS},a.enabled&&Object.keys(this.wasiImport).forEach((t=>{const e=this.wasiImport[t];this.wasiImport[t]=function(...n){"fd_read"!=t&&"poll_oneoff"!=t&&a(t,n);try{let r=e(...n);return"fd_read"!=t&&"poll_oneoff"!=t&&a("result = ",r),r}catch(t){throw a("error: ",t),t}}}))}getState(){return{env:this.env,FD_MAP:this.FD_MAP,bindings:this.bindings}}setState(t){this.env=t.env,this.FD_MAP=t.FD_MAP,this.bindings=t.bindings}shortPause(){null!=this.sleep&&(new Date).valueOf()-this.lastStdin>2e3&&this.sleep(50)}getUnusedFileDescriptor(){let t=3;for(;this.FD_MAP.has(t);)t+=1;if(t>32768)throw Error("no available file descriptors");return t}refreshMemory(){this.view&&0!==this.view.buffer.byteLength||(this.view=new DataView(this.memory.buffer))}setMemory(t){this.memory=t}start(t,e){const n=t.exports;if(null===n||"object"!=typeof n)throw new Error(`instance.exports must be an Object. Received ${n}.`);if(null==e&&!((e=n.memory)instanceof WebAssembly.Memory))throw new Error(`instance.exports.memory must be a WebAssembly.Memory. Recceived ${e}.`);this.setMemory(e),n._start&&n._start()}getImportNamespace(t){let e=null;for(let n of WebAssembly.Module.imports(t))if("function"===n.kind&&n.module.startsWith("wasi_"))if(e){if(e!==n.module)throw new Error("Multiple namespaces detected.")}else e=n.module;return e}getImports(t){switch(this.getImportNamespace(t)){case"wasi_unstable":return{wasi_unstable:this.wasiImport};case"wasi_snapshot_preview1":return{wasi_snapshot_preview1:this.wasiImport};default:throw new Error("Can't detect a WASI namespace for the WebAssembly Module")}}initWasiFdInfo(){if(null!=this.env.WASI_FD_INFO){const t=JSON.parse(this.env.WASI_FD_INFO);for(const e in t){i.log(e);const n=parseInt(e);if(this.FD_MAP.has(n))continue;const r=t[e];try{this.bindings.fs.fstatSync(r)}catch(t){i.log("discarding ",{wasi_fd:e,real:r});continue}const s={real:r,filetype:c.WASI_FILETYPE_SOCKET_STREAM,rights:{base:u,inheriting:BigInt(0)}};this.FD_MAP.set(n,s)}i.log("after initWasiFdInfo: ",this.FD_MAP),i.log("fdInfo = ",t)}else i.log("no WASI_FD_INFO")}}},9862:()=>{},964:()=>{}},r={};function i(t){var e=r[t];if(void 0!==e)return e.exports;var s=r[t]={id:t,loaded:!1,exports:{}};return n[t].call(s.exports,s,s.exports,i),s.loaded=!0,s.exports}i.m=n,i.x=()=>{var t=i.O(void 0,[298],(()=>i(2835)));return i.O(t)},t=[],i.O=(e,n,r,s)=>{if(!n){var o=1/0;for(I=0;I<t.length;I++){for(var[n,r,s]=t[I],a=!0,_=0;_<n.length;_++)(!1&s||o>=s)&&Object.keys(i.O).every((t=>i.O[t](n[_])))?n.splice(_--,1):(a=!1,s<o&&(o=s));if(a){t.splice(I--,1);var l=r();void 0!==l&&(e=l)}}return e}s=s||0;for(var I=t.length;I>0&&t[I-1][2]>s;I--)t[I]=t[I-1];t[I]=[n,r,s]},i.f={},i.e=t=>Promise.all(Object.keys(i.f).reduce(((e,n)=>(i.f[n](t,e),e)),[])),i.u=t=>"06e2dff6585a0d6063a4.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t={753:1};i.f.i=(e,n)=>{t[e]||importScripts(i.p+i.u(e))};var e=self.webpackChunk_cowasm_website=self.webpackChunk_cowasm_website||[],n=e.push.bind(e);e.push=e=>{var[r,s,o]=e;for(var a in s)i.o(s,a)&&(i.m[a]=s[a]);for(o&&o(i);r.length;)t[r.pop()]=1;n(e)}})(),e=i.x,i.x=()=>i.e(298).then(e),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUU0dEIsRUFBYXJDLEtBQ3JDRCxFQUFvQnJyQixFQUFFc3JCLEdBQVlxQyxFQUFZckMsSUFJaEQsSUFER3NDLEdBQVNBLEVBQVF2QyxHQUNkTyxFQUFTdDVDLFFBQ2RrN0MsRUFBZ0I1QixFQUFTaUMsT0FBUyxFQUNuQ0gsRUFBMkJ0eUMsRUFBSyxDLEt6RG5CN0I3USxFQUFPOGdELEVBQW9CdDZDLEVBQy9CczZDLEVBQW9CdDZDLEVBQUksSUFDaEJzNkMsRUFBb0J2TixFQUFFLEtBQUt2Z0IsS0FBS2h6QixHMEREZDhnRCxFQUFvQnQ2QyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9zdGFydHVwIGNodW5rIGRlcGVuZGVuY2llcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vZHlsaW5rL2Rpc3QvZGxvcGVuLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9keWxpbmsvZGlzdC9mdW5jdGlvbi10YWJsZS5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vZHlsaW5rL2Rpc3QvZ2xvYmFsLW9mZnNldC10YWJsZS5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vZHlsaW5rL2Rpc3QvaW1wb3J0LmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9keWxpbmsvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vZHlsaW5rL2Rpc3QvbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2R5bGluay9kaXN0L3N0dWIuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2R5bGluay9kaXN0L3V0aWwuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvY29uc3RhbnRzLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L2Vwb2xsLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L2Vycm5vLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L2ZvcmstZXhlYy5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9uZXRkYi5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9uZXRpZi5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9vdGhlci5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9zY2hlZC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC9zaWduYWwuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvc29ja2V0LmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L3NwYXduLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L3N0YXQuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvc3RkaW8uanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvc3RkbGliLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3Bvc2l4L3Rlcm1pb3MuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvdGltZS5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC91bmlzdGQuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vcG9zaXgvdXRpbC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS9wb3NpeC93YWl0LmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3JldXNlSW5GbGlnaHQuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vd29ya2VyL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vd29ya2VyL2ltcG9ydC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS93b3JrZXIvaW5pdC5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS93b3JrZXIvaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vd29ya2VyL2lvLXVzaW5nLWF0b21pY3MuanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL2tlcm5lbC9kaXN0L3dhc20vd29ya2VyL2lvLXVzaW5nLXNlcnZpY2Utd29ya2VyLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3dvcmtlci9wb3NpeC1icm93c2VyLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3dvcmtlci9wb3NpeC1jb250ZXh0LmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3dvcmtlci9yZWN2LWZyb20td2FzbS5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4va2VybmVsL2Rpc3Qvd2FzbS93b3JrZXIvc2VuZC10by13YXNtLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3dvcmtlci90cmFtcG9saW5lLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi9rZXJuZWwvZGlzdC93YXNtL3dvcmtlci90eXBlcy5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vd2FzaS1qcy9kaXN0L2JpbmRpbmdzL2Jyb3dzZXItaHJ0aW1lLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi93YXNpLWpzL2Rpc3QvYmluZGluZ3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vd2FzaS1qcy9kaXN0L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vd2FzaS1qcy9kaXN0L2ZzLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi93YXNpLWpzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlLy4uL3dhc2ktanMvZGlzdC90eXBlcy5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvLi4vd2FzaS1qcy9kaXN0L3VuemlwLmpzIiwid2VicGFjazovL0Bjb3dhc20vd2Vic2l0ZS8uLi93YXNpLWpzL2Rpc3Qvd2FzaS5qcyIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9AY293YXNtL3dlYnNpdGUvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vQGNvd2FzbS93ZWJzaXRlL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgbmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18ueDtcbl9fd2VicGFja19yZXF1aXJlX18ueCA9ICgpID0+IHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZSgyOTgpLnRoZW4obmV4dCk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IG1ldGFkYXRhXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWV0YWRhdGFcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJkeWxpbms6ZGxvcGVuXCIpO1xuY29uc3QgU1RBQ0tfQUxJR04gPSAxNjsgLy8gY29waWVkIGZyb20gZW1zY3JpcHRlblxuLy8gU3RhY2sgc2l6ZSBmb3IgaW1wb3J0ZWQgZHluYW1pYyBsaWJyYXJpZXMgLS0gd2UgdXNlIDFNQi4gVGhpcyBpc1xuLy8gYSBydW50aW1lIHBhcmFtZXRlci5cbmNvbnN0IFNUQUNLX1NJWkUgPSAxMDQ4NTc2OyAvLyAxTUI7ICB0byB1c2UgNjRLQiBpdCB3b3VsZCBiZSA2NTUzNi5cbmNsYXNzIERsb3Blbk1hbmdlciB7XG4gICAgY29uc3RydWN0b3IoZ2V0RnVuY3Rpb24sIG1lbW9yeSwgZ2xvYmFsT2Zmc2V0VGFibGUsIGZ1bmN0aW9uVGFibGUsIHJlYWRGaWxlU3luYywgaW1wb3J0T2JqZWN0LCBpbXBvcnRXZWJBc3NlbWJseVN5bmMsIGdldE1haW5JbnN0YW5jZUV4cG9ydHMpIHtcbiAgICAgICAgdGhpcy5kbGVycm9yUHRyID0gMDtcbiAgICAgICAgdGhpcy5wYXRoVG9MaWJyYXJ5ID0ge307XG4gICAgICAgIHRoaXMuaGFuZGxlVG9MaWJyYXJ5ID0ge307XG4gICAgICAgIHRoaXMubWFpbkdldEZ1bmN0aW9uID0gZ2V0RnVuY3Rpb247XG4gICAgICAgIHRoaXMubWVtb3J5ID0gbWVtb3J5O1xuICAgICAgICB0aGlzLmdsb2JhbE9mZnNldFRhYmxlID0gZ2xvYmFsT2Zmc2V0VGFibGU7XG4gICAgICAgIHRoaXMuZnVuY3Rpb25UYWJsZSA9IGZ1bmN0aW9uVGFibGU7XG4gICAgICAgIHRoaXMucmVhZEZpbGVTeW5jID0gcmVhZEZpbGVTeW5jO1xuICAgICAgICB0aGlzLmltcG9ydE9iamVjdCA9IGltcG9ydE9iamVjdDtcbiAgICAgICAgdGhpcy5pbXBvcnRXZWJBc3NlbWJseVN5bmMgPSBpbXBvcnRXZWJBc3NlbWJseVN5bmM7XG4gICAgICAgIHRoaXMuZ2V0TWFpbkluc3RhbmNlRXhwb3J0cyA9IGdldE1haW5JbnN0YW5jZUV4cG9ydHM7XG4gICAgfVxuICAgIGFkZF9kbG1ldGhvZHMoZW52KSB7XG4gICAgICAgIGZvciAoY29uc3QgZGxtZXRob2Qgb2YgW1xuICAgICAgICAgICAgXCJkbG9wZW5cIixcbiAgICAgICAgICAgIFwiZGxhZGRyXCIsXG4gICAgICAgICAgICBcImRsY2xvc2VcIixcbiAgICAgICAgICAgIFwiZGxlcnJvclwiLFxuICAgICAgICAgICAgXCJkbHN5bVwiLFxuICAgICAgICBdKSB7XG4gICAgICAgICAgICBlbnZbZGxtZXRob2RdID0gdGhpc1tkbG1ldGhvZF0uYmluZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgaGFuZGxlIGluIHRoaXMuaGFuZGxlVG9MaWJyYXJ5KSB7XG4gICAgICAgICAgICBzdGF0ZS5hZGQoaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIGZvciAoY29uc3QgaGFuZGxlIGluIHRoaXMuaGFuZGxlVG9MaWJyYXJ5KSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmhhcyhoYW5kbGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kbGNsb3NlKHBhcnNlSW50KGhhbmRsZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG1hbGxvYyhieXRlcywgcHVycG9zZSkge1xuICAgICAgICBpZiAodGhpcy5fbWFsbG9jID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGYgPSB0aGlzLm1haW5HZXRGdW5jdGlvbihcIm1hbGxvY1wiKTtcbiAgICAgICAgICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIm1hbGxvYyBmcm9tIGxpYmMgbXVzdCBiZSBhdmFpbGFibGUgaW4gdGhlICBtYWluIGluc3RhbmNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWFsbG9jID0gZjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdHIgPSB0aGlzLl9tYWxsb2MoYnl0ZXMpO1xuICAgICAgICBpZiAocHRyID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGBvdXQgb2YgbWVtb3J5IC0tIG1hbGxvYyBmYWlsZWQgYWxsb2NhdGluZyAke3B1cnBvc2V9YDtcbiAgICAgICAgICAgIGxvZyhlcnIpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuICAgIGZyZWUocHRyKSB7XG4gICAgICAgIGlmICh0aGlzLl9mcmVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGYgPSB0aGlzLm1haW5HZXRGdW5jdGlvbihcImZyZWVcIik7XG4gICAgICAgICAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJmcmVlIGZyb20gbGliYyBtdXN0IGJlIGF2YWlsYWJsZSBpbiB0aGUgIG1haW4gaW5zdGFuY2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZyZWUgPSBmO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZnJlZShwdHIpO1xuICAgIH1cbiAgICBkbG9wZW5FbnZIYW5kbGVyKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIChlbnYsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBlbnYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoZW52LCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nKFwiZGxvcGVuRW52SGFuZGxlclwiLCBrZXkpO1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50IHRvIGNoZWNrIGltcG9ydE9iamVjdC5lbnYgTEFTVCBzaW5jZSBpdCBjb3VsZCBiZSBhIHByb3h5XG4gICAgICAgICAgICAvLyB0aGF0IGdlbmVyYXRlcyBzdHViIGZ1bmN0aW9uczpcbiAgICAgICAgICAgIGNvbnN0IGYgPSB0aGlzLm1haW5HZXRGdW5jdGlvbihrZXksIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZyhcImRsb3BlbkVudkhhbmRsZXIgZ290IG51bGxcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICAvLyBGT1IgTE9XIExFVkVMIERFQlVHR0lORyBPTkxZIVxuICAgICAgICAgICAgLy8gICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgLy8gICAgICAgY29uc29sZS5sb2coXCJlbnYgY2FsbCBcIiwga2V5KTtcbiAgICAgICAgICAgIC8vICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIC8vICAgICAgIHJldHVybiBmKC4uLmFyZ3MpO1xuICAgICAgICAgICAgLy8gICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuICAgIHN5bWJvbFZpYVBvaW50ZXIobmFtZSkge1xuICAgICAgICBjb25zdCBleHBvcnRzID0gdGhpcy5nZXRNYWluSW5zdGFuY2VFeHBvcnRzKCk7XG4gICAgICAgIGlmIChleHBvcnRzID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47IC8vIG5vdCB5ZXQgYXZhaWxhYmxlXG4gICAgICAgIGxvZyhcInN5bWJvbFZpYVBvaW50ZXJcIiwgbmFtZSk7XG4gICAgICAgIGxldCBmID0gZXhwb3J0c1tgX19XQVNNX0VYUE9SVF9fJHtuYW1lfWBdO1xuICAgICAgICBpZiAoZiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzeW0gPSBmKCk7XG4gICAgICAgIGxvZyhcInN5bWJvbFZpYVBvaW50ZXJcIiwgbmFtZSwgXCItLT5cIiwgc3ltKTtcbiAgICAgICAgcmV0dXJuIHN5bTtcbiAgICB9XG4gICAgZGxvcGVuKHBhdGhuYW1lUHRyLCBfZmxhZ3MpIHtcbiAgICAgICAgLy8gVE9ETzogX2ZsYWdzIGFyZSBpZ25vcmVkIGZvciBub3cuXG4gICAgICAgIGlmICh0aGlzLm1lbW9yeSA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJidWdcIik7IC8vIG1haW5seSBmb3IgdHlwZXNjcmlwdFxuICAgICAgICBjb25zdCBwYXRoID0gKDAsIHV0aWxfMS5yZWN2U3RyaW5nKShwYXRobmFtZVB0ciwgdGhpcy5tZW1vcnkpO1xuICAgICAgICBsb2coXCJkbG9wZW46IHBhdGg9JyVzJ1wiLCBwYXRoKTtcbiAgICAgICAgaWYgKHRoaXMucGF0aFRvTGlicmFyeVtwYXRoXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoVG9MaWJyYXJ5W3BhdGhdLmhhbmRsZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiaW5hcnkgPSBuZXcgVWludDhBcnJheSh0aGlzLnJlYWRGaWxlU3luYyhwYXRoKSk7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gKDAsIG1ldGFkYXRhXzEuZGVmYXVsdCkoYmluYXJ5KTtcbiAgICAgICAgbG9nKFwibWV0YWRhdGFcIiwgbWV0YWRhdGEpO1xuICAgICAgICAvLyBhbGlnbm1lbnRzIGFyZSBwb3dlcnMgb2YgMlxuICAgICAgICBsZXQgbWVtQWxpZ24gPSBNYXRoLnBvdygyLCBtZXRhZGF0YS5tZW1vcnlBbGlnbiA/PyAwKTtcbiAgICAgICAgLy8gZmluYWxpemUgYWxpZ25tZW50cyBhbmQgdmVyaWZ5IHRoZW1cbiAgICAgICAgbWVtQWxpZ24gPSBNYXRoLm1heChtZW1BbGlnbiwgU1RBQ0tfQUxJR04pOyAvLyB3ZSBhdCBsZWFzdCBuZWVkIHN0YWNrIGFsaWdubWVudFxuICAgICAgICBpZiAobWV0YWRhdGEubWVtb3J5U2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm1lbW9yeVNpemUgbXVzdCBiZSBkZWZpbmVkIGluIHRoZSBzaGFyZWQgbGlicmFyeVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbGxvYyA9IHRoaXMubWFsbG9jKG1ldGFkYXRhLm1lbW9yeVNpemUgKyBtZW1BbGlnbiwgXCJzcGFjZSBmb3IgXCIgKyBwYXRoKTtcbiAgICAgICAgY29uc3Qgc3RhY2tfYWxsb2MgPSB0aGlzLm1hbGxvYyhTVEFDS19TSVpFLCBcInN0YWNrIGZvciBcIiArIHBhdGgpO1xuICAgICAgICBsb2coXCJhbGxvY2F0aW5nICVzIGJ5dGVzIGZvciBzaGFyZWQgbGlicmFyeSAtLSBhdCBcIiwgbWV0YWRhdGEubWVtb3J5U2l6ZSArIG1lbUFsaWduLCBhbGxvYyk7XG4gICAgICAgIGNvbnN0IF9fbWVtb3J5X2Jhc2UgPSBtZXRhZGF0YS5tZW1vcnlTaXplXG4gICAgICAgICAgICA/ICgwLCB1dGlsXzEuYWxpZ25NZW1vcnkpKGFsbG9jLCBtZW1BbGlnbilcbiAgICAgICAgICAgIDogMDtcbiAgICAgICAgY29uc3QgX190YWJsZV9iYXNlID0gbWV0YWRhdGEudGFibGVTaXplXG4gICAgICAgICAgICA/IHRoaXMuZnVuY3Rpb25UYWJsZS5nZXROZXh0VGFibGVQb3MoKVxuICAgICAgICAgICAgOiAwO1xuICAgICAgICBjb25zdCBlbnYgPSB7XG4gICAgICAgICAgICBtZW1vcnk6IHRoaXMubWVtb3J5LFxuICAgICAgICAgICAgX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZTogdGhpcy5mdW5jdGlvblRhYmxlLnRhYmxlLFxuICAgICAgICAgICAgX19tZW1vcnlfYmFzZSxcbiAgICAgICAgICAgIF9fdGFibGVfYmFzZSxcbiAgICAgICAgICAgIF9fc3RhY2tfcG9pbnRlcjogbmV3IFdlYkFzc2VtYmx5Lkdsb2JhbCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFwiaTMyXCIsXG4gICAgICAgICAgICAgICAgbXV0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHBvaW50ZXIgdG8gdGhlIHRvcCBvZiB0aGUgbWVtb3J5IHdlIGFsbG9jYXRlZFxuICAgICAgICAgICAgLy8gZm9yIHRoaXMgZHluYW1pYyBsaWJyYXJ5J3Mgc3RhY2ssIHNpbmNlIHRoZSBzdGFjayBncm93c1xuICAgICAgICAgICAgLy8gZG93biwgaW4gdGVybXMgb2YgbWVtb3J5IGFkZHJlc3Nlcy5cbiAgICAgICAgICAgIHN0YWNrX2FsbG9jICsgU1RBQ0tfU0laRSksXG4gICAgICAgIH07XG4gICAgICAgIGxvZyhcImVudiA9XCIsIGVudik7XG4gICAgICAgIGNvbnN0IGxpYkltcG9ydE9iamVjdCA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuaW1wb3J0T2JqZWN0LFxuICAgICAgICAgICAgZW52OiBuZXcgUHJveHkoZW52LCB7IGdldDogdGhpcy5kbG9wZW5FbnZIYW5kbGVyKHBhdGgpIH0pLFxuICAgICAgICAgICAgXCJHT1QubWVtXCI6IHRoaXMuZ2xvYmFsT2Zmc2V0VGFibGUubWVtLFxuICAgICAgICAgICAgXCJHT1QuZnVuY1wiOiB0aGlzLmdsb2JhbE9mZnNldFRhYmxlLmZ1bmMsXG4gICAgICAgIH07XG4gICAgICAgIC8vIGFjY291bnQgZm9yIHRoZSBlbnRyaWVzIHRoYXQgZ290IGluc2VydGVkIGR1cmluZyB0aGUgaW1wb3J0LlxuICAgICAgICAvLyBUaGlzIG11c3QgaGFwcGVuIEJFRk9SRSB0aGUgaW1wb3J0LCBzaW5jZSB0aGF0IHdpbGwgY3JlYXRlIHNvbWVcbiAgICAgICAgLy8gbmV3IGVudHJpZXMgdG8gZ2V0IHB1dCBpbiB0aGUgdGFibGUgYmVsb3csIGFuZCB0aGUgaW1wb3J0IGl0c2VsZlxuICAgICAgICAvLyB3aWxsIHB1dCBlbnRyaWVzIGZyb20gdGhlIGN1cnJlbnQgcG9zaXRpb24gdXAgdG8gbWV0YWRhdGEudGFibGVTaXplXG4gICAgICAgIC8vIHBvc2l0aW9ucyBmb3J3YXJkLlxuICAgICAgICBpZiAobWV0YWRhdGEudGFibGVTaXplKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bmN0aW9uVGFibGUucHJlcGFyZUZvckltcG9ydChtZXRhZGF0YS50YWJsZVNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0MCA9IDA7XG4gICAgICAgIGlmIChsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgdDAgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIGxvZyhcImltcG9ydGluZyBcIiwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmltcG9ydFdlYkFzc2VtYmx5U3luYyhwYXRoLCBsaWJJbXBvcnRPYmplY3QpO1xuICAgICAgICBpZiAobG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGxvZyhcImltcG9ydGVkIFwiLCBwYXRoLCBcIiwgdGltZSA9XCIsIG5ldyBEYXRlKCkudmFsdWVPZigpIC0gdDAsIFwibXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ltVG9QdHIgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGluc3RhbmNlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbE9mZnNldFRhYmxlLmZ1bmNNYXBbbmFtZV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IGluc3RhbmNlLmV4cG9ydHNbbmFtZV07XG4gICAgICAgICAgICBpZiAoc3ltVG9QdHJbbmFtZV0gIT0gbnVsbCB8fCB0eXBlb2YgdmFsICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHN5bVRvUHRyW25hbWVdID0gdGhpcy5mdW5jdGlvblRhYmxlLnNldCh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBhbGwgZnVuY3Rpb25zIGluIHRoZSBmdW5jdGlvbiB0YWJsZSB0aGF0IGNvdWxkbid0XG4gICAgICAgIC8vIGJlIHJlc29sdmVkIHRvIHBvaW50ZXJzIHdoZW4gY3JlYXRpbmcgdGhlIHdlYmFzc2VtYmx5IG1vZHVsZS5cbiAgICAgICAgZm9yIChjb25zdCBzeW1OYW1lIGluIHRoaXMuZ2xvYmFsT2Zmc2V0VGFibGUuZnVuY01hcCkge1xuICAgICAgICAgICAgY29uc3QgZiA9IGluc3RhbmNlLmV4cG9ydHNbc3ltTmFtZV0gPz8gdGhpcy5nZXRNYWluSW5zdGFuY2VFeHBvcnRzKClbc3ltTmFtZV07XG4gICAgICAgICAgICBsb2coXCJ0YWJsZVslc10gPSAlc1wiLCB0aGlzLmdsb2JhbE9mZnNldFRhYmxlLmZ1bmNNYXBbc3ltTmFtZV0/LmluZGV4LCBzeW1OYW1lLCBmKTtcbiAgICAgICAgICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcyB0byBiZSBhIGZhdGFsIGVycm9yLCBzaW5jZSB0aGUgb25seSBvdGhlciBvcHRpb24gd291bGRcbiAgICAgICAgICAgICAgICAvLyBiZSBoYXZpbmcgYSBwb2ludGVyIHRvIHJhbmRvbSBub25zZW5zZSBvciBhIGJyb2tlIGZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIGRlZmluaXRlbHkgZ29pbmcgdG8gc2VnZmF1bHQgcmFuZG9tbHkgbGF0ZXIgd2hlbiBpdFxuICAgICAgICAgICAgICAgIC8vIGdldHMgaGl0IGJ5IHJ1bm5pbmcgY29kZS4gU2VlIGNvbW1lbnRzIGFib3ZlIGluIEdPVEZ1bmNIYW5kbGVyLlxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBkbG9wZW4gLS0gVU5SRVNPTFZFRCBGVU5DVElPTjogJHtzeW1OYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nbG9iYWxPZmZzZXRUYWJsZS5mdW5jTWFwW3N5bU5hbWVdLnNldChmKTtcbiAgICAgICAgICAgIHN5bVRvUHRyW3N5bU5hbWVdID0gdGhpcy5nbG9iYWxPZmZzZXRUYWJsZS5mdW5jTWFwW3N5bU5hbWVdLmluZGV4O1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZ2xvYmFsT2Zmc2V0VGFibGUuZnVuY01hcFtzeW1OYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG1lbU1hcCB9ID0gdGhpcy5nbG9iYWxPZmZzZXRUYWJsZTtcbiAgICAgICAgZm9yIChjb25zdCBzeW1OYW1lIGluIG1lbU1hcCkge1xuICAgICAgICAgICAgY29uc3QgeCA9IG1lbU1hcFtzeW1OYW1lXTtcbiAgICAgICAgICAgIGRlbGV0ZSBtZW1NYXBbc3ltTmFtZV07XG4gICAgICAgICAgICBjb25zdCBwdHJCZWZvcmVPZmZzZXQgPSBpbnN0YW5jZS5leHBvcnRzW3N5bU5hbWVdPy52YWx1ZTtcbiAgICAgICAgICAgIGlmIChwdHJCZWZvcmVPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuc3ltYm9sVmlhUG9pbnRlcihzeW1OYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAocHRyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgZGxvcGVuOiBGQVRBTCBFUlJPUiAtIFN5bWJvbCAnJHtzeW1OYW1lfScgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY293YXNtIGtlcm5lbCBvciBhbnkgbG9hZGVkIGxpYnJhcnkgdmlhIF9fV0FTTV9FWFBPUlRfXyR7c3ltTmFtZX0gYnV0IGlzIHJlcXVpcmVkIGJ5ICcke3BhdGh9Jy5gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGRsb3BlbiAtLSBVTlJFU09MVkVEIFNZTUJPTDogJHtzeW1OYW1lfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZvdW5kIFwiLCBzeW1OYW1lLCBcIiBpbiBnbG9iYWxcIik7XG4gICAgICAgICAgICAgICAgICAgIHgudmFsdWUgPSBwdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgeC52YWx1ZSA9IHB0ckJlZm9yZU9mZnNldCArIF9fbWVtb3J5X2Jhc2U7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInB1dHRpbmcgXCIsIHN5bU5hbWUsIFwiIGluIG9mZnNldFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UuZXhwb3J0cy5fX3dhc21fY2FsbF9jdG9ycyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGlzICoqTVVTVCoqIGJlIGFmdGVyIHVwZGF0aW5nIGFsbCB0aGUgdmFsdWVzIGFib3ZlISFcbiAgICAgICAgICAgIGxvZyhcImNhbGxpbmcgX193YXNtX2NhbGxfY3RvcnMgZm9yIGR5bmFtaWMgbGlicmFyeVwiKTtcbiAgICAgICAgICAgIGluc3RhbmNlLmV4cG9ydHMuX193YXNtX2NhbGxfY3RvcnMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UuZXhwb3J0cy5fX3dhc21fYXBwbHlfZGF0YV9yZWxvY3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhpcyAqKk1VU1QqKiBiZSBhZnRlciB1cGRhdGluZyBhbGwgdGhlIHZhbHVlcyBhYm92ZSEhXG4gICAgICAgICAgICBsb2coXCJjYWxsaW5nIF9fd2FzbV9hcHBseV9kYXRhX3JlbG9jcyBmb3IgZHluYW1pYyBsaWJyYXJ5XCIpO1xuICAgICAgICAgICAgaW5zdGFuY2UuZXhwb3J0cy5fX3dhc21fYXBwbHlfZGF0YV9yZWxvY3MoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgYW4gYXZhaWxhYmxlIGhhbmRsZSBieSBtYXhpbmcgYWxsIHRoZSBpbnQgdmVyc2lvbnMgb2YgdGhlXG4gICAgICAgIC8vIGtleXMgb2YgdGhlIGhhbmRsZVRvTGlicmFyeSBtYXAuXG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IE1hdGgubWF4KDAsIC4uLk9iamVjdC5rZXlzKHRoaXMuaGFuZGxlVG9MaWJyYXJ5KS5tYXAoKG4pID0+IHBhcnNlSW50KG4pKSkgKyAxO1xuICAgICAgICBjb25zdCBsaWJyYXJ5ID0ge1xuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGhhbmRsZSxcbiAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgc3ltVG9QdHIsXG4gICAgICAgICAgICBzdGFja19hbGxvYyxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wYXRoVG9MaWJyYXJ5W3BhdGhdID0gbGlicmFyeTtcbiAgICAgICAgdGhpcy5oYW5kbGVUb0xpYnJhcnlbaGFuZGxlXSA9IGxpYnJhcnk7XG4gICAgICAgIHJldHVybiBoYW5kbGU7XG4gICAgfVxuICAgIGRsc3ltKGhhbmRsZSwgc3ltYm9sUHRyKSB7XG4gICAgICAgIGNvbnN0IHN5bU5hbWUgPSAoMCwgdXRpbF8xLnJlY3ZTdHJpbmcpKHN5bWJvbFB0ciwgdGhpcy5tZW1vcnkpO1xuICAgICAgICBsb2coXCJkbHN5bTogaGFuZGxlPSVzLCBzeW1OYW1lPSclcydcIiwgaGFuZGxlLCBzeW1OYW1lKTtcbiAgICAgICAgY29uc3QgbGliID0gdGhpcy5oYW5kbGVUb0xpYnJhcnlbaGFuZGxlXTtcbiAgICAgICAgaWYgKGxpYiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgZGxzeW06IGludmFsaWQgaGFuZGxlICR7aGFuZGxlfWApO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwdHIgPSBsaWIuc3ltVG9QdHJbc3ltTmFtZV07XG4gICAgICAgIGxvZyhcInN5bT0gXCIsIHN5bU5hbWUsIFwiLCBwdHIgPSBcIiwgcHRyKTtcbiAgICAgICAgaWYgKHB0ciAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBzeW1ib2wgaXMgYSBrbm93biBmdW5jdGlvbiBwb2ludGVyXG4gICAgICAgICAgICByZXR1cm4gcHRyO1xuICAgICAgICB9XG4gICAgICAgIC8vIHNvbWV0aW1lcyBpdHMgYW4gYWxpYXM6XG4gICAgICAgIHB0ciA9IGxpYi5pbnN0YW5jZS5leHBvcnRzW2BfX1dBU01fRVhQT1JUX18ke3N5bU5hbWV9YF0/LigpO1xuICAgICAgICBpZiAocHRyICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHN5bWJvbCBpcyBhIGtub3duIGZ1bmN0aW9uIHBvaW50ZXJcbiAgICAgICAgICAgIHJldHVybiBwdHI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTk9UIHN1cmUgaWYgdGhpcyBpcyBhdCBhbGwgY29ycmVjdCBvciBtZWFuaW5nZnVsIG9yIHdoYXQgdG8gZXZlblxuICAgICAgICAvLyBkbyB3aXRoIG5vbiBmdW5jdGlvbnMhXG4gICAgICAgIC8vIGRsc3ltIGlzIHN1cHBvc2VkIHRvIHJldHVybiBhIG51bGwgcG9pbnRlciBvbiBmYWlsLCBOT1QgdGhyb3cgZXhjZXB0aW9uXG4gICAgICAgIHRoaXMuc2V0X2RsZXJyb3IoYGRsc3ltOiBoYW5kbGU9JHtoYW5kbGV9IC0gdW5rbm93biBzeW1ib2wgJyR7c3ltTmFtZX0nYCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBkbGFkZHIoKSB7XG4gICAgICAgIGxvZyhcImRsYWRkcjogTk9UIElNUExFTUVOVEVEXCIpO1xuICAgICAgICAvLyB3ZSBjb3VsZG4ndCBmaW5kIFwiaXRcIlxuICAgICAgICB0aGlzLnNldF9kbGVycm9yKFwiZGxhZGRyIGlzIG5vdCB5ZXQgaW1wbGVtZW50ZWRcIik7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAvKlxuICAgIFwiVGhlIGZ1bmN0aW9uIGRsY2xvc2UoKSBkZWNyZW1lbnRzIHRoZSByZWZlcmVuY2UgY291bnQgb24gdGhlIGR5bmFtaWMgbGlicmFyeVxuICAgIGhhbmRsZSBoYW5kbGUuIElmIHRoZSByZWZlcmVuY2UgY291bnQgZHJvcHMgdG8gemVybyBhbmQgbm8gb3RoZXIgbG9hZGVkXG4gICAgbGlicmFyaWVzIHVzZSBzeW1ib2xzIGluIGl0LCB0aGVuIHRoZSBkeW5hbWljIGxpYnJhcnkgaXMgdW5sb2FkZWQuIFRoZSBmdW5jdGlvblxuICAgIGRsY2xvc2UoKSByZXR1cm5zIDAgb24gc3VjY2VzcywgYW5kIG5vbnplcm8gb24gZXJyb3IuXCJcbiAgICBUT0RPOiB3ZSBkbyBub3QgdHJhY2sgXCJvdGhlciBsaWJyYXJpZXMgdXNlIHN5bWJvbHMgaW4gaXRcIiB5ZXQsIHNvIHRoaXMgaXMgdmVyeVxuICAgIG11Y2ggTk9UIHNhZmUgdG8gdXNlIGlmIHlvdSBkb24ndCBrbm93IHRoYXQgaXQgaXNuJ3QgYmVpbmcgcmVmZXJlbmNlZC5cbiAgICAqL1xuICAgIGRsY2xvc2UoaGFuZGxlKSB7XG4gICAgICAgIGxvZyhcImRsY2xvc2VcIiwgaGFuZGxlKTtcbiAgICAgICAgY29uc3QgbGliID0gdGhpcy5oYW5kbGVUb0xpYnJhcnlbaGFuZGxlXTtcbiAgICAgICAgaWYgKGxpYiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9kbGVycm9yKGBkbGNsb3NlOiBpbnZhbGlkIGhhbmRsZSAke2hhbmRsZX1gKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaWIgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGxpYi5zeW1Ub1B0cikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB0ciA9IGxpYi5zeW1Ub1B0cltuYW1lXTtcbiAgICAgICAgICAgICAgICB0aGlzLmZ1bmN0aW9uVGFibGUuZGVsZXRlKHB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZyZWUobGliLnN0YWNrX2FsbG9jKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2xvc2luZyBcIiwgbGliKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZVRvTGlicmFyeVtoYW5kbGVdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucGF0aFRvTGlicmFyeVtsaWIucGF0aF07XG4gICAgICAgICAgICAvLyBuZWVkIHRvIGZyZWUgdGhlIGFsbG9jYXRlZCBmdW5jdGlvbnMuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHNldF9kbGVycm9yKHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRsZXJyb3JQdHIpIHtcbiAgICAgICAgICAgIC8vIGFsbG9jYXRlIHNwYWNlIGZvciB0aGUgZXJyb3JcbiAgICAgICAgICAgIHRoaXMuZGxlcnJvclB0ciA9IHRoaXMubWFsbG9jKDEwMjQsIFwiZGxlcnJvciBwb2ludGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgICgwLCB1dGlsXzEuc2VuZFN0cmluZykocy5zbGljZSgwLCAxMDIzKSwgdGhpcy5kbGVycm9yUHRyLCB0aGlzLm1lbW9yeSk7XG4gICAgfVxuICAgIC8qXG4gICAgXCJUaGUgZnVuY3Rpb24gZGxlcnJvcigpIHJldHVybnMgYSBodW1hbiByZWFkYWJsZSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgbW9zdFxuICAgIHJlY2VudCBlcnJvciB0aGF0IG9jY3VycmVkIGZyb20gZGxvcGVuKCksIGRsc3ltKCkgb3IgZGxjbG9zZSgpIHNpbmNlIHRoZSBsYXN0XG4gICAgY2FsbCB0byBkbGVycm9yKCkuIEl0IHJldHVybnMgTlVMTCBpZiBubyBlcnJvcnMgaGF2ZSBvY2N1cnJlZCBzaW5jZVxuICAgIGluaXRpYWxpemF0aW9uIG9yIHNpbmNlIGl0IHdhcyBsYXN0IGNhbGxlZC5cIlxuICAgICovXG4gICAgZGxlcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGxlcnJvclB0cjtcbiAgICB9XG4gICAgLy8gU2VlIGlmIHRoZSBmdW5jdGlvbiB3ZSB3YW50IGlzIGRlZmluZWQgaW4gc29tZVxuICAgIC8vIGFscmVhZHkgaW1wb3J0ZWQgZHluYW1pYyBsaWJyYXJ5OlxuICAgIGdldEZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBoYW5kbGUgaW4gdGhpcy5oYW5kbGVUb0xpYnJhcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aCwgc3ltVG9QdHIsIGluc3RhbmNlIH0gPSB0aGlzLmhhbmRsZVRvTGlicmFyeVtoYW5kbGVdO1xuICAgICAgICAgICAgLy8gdHdvIHBsYWNlcyB0aGF0IGNvdWxkIGhhdmUgdGhlIHBvaW50ZXI6XG4gICAgICAgICAgICBjb25zdCBwdHIgPSBzeW1Ub1B0cltuYW1lXSA/P1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmV4cG9ydHNbYF9fV0FTTV9FWFBPUlRfXyR7bmFtZX1gXT8uKCk7XG4gICAgICAgICAgICBpZiAocHRyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2coXCJnZXRGdW5jdGlvblwiLCBuYW1lLCBwYXRoLCBcImhhbmRsZT1cIiwgaGFuZGxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jdGlvblRhYmxlLmdldChwdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRGxvcGVuTWFuZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGxvcGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwiZHlsaW5rOmZ1bmN0aW9uLXRhYmxlXCIpO1xuY29uc3QgR1JPV19USFJFU0ggPSA1MDtcbmNsYXNzIEZ1bmN0aW9uVGFibGUge1xuICAgIGNvbnN0cnVjdG9yKHRhYmxlKSB7XG4gICAgICAgIC8vIGluZGV4ZXMgaW50byB0aGUgZnVuY3Rpb24gdGFibGUgdGhhdCBhcmUgbnVsbCwgYnV0XG4gICAgICAgIC8vIG1heWJlIGxlc3MgdGhhbiBuZXh0VGFibGVQb3MuXG4gICAgICAgIHRoaXMuYXZhaWxhYmxlVGFibGVJbmRleGVzID0gbmV3IFNldCgpO1xuICAgICAgICAvLyBuZXh0IGF2YWlsYWJsZSB0YWJsZSBwb3NpdGlvbiBhdCB0aGUgdmVyeSBlbmQuIFVzZSB0aGlzIGlmXG4gICAgICAgIC8vIGF2YWlsYWJsZVRhYmxlSW5kZXhlcyBpcyBlbXB0eS5cbiAgICAgICAgdGhpcy5uZXh0VGFibGVQb3MgPSAwO1xuICAgICAgICBsb2coXCJjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgIH1cbiAgICB1cGRhdGVBZnRlckltcG9ydCgpIHtcbiAgICAgICAgdGhpcy5uZXh0VGFibGVQb3MgPSBNYXRoLm1heCgwLCAuLi4oMCwgdXRpbF8xLm5vbnplcm9Qb3NpdGlvbnMpKHRoaXMudGFibGUpKSArIDE7XG4gICAgfVxuICAgIHByZXBhcmVGb3JJbXBvcnQodGFibGVTaXplKSB7XG4gICAgICAgIHRoaXMubmV4dFRhYmxlUG9zICs9IHRhYmxlU2l6ZTtcbiAgICAgICAgaWYgKHRoaXMudGFibGUubGVuZ3RoIDw9IHRoaXMubmV4dFRhYmxlUG9zICsgR1JPV19USFJFU0gpIHtcbiAgICAgICAgICAgIHRoaXMudGFibGUuZ3Jvdyh0aGlzLm5leHRUYWJsZVBvcyArIEdST1dfVEhSRVNIIC0gdGhpcy50YWJsZS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldE5leHRUYWJsZVBvcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dFRhYmxlUG9zO1xuICAgIH1cbiAgICAvLyBnZXRzIHRoZSBuZXh0IGF2YWlsYWJsZSBpbmRleCwgdGhlbiBtYXJrcyBpdFxuICAgIC8vIGFzIG5vIGxvbmdlciBhdmFpbGFibGUsIHNvIGl0IGNhbiBiZSB1c2VkLlxuICAgIGdldE5leHRBdmFpbGFibGVJbmRleCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbmRleCBvZiB0aGlzLmF2YWlsYWJsZVRhYmxlSW5kZXhlcykge1xuICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVUYWJsZUluZGV4ZXMuZGVsZXRlKGluZGV4KTtcbiAgICAgICAgICAgIGxvZyhcImdldE5leHRBdmFpbGFibGVJbmRleDogZnJvbSBhdmFpbGFibGVUYWJsZUluZGV4ZXNcIiwgaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5uZXh0VGFibGVQb3M7XG4gICAgICAgIGxvZyhcImdldE5leHRBdmFpbGFibGVJbmRleDogZnJvbSBuZXh0VGFibGVQb3NcIiwgaW5kZXgpO1xuICAgICAgICB0aGlzLm5leHRUYWJsZVBvcyArPSAxO1xuICAgICAgICBpZiAodGhpcy50YWJsZS5sZW5ndGggPD0gdGhpcy5uZXh0VGFibGVQb3MgKyBHUk9XX1RIUkVTSCkge1xuICAgICAgICAgICAgdGhpcy50YWJsZS5ncm93KHRoaXMubmV4dFRhYmxlUG9zICsgR1JPV19USFJFU0ggLSB0aGlzLnRhYmxlLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBzZXRMYXRlcigpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmdldE5leHRBdmFpbGFibGVJbmRleCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBzZXQ6IChmKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoZiwgaW5kZXgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc2V0KGYsIF9pbmRleCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IF9pbmRleCA/PyB0aGlzLmdldE5leHRBdmFpbGFibGVJbmRleCgpO1xuICAgICAgICBpZiAodGhpcy50YWJsZS5nZXQoaW5kZXgpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQlVHOiB0cnlpbmcgdG8gc2V0IGEgdGFibGUgaW5kZXggdGhhdCBpcyBhbHJlYWR5IHNldFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhYmxlLnNldChpbmRleCwgZik7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgZ2V0KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmxlLmdldChpbmRleCk7XG4gICAgfVxuICAgIGRlbGV0ZShpbmRleCkge1xuICAgICAgICB0aGlzLnRhYmxlLnNldChpbmRleCwgbnVsbCk7XG4gICAgICAgIHRoaXMuYXZhaWxhYmxlVGFibGVJbmRleGVzLmFkZChpbmRleCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gRnVuY3Rpb25UYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZ1bmN0aW9uLXRhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJkeWxpbms6Z2xvYmFsLW9mZnNldC10YWJsZVwiKTtcbi8vIEdsb2JhbCBPZmZzZXQgVGFibGVcbmNsYXNzIEdsb2JhbE9mZnNldFRhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihnZXRNYWluSW5zdGFuY2VFeHBvcnRzLCBmdW5jdGlvblRhYmxlKSB7XG4gICAgICAgIHRoaXMuR09UID0ge307XG4gICAgICAgIHRoaXMubWVtTWFwID0ge307XG4gICAgICAgIHRoaXMuZnVuY01hcCA9IHt9O1xuICAgICAgICB0aGlzLm1lbSA9IG5ldyBQcm94eSh0aGlzLkdPVCwgeyBnZXQ6IHRoaXMuR09UTWVtSGFuZGxlci5iaW5kKHRoaXMpIH0pO1xuICAgICAgICB0aGlzLmZ1bmMgPSBuZXcgUHJveHkodGhpcy5HT1QsIHsgZ2V0OiB0aGlzLkdPVEZ1bmNIYW5kbGVyLmJpbmQodGhpcykgfSk7XG4gICAgICAgIHRoaXMuZ2V0TWFpbkluc3RhbmNlRXhwb3J0cyA9IGdldE1haW5JbnN0YW5jZUV4cG9ydHM7XG4gICAgICAgIHRoaXMuZnVuY3Rpb25UYWJsZSA9IGZ1bmN0aW9uVGFibGU7XG4gICAgfVxuICAgIGdldFN0YXRlKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5HT1QpIHtcbiAgICAgICAgICAgIHN0YXRlLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5HT1QpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5HT1Rba2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5tZW1NYXBba2V5XTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5mdW5jTWFwW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgR09UTWVtSGFuZGxlcihfLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0aGlzLkdPVCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRoaXMuR09ULCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIFRoZSBzcGVjIGhhcyB0aGUgZm9sbG93aW5nIChnYXJibGVkPykgc3RhdGVtZW50IGFib3V0IHdoYXQgdGhpcyBpczpcbiAgICAgICAgXCJIb3dldmVyIHNpbmNlIGV4cG9ydHMgYXJlIHN0YXRpYywgbW9kdWxlcyBjb25uZWN0IFtzaWMgLS0gY2Fubm90P11cbiAgICAgICAgZXhwb3J0IHRoZSBmaW5hbCByZWxvY2F0ZWQgYWRkcmVzc2VzIChpLmUuIHRoZXkgY2Fubm90IGFkZFxuICAgICAgICBfX21lbW9yeV9iYXNlIGJlZm9yZSBleHBvcnRpbmcpLiBUaHVzLCB0aGUgZXhwb3J0ZWQgYWRkcmVzcyBpc1xuICAgICAgICBiZWZvcmUgcmVsb2NhdGlvbjsgdGhlIGxvYWRlciwgd2hpY2gga25vd3MgX19tZW1vcnlfYmFzZSwgY2FuXG4gICAgICAgIHRoZW4gY2FsY3VsYXRlIHRoZSBmaW5hbCByZWxvY2F0ZWQgYWRkcmVzcy5cIlxuICAgIFxuICAgICAgICBJbiBhbnkgY2FzZSwgd2hhdCB3ZSBuZWVkIHRvIGRvIGhlcmUgaXMgcmV0dXJuIHRoZSAqbWVtb3J5IGFkZHJlc3MqXG4gICAgICAgIG9mIHRoZSB2YXJpYWJsZSB3aXRoIG5hbWUga2V5LiAgRm9yIGV4YW1wbGUsIGlmIGtleT0nc3RkaW4nLCB3ZVxuICAgICAgICBhcmUgcmV0dXJuaW5nIHRoZSBhZGRyZXNzIG9mIHRoZSBzdGRpbiBmaWxlIGRlc2NyaXB0b3IgKHRoYXQgaW50ZWdlcikuXG4gICAgICAgICovXG4gICAgICAgIGxldCBydG4gPSB0aGlzLkdPVFtrZXldO1xuICAgICAgICBpZiAoIXJ0bikge1xuICAgICAgICAgICAgY29uc3QgeCA9IG5ldyBXZWJBc3NlbWJseS5HbG9iYWwoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBcImkzMlwiLFxuICAgICAgICAgICAgICAgIG11dGFibGU6IHRydWUsXG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIHRoaXMubWVtTWFwW2tleV0gPSB4O1xuICAgICAgICAgICAgcnRuID0gdGhpcy5HT1Rba2V5XSA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ0bjtcbiAgICB9XG4gICAgR09URnVuY0hhbmRsZXIoXywga2V5KSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5HT1QpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0aGlzLkdPVCwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcnRuID0gdGhpcy5HT1Rba2V5XTtcbiAgICAgICAgaWYgKCFydG4pIHtcbiAgICAgICAgICAgIC8vIER5bmFtaWMgbW9kdWxlIG5lZWRzIGEgKnBvaW50ZXIqIHRvIHRoZSBmdW5jdGlvbiB3aXRoIG5hbWUgXCJrZXlcIi5cbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBzZXZlcmFsIHBvc3NpYmlsaXRpZXM6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gMS4gVGhpcyBmdW5jdGlvbiBpcyBhbHJlYWR5IGluIGEgb3VyIGdsb2JhbCBmdW5jdGlvbiB0YWJsZSwgZnJvbVxuICAgICAgICAgICAgLy8gdGhlIG1haW4gbW9kdWxlIG9yIGFub3RoZXIgZHluYW1pYyBsaW5rIGxpYnJhcnkgZGVmaW5pbmcgaXQuIEFuXG4gICAgICAgICAgICAvLyBleGFtcGxlIGlzIHRoZSBmdW5jdGlvbiBzdHJjbXAgZnJvbSBsaWJjLCB3aGljaCBpcyBvZnRlbiB1c2VkIGFzIGEgcG9pbnRlclxuICAgICAgICAgICAgLy8gd2l0aCBxc29ydC4gIEluIHRoYXQgY2FzZSwgd2Uga25vdyB0aGUgcG9pbnRlciBhbmQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHBvaW50ZXIgdG8gdGhhdCB2YWx1ZSAtLSBpdCdzIGltcG9ydGFudFxuICAgICAgICAgICAgLy8gdG8gdXNlIHRoZSAqc2FtZSogcG9pbnRlciBpbiBib3RoIHRoZSBtYWluIG1vZHVsZSBhbmQgdGhlIGR5bmFtaWMgbGlicmFyeSxcbiAgICAgICAgICAgIC8vIHJhdGhlciB0aGFuIG1ha2luZyBhbm90aGVyIG9uZSBqdXN0IGZvciB0aGUgZHluYW1pYyBsaWJyYXJ5ICh3aGljaCB3b3VsZFxuICAgICAgICAgICAgLy8gd2FzdGUgc3BhY2UsIGFuZCBjb21wbGV0ZWx5IGJyZWFrcyBmdW5jdGlvbnMgbGlrZSBxc29ydCB0aGF0IHRha2UgYVxuICAgICAgICAgICAgLy8gZnVuY3Rpb24gcG9pbnRlcikuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gMi4gQW5vdGhlciBsaWtlbHkgcG9zc2liaWxpdHkgaXMgdGhhdCB0aGlzIGlzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGdldCBkZWZpbmVkXG4gICAgICAgICAgICAvLyBhcyBhIHNpZGUgZWZmZWN0IG9mIHRoZSBkeW5hbWljIGxpbmsgbW9kdWxlIGJlaW5nIGxvYWRlZC4gIFdlIGRvbid0IGtub3dcbiAgICAgICAgICAgIC8vIHdoYXQgYWRkcmVzcyB0aGF0IGZ1bmN0aW9uIHdpbGwgZ2V0LCBzbyBpbiB0aGF0IGNhc2Ugd2UgY3JlYXRlIGFuIGVudHJ5XG4gICAgICAgICAgICAvLyBpbiBmdW5jTWFwLCBhbmQgbGF0ZXIgYmVsb3cgd2UgdXBkYXRlIHRoZSBwb2ludGVyIGNyZWF0ZWQgaGVyZS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAzLiBBIHRoaXJkIHBvc3NpYmlsaXR5IGlzIHRoYXQgdGhlIHJlcXVlc3RlZCBmdW5jdGlvbiBpc24ndCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHBvaW50ZXIgdGFibGUgYnV0IGl0J3MgbWFkZSBhdmFpbGFibGUgdmlhIHRoZSBKYXZhc2NyaXB0XG4gICAgICAgICAgICAvLyBlbnZpcm9ubWVudC4gIEFzIGZhciBhcyBJIGtub3csIHRoZXJlIGlzIG5vIHdheSB0byBtYWtlIHN1Y2ggYSBKYXZhc2NyaXB0XG4gICAgICAgICAgICAvLyBmdW5jdGlvbiBhdmFpbGFibGUgYXMgYSBmdW5jdGlvbiBwb2ludGVyIGFzaWRlIGZyb20gY3JlYXRpbmcgYSBuZXcgY29tcGlsZWRcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGluIHdlYiBhc3NlbWJseSB0aGF0IGNhbGxzIHRoYXQgSmF2YXNjcmlwdCBmdW5jdGlvbiwgc28gdGhpcyBpc1xuICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciwgYW5kIHdlIGhhdmUgdG8gbW9kaWZ5IGxpYmMudHMgdG8gbWFrZSBzdWNoIGEgd3JhcHBlci4gIFRoaXNcbiAgICAgICAgICAgIC8vIGhhcHBlbmVkIHdpdGggZ2V0ZXVpZCBhdCBvbmUgcG9pbnQsIHdoaWNoIGNvbWVzIGZyb20gbm9kZS5qcy5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyA0LiBUaGUgZnVuY3Rpb24gbWlnaHQgYmUgZGVmaW5lZCBpbiBhbm90aGVyIGR5bmFtaWMgbGlicmFyeSB0aGF0IGhhc24ndFxuICAgICAgICAgICAgLy8gYmVlbiBsb2FkZWQgeWV0LiAgV2UgaGF2ZSBOT1QgYWRkcmVzc2VkIHRoaXMgcHJvYmxlbSB5ZXQsIGFuZCB0aGlzIG11c3RcbiAgICAgICAgICAgIC8vIGFsc28gYmUgYSBmYXRhbCBlcnJvci5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgICAgICBjb25zdCBmID0gdGhpcy5nZXRNYWluSW5zdGFuY2VFeHBvcnRzKClbYF9fV0FTTV9FWFBPUlRfXyR7a2V5fWBdO1xuICAgICAgICAgICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIG5ldyBmdW5jdGlvbjogIGhhdmUgdG8gZG8gZnVydGhlciB3b3JrIGJlbG93IHRvIGFkZCB0aGlzIHRvIHRhYmxlLlxuICAgICAgICAgICAgICAgIHRoaXMuZnVuY01hcFtrZXldID0gdGhpcy5mdW5jdGlvblRhYmxlLnNldExhdGVyKCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLmZ1bmNNYXBba2V5XS5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGZ1bmN0aW9uIHBlcmhhcHMgZnJvbSBsaWJjLCBlLmcuLCBcInN0cmNtcFwiLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nKFwiR09URnVuY0hhbmRsZXIgXCIsIGtleSwgXCItLT5cIiwgdmFsdWUpO1xuICAgICAgICAgICAgLy8gcGxhY2UgaW4gdGhlIHRhYmxlIC0tIHdlIG1ha2UgYSBub3RlIG9mIHdoZXJlIHRvIHB1dCBpdCxcbiAgICAgICAgICAgIC8vIGFuZCBhY3R1YWxseSBwbGFjZSBpdCBsYXRlciBiZWxvdyBhZnRlciB0aGUgaW1wb3J0IGlzIGRvbmUuXG4gICAgICAgICAgICBjb25zdCBwdHIgPSBuZXcgV2ViQXNzZW1ibHkuR2xvYmFsKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJpMzJcIixcbiAgICAgICAgICAgICAgICBtdXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSwgdmFsdWUpO1xuICAgICAgICAgICAgcnRuID0gdGhpcy5HT1Rba2V5XSA9IHB0cjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnRuO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEdsb2JhbE9mZnNldFRhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2xvYmFsLW9mZnNldC10YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHN0dWJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdHViXCIpKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGZ1bmN0aW9uX3RhYmxlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZnVuY3Rpb24tdGFibGVcIikpO1xuY29uc3QgZGxvcGVuXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZGxvcGVuXCIpKTtcbmNvbnN0IGdsb2JhbF9vZmZzZXRfdGFibGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9nbG9iYWwtb2Zmc2V0LXRhYmxlXCIpKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwiZHlsaW5rXCIpO1xuY29uc3QgbG9nSW1wb3J0ID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJkeWxpbms6aW1wb3J0XCIpO1xuYXN5bmMgZnVuY3Rpb24gaW1wb3J0V2ViQXNzZW1ibHlEbG9wZW4oeyBwYXRoLCBpbXBvcnRPYmplY3QsIGltcG9ydFdlYkFzc2VtYmx5LCBpbXBvcnRXZWJBc3NlbWJseVN5bmMsIHJlYWRGaWxlU3luYywgc3R1YiwgYWxsb3dNYWluRXhwb3J0cywgfSkge1xuICAgIGxldCBtYWluSW5zdGFuY2UgPSBudWxsO1xuICAgIGlmIChpbXBvcnRPYmplY3QgPT0gbnVsbCkge1xuICAgICAgICBpbXBvcnRPYmplY3QgPSB7fTtcbiAgICB9XG4gICAgbGV0IHsgZW52IH0gPSBpbXBvcnRPYmplY3Q7XG4gICAgaWYgKGVudiA9PSBudWxsKSB7XG4gICAgICAgIGVudiA9IGltcG9ydE9iamVjdC5lbnYgPSB7fTtcbiAgICB9XG4gICAgbGV0IHsgbWVtb3J5IH0gPSBlbnY7XG4gICAgaWYgKG1lbW9yeSA9PSBudWxsKSB7XG4gICAgICAgIG1lbW9yeSA9IGVudi5tZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHsgaW5pdGlhbDogMTAgfSk7XG4gICAgfVxuICAgIGxldCB7IF9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUgfSA9IGVudjtcbiAgICBpZiAoX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IE1ha2UgdGhlIDEwMDAgYmlnZ2VyIGlmIHlvdXIgbWFpbiBtb2R1bGUgaGFzIGEgbGFyZ2UgbnVtYmVyIG9mIGZ1bmN0aW9uIHBvaW50ZXJzXG4gICAgICAgIC8vIE1heWJlIHdlIG5lZWQgdG8gcGFyc2UgdGhlIHdhc20gYnVuZGxlIGluIGdlbmVyYWwgKHRoYXQncyB3aGF0IGVtc2NyaXB0ZW4gZG9lcykuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIGlzIG9ubHkgcG90ZW50aWFsbHkgYW4gaXNzdWUgZm9yIHRoZSBtYWluIGNvcmUgV0FTTSBtb2R1bGUsIG5vdCB0aGVcbiAgICAgICAgLy8gZHluYW1pYyBsaWJyYXJpZXMgdGhhdCBnZXQgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgICAgIF9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUgPSBlbnYuX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSA9XG4gICAgICAgICAgICBuZXcgV2ViQXNzZW1ibHkuVGFibGUoeyBpbml0aWFsOiAxNTAwLCBlbGVtZW50OiBcImFueWZ1bmNcIiB9KTtcbiAgICB9XG4gICAgY29uc3QgZnVuY3Rpb25UYWJsZSA9IG5ldyBmdW5jdGlvbl90YWJsZV8xLmRlZmF1bHQoX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSk7XG4gICAgZnVuY3Rpb24gZnVuY3Rpb25WaWFQb2ludGVyKGtleSkge1xuICAgICAgICBpZiAobWFpbkluc3RhbmNlID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47IC8vIG5vdCB5ZXQgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IGYgPSBtYWluSW5zdGFuY2UuZXhwb3J0c1tgX19XQVNNX0VYUE9SVF9fJHtrZXl9YF07XG4gICAgICAgIGlmIChmID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHB0ciA9IGYoKTtcbiAgICAgICAgbG9nKFwiZnVuY3Rpb25WaWFQb2ludGVyXCIsIGtleSwgcHRyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uVGFibGUuZ2V0KHB0cik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEZ1bmN0aW9uKG5hbWUsIHBhdGggPSBcIlwiKSB7XG4gICAgICAgIGxvZyhcImdldEZ1bmN0aW9uXCIsIG5hbWUpO1xuICAgICAgICBsZXQgZiA9IGltcG9ydE9iamVjdD8uZW52Py5bbmFtZV07XG4gICAgICAgIGlmIChmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxvZyhcImdldEZ1bmN0aW9uIFwiLCBuYW1lLCBcImZyb20gZW52XCIpO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH1cbiAgICAgICAgZiA9IGZ1bmN0aW9uVmlhUG9pbnRlcihuYW1lKTtcbiAgICAgICAgaWYgKGYgIT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nKFwiZ2V0RnVuY3Rpb24gXCIsIG5hbWUsIFwiZnJvbSBmdW5jdGlvbiBwb2ludGVyXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgIH1cbiAgICAgICAgZiA9IGRsb3Blbk1hbmFnZXIuZ2V0RnVuY3Rpb24obmFtZSk7XG4gICAgICAgIGlmIChmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxvZyhcImdldEZ1bmN0aW9uIFwiLCBuYW1lLCBcImZyb20gb3RoZXIgbGlicmFyeVwiKTtcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbGxvd01haW5FeHBvcnRzKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgQW55IG90aGVyIHdheSBvZiByZXNvbHZpbmcgYSBmdW5jdGlvbiBuZWVkZWQgaW4gYSBkeW5hbWljIGltcG9ydCB0aGF0IGlzbid0XG4gICAgICAgICAgICBhIGZ1bmN0aW9uIHBvaW50ZXIgaXMgTk9UIGdvaW5nIHRvIHdvcmsgaW4gZ2VuZXJhbDpcbiAgICAgICAgICAgIEl0IHdpbGwgc2VnZmF1bHQgb3IgYmUgMTAwMHggdG9vIHNsb3cuICBFdmVyeSBmdW5jdGlvblxuICAgICAgICAgICAgbmVlZHMgdG8gYmUgdmlhIGEgcG9pbnRlci4gVGhlIGZvbGxvd2luZyBkb2Vzbid0IHdvcmsgKmluIGdlbmVyYWwqLiAgSW4gYWRkaXRpb24gdG9cbiAgICAgICAgICAgIHNwZWVkLCB0aGVyZSBhcmUgQyBmdW5jdGlvbnMgdGhhdCBtYWtlIG5vIHNlbnNlIHRvIGNhbGwgdmlhIFdBU00sXG4gICAgICAgICAgICBzaW5jZSB0aGV5IGhhdmUgc2lnbmF0dXJlcyB0aGF0IGFyZSBtb3JlIGNvbXBsaWNhdGVkIHRoYW4gV0FTTSBzdXBwb3J0cy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBmID0gbWFpbkluc3RhbmNlPy5leHBvcnRzW25hbWVdO1xuICAgICAgICAgICAgaWYgKGYgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxvZyhcImdldEZ1bmN0aW9uIFwiLCBuYW1lLCBcImZyb20gbWFpbkluc3RhbmNlIGV4cG9ydHMgKHBvdGVudGlhbGx5IGRhbmdlcm91cyEpXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vICoqVE9ETzogdGhpcyBpcyBhIHRlbXBvcmFyeSB3aGl0ZWxpc3QgZm9yIHNvbWUgbWFuZ2xlZCBDKysgc3ltYm9scyBpbiB0aGUgbnVtcHkgYnVpbGQqKlxuICAgICAgICBpZiAocGF0aD8uaW5jbHVkZXMoXCJudW1weVwiKSAmJiBuYW1lLnN0YXJ0c1dpdGgoXCJfWlwiKSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldBUk5JTkc6IGNhbGxpbmcgZGFuZ2Vyb3VzIHN0dWIgZm9yIFwiLCBuYW1lKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgYSBkeW5hbWljIGxpYnJhcnkgaW1wb3J0LCBzbyBmYWlsIGF0IHRoaXMgcG9pbnQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHtuYW1lfSAtLSB1bmRlZmluZWQgd2hlbiBpbXBvcnRpbmcgJHtwYXRofWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbXBvcnRPYmplY3RXaXRoUG9zc2libGVTdHViLmVudltuYW1lXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TWFpbkluc3RhbmNlRXhwb3J0cygpIHtcbiAgICAgICAgaWYgKG1haW5JbnN0YW5jZT8uZXhwb3J0cyA9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJidWdcIik7XG4gICAgICAgIHJldHVybiBtYWluSW5zdGFuY2UuZXhwb3J0cztcbiAgICB9XG4gICAgY29uc3QgZ2xvYmFsT2Zmc2V0VGFibGUgPSBuZXcgZ2xvYmFsX29mZnNldF90YWJsZV8xLmRlZmF1bHQoZ2V0TWFpbkluc3RhbmNlRXhwb3J0cywgZnVuY3Rpb25UYWJsZSk7XG4gICAgY29uc3QgZGxvcGVuTWFuYWdlciA9IG5ldyBkbG9wZW5fMS5kZWZhdWx0KGdldEZ1bmN0aW9uLCBtZW1vcnksIGdsb2JhbE9mZnNldFRhYmxlLCBmdW5jdGlvblRhYmxlLCByZWFkRmlsZVN5bmMsIGltcG9ydE9iamVjdCwgaW1wb3J0V2ViQXNzZW1ibHlTeW5jLCBnZXRNYWluSW5zdGFuY2VFeHBvcnRzKTtcbiAgICBkbG9wZW5NYW5hZ2VyLmFkZF9kbG1ldGhvZHMoZW52KTtcbiAgICBjb25zdCBpbXBvcnRPYmplY3RXaXRoUG9zc2libGVTdHViID0gc3R1YlxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLmltcG9ydE9iamVjdCxcbiAgICAgICAgICAgIGVudjogKDAsIHN0dWJfMS5kZWZhdWx0KShpbXBvcnRPYmplY3QuZW52LCBmdW5jdGlvblZpYVBvaW50ZXIsIHN0dWIpLFxuICAgICAgICB9XG4gICAgICAgIDogaW1wb3J0T2JqZWN0O1xuICAgIGxldCB0MCA9IDA7XG4gICAgaWYgKGxvZ0ltcG9ydC5lbmFibGVkKSB7XG4gICAgICAgIHQwID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGxvZ0ltcG9ydChcImltcG9ydGluZyBcIiwgcGF0aCk7XG4gICAgfVxuICAgIG1haW5JbnN0YW5jZSA9XG4gICAgICAgIGltcG9ydFdlYkFzc2VtYmx5ICE9IG51bGxcbiAgICAgICAgICAgID8gYXdhaXQgaW1wb3J0V2ViQXNzZW1ibHkocGF0aCwgaW1wb3J0T2JqZWN0V2l0aFBvc3NpYmxlU3R1YilcbiAgICAgICAgICAgIDogaW1wb3J0V2ViQXNzZW1ibHlTeW5jKHBhdGgsIGltcG9ydE9iamVjdFdpdGhQb3NzaWJsZVN0dWIpO1xuICAgIGlmIChsb2dJbXBvcnQuZW5hYmxlZCkge1xuICAgICAgICBsb2dJbXBvcnQoXCJpbXBvcnRlZCBcIiwgcGF0aCwgXCIsIHRpbWUgPVwiLCBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHQwLCBcIm1zXCIpO1xuICAgIH1cbiAgICBpZiAobWFpbkluc3RhbmNlLmV4cG9ydHMuX193YXNtX2NhbGxfY3RvcnMgIT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBhbHNvICoqTVVTVCoqIGV4cGxpY2l0bHkgY2FsbCB0aGUgV0FTTSBjb25zdHJ1Y3RvcnMuIFRoaXMgaXNcbiAgICAgICAgLy8gYSBsaWJyYXJ5IGZ1bmN0aW9uIHRoYXQgaXMgcGFydCBvZiB0aGUgemlnIGxpYmMgY29kZS4gIFdlIGhhdmVcbiAgICAgICAgLy8gdG8gY2FsbCB0aGlzIGJlY2F1c2UgdGhlIHdhc20gZmlsZSBpcyBidWlsdCB1c2luZyBidWlsZC1saWIsIHNvXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIG1haW4gdGhhdCBkb2VzIHRoaXMuICBUaGlzIGNhbGwgZG9lcyB0aGluZ3MgbGlrZVxuICAgICAgICAvLyBzZXR1cCB0aGUgZmlsZXN5c3RlbSBtYXBwaW5nLiAgICBZZXMsIGl0IHRvb2sgbWUgKipkYXlzKipcbiAgICAgICAgLy8gdG8gZmlndXJlIHRoaXMgb3V0LCBpbmNsdWRpbmcgcmVhZGluZyBhIGxvdCBvZiBhc3NlbWJseSBjb2RlLiA6c2hydWc6XG4gICAgICAgIG1haW5JbnN0YW5jZS5leHBvcnRzLl9fd2FzbV9jYWxsX2N0b3JzKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uVGFibGUudXBkYXRlQWZ0ZXJJbXBvcnQoKTtcbiAgICAvLyBUT0RPXG4gICAgbWFpbkluc3RhbmNlLmVudiA9IGVudjtcbiAgICBtYWluSW5zdGFuY2UuZ2V0RGxvcGVuU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkbG9wZW46IGRsb3Blbk1hbmFnZXIuZ2V0U3RhdGUoKSxcbiAgICAgICAgICAgIGdvdDogZ2xvYmFsT2Zmc2V0VGFibGUuZ2V0U3RhdGUoKSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIG1haW5JbnN0YW5jZS5zZXREbG9wZW5TdGF0ZSA9IChzdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB7IGRsb3BlbiwgZ290IH0gPSBzdGF0ZTtcbiAgICAgICAgZGxvcGVuTWFuYWdlci5zZXRTdGF0ZShkbG9wZW4pO1xuICAgICAgICBnbG9iYWxPZmZzZXRUYWJsZS5zZXRTdGF0ZShnb3QpO1xuICAgIH07XG4gICAgcmV0dXJuIG1haW5JbnN0YW5jZTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGltcG9ydFdlYkFzc2VtYmx5RGxvcGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1wb3J0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NQnRvUGFnZXMgPSB2b2lkIDA7XG5jb25zdCBpbXBvcnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pbXBvcnRcIikpO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW1wb3J0XzEuZGVmYXVsdDtcbnZhciB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTUJ0b1BhZ2VzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsXzEuTUJ0b1BhZ2VzOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuVGhpcyBpcyBpbnNwaXJlZCBieSBlbXNjcmlwdGVuJ3MgTUlULWxpY2Vuc2VkIHNyYy9saWJyYXJ5X2R5bGluay5qcy5cbiovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBnZXRNZXRhZGF0YShiaW5hcnkpIHtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgZW5kID0gMDtcbiAgICBmdW5jdGlvbiBnZXRVOCgpIHtcbiAgICAgICAgcmV0dXJuIGJpbmFyeVtvZmZzZXQrK107XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExFQigpIHtcbiAgICAgICAgbGV0IHJldCA9IDA7XG4gICAgICAgIGxldCBtdWwgPSAxO1xuICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgY29uc3QgYnl0ZSA9IGJpbmFyeVtvZmZzZXQrK107XG4gICAgICAgICAgICByZXQgKz0gKGJ5dGUgJiAweDdmKSAqIG11bDtcbiAgICAgICAgICAgIG11bCAqPSAweDgwO1xuICAgICAgICAgICAgaWYgKCEoYnl0ZSAmIDB4ODApKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN0cmluZygpIHtcbiAgICAgICAgY29uc3QgbGVuID0gZ2V0TEVCKCk7XG4gICAgICAgIG9mZnNldCArPSBsZW47XG4gICAgICAgIHJldHVybiBVVEY4QXJyYXlUb1N0cmluZyhiaW5hcnksIG9mZnNldCAtIGxlbiwgbGVuKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmFpbElmKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoY29uZGl0aW9uKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBsZXQgbmFtZSA9IFwiZHlsaW5rLjBcIjtcbiAgICBjb25zdCBpbnQzMlZpZXcgPSBuZXcgVWludDMyQXJyYXkobmV3IFVpbnQ4QXJyYXkoYmluYXJ5LnN1YmFycmF5KDAsIDI0KSkuYnVmZmVyKTtcbiAgICBjb25zdCBtYWdpY051bWJlckZvdW5kID0gaW50MzJWaWV3WzBdID09IDB4NmQ3MzYxMDA7XG4gICAgZmFpbElmKCFtYWdpY051bWJlckZvdW5kLCBcIm5lZWQgdG8gc2VlIHdhc20gbWFnaWMgbnVtYmVyXCIpOyAvLyBcXDBhc21cbiAgICAvLyB3ZSBzaG91bGQgc2VlIHRoZSBkeWxpbmsgY3VzdG9tIHNlY3Rpb24gcmlnaHQgYWZ0ZXIgdGhlIG1hZ2ljIG51bWJlciBhbmQgd2FzbSB2ZXJzaW9uXG4gICAgZmFpbElmKGJpbmFyeVs4XSAhPT0gMCwgXCJuZWVkIHRoZSBkeWxpbmsgc2VjdGlvbiB0byBiZSBmaXJzdFwiKTtcbiAgICBvZmZzZXQgPSA5O1xuICAgIGNvbnN0IHNlY3Rpb25fc2l6ZSA9IGdldExFQigpOyAvL3NlY3Rpb24gc2l6ZVxuICAgIGVuZCA9IG9mZnNldCArIHNlY3Rpb25fc2l6ZTtcbiAgICBuYW1lID0gZ2V0U3RyaW5nKCk7XG4gICAgY29uc3QgY3VzdG9tU2VjdGlvbiA9IHtcbiAgICAgICAgbmVlZGVkRHlubGliczogW10sXG4gICAgICAgIHRsc0V4cG9ydHM6IG5ldyBTZXQoKSxcbiAgICAgICAgd2Vha0ltcG9ydHM6IG5ldyBTZXQoKSxcbiAgICB9O1xuICAgIGlmIChjdXN0b21TZWN0aW9uLm5lZWRlZER5bmxpYnMgPT0gbnVsbClcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJidWc6IHR5cGVzY3JpcHRcIik7XG4gICAgaWYgKGN1c3RvbVNlY3Rpb24udGxzRXhwb3J0cyA9PSBudWxsKVxuICAgICAgICB0aHJvdyBFcnJvcihcImJ1ZzogdHlwZXNjcmlwdFwiKTtcbiAgICBpZiAoY3VzdG9tU2VjdGlvbi53ZWFrSW1wb3J0cyA9PSBudWxsKVxuICAgICAgICB0aHJvdyBFcnJvcihcImJ1ZzogdHlwZXNjcmlwdFwiKTtcbiAgICBpZiAobmFtZSA9PSBcImR5bGlua1wiKSB7XG4gICAgICAgIGN1c3RvbVNlY3Rpb24ubWVtb3J5U2l6ZSA9IGdldExFQigpO1xuICAgICAgICBjdXN0b21TZWN0aW9uLm1lbW9yeUFsaWduID0gZ2V0TEVCKCk7XG4gICAgICAgIGN1c3RvbVNlY3Rpb24udGFibGVTaXplID0gZ2V0TEVCKCk7XG4gICAgICAgIGN1c3RvbVNlY3Rpb24udGFibGVBbGlnbiA9IGdldExFQigpO1xuICAgICAgICAvLyBzaGFyZWQgbGlicmFyaWVzIHRoaXMgbW9kdWxlIG5lZWRzLiBXZSBuZWVkIHRvIGxvYWQgdGhlbSBmaXJzdCwgc28gdGhhdFxuICAgICAgICAvLyBjdXJyZW50IG1vZHVsZSBjb3VsZCByZXNvbHZlIGl0cyBpbXBvcnRzLiAoc2VlIHRvb2xzL3NoYXJlZC5weVxuICAgICAgICAvLyBXZWJBc3NlbWJseS5tYWtlX3NoYXJlZF9saWJyYXJ5KCkgZm9yIFwiZHlsaW5rXCIgc2VjdGlvbiBleHRlbnNpb24gZm9ybWF0KVxuICAgICAgICBsZXQgbmVlZGVkRHlubGlic0NvdW50ID0gZ2V0TEVCKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZGVkRHlubGlic0NvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpYm5hbWUgPSBnZXRTdHJpbmcoKTtcbiAgICAgICAgICAgIGN1c3RvbVNlY3Rpb24ubmVlZGVkRHlubGlicy5wdXNoKGxpYm5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmYWlsSWYobmFtZSAhPT0gXCJkeWxpbmsuMFwiLCBcImludmFsaWQgZm9ybWF0IC0tIG5hbWUgbXVzdCBiZSBkeWxpbmsuMCBvciBkeWxpbmtcIik7XG4gICAgICAgIGNvbnN0IFdBU01fRFlMSU5LX01FTV9JTkZPID0gMHgxO1xuICAgICAgICBjb25zdCBXQVNNX0RZTElOS19ORUVERUQgPSAweDI7XG4gICAgICAgIGNvbnN0IFdBU01fRFlMSU5LX0VYUE9SVF9JTkZPID0gMHgzO1xuICAgICAgICBjb25zdCBXQVNNX0RZTElOS19JTVBPUlRfSU5GTyA9IDB4NDtcbiAgICAgICAgY29uc3QgV0FTTV9TWU1CT0xfVExTID0gMHgxMDA7XG4gICAgICAgIGNvbnN0IFdBU01fU1lNQk9MX0JJTkRJTkdfTUFTSyA9IDB4MztcbiAgICAgICAgY29uc3QgV0FTTV9TWU1CT0xfQklORElOR19XRUFLID0gMHgxO1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzZWN0aW9uVHlwZSA9IGdldFU4KCk7XG4gICAgICAgICAgICBjb25zdCBzdWJzZWN0aW9uU2l6ZSA9IGdldExFQigpO1xuICAgICAgICAgICAgaWYgKHN1YnNlY3Rpb25UeXBlID09PSBXQVNNX0RZTElOS19NRU1fSU5GTykge1xuICAgICAgICAgICAgICAgIGN1c3RvbVNlY3Rpb24ubWVtb3J5U2l6ZSA9IGdldExFQigpO1xuICAgICAgICAgICAgICAgIGN1c3RvbVNlY3Rpb24ubWVtb3J5QWxpZ24gPSBnZXRMRUIoKTtcbiAgICAgICAgICAgICAgICBjdXN0b21TZWN0aW9uLnRhYmxlU2l6ZSA9IGdldExFQigpO1xuICAgICAgICAgICAgICAgIGN1c3RvbVNlY3Rpb24udGFibGVBbGlnbiA9IGdldExFQigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3Vic2VjdGlvblR5cGUgPT09IFdBU01fRFlMSU5LX05FRURFRCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5lZWRlZER5bmxpYnNDb3VudCA9IGdldExFQigpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZGVkRHlubGlic0NvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlibmFtZSA9IGdldFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21TZWN0aW9uLm5lZWRlZER5bmxpYnMucHVzaChsaWJuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdWJzZWN0aW9uVHlwZSA9PT0gV0FTTV9EWUxJTktfRVhQT1JUX0lORk8pIHtcbiAgICAgICAgICAgICAgICBsZXQgY291bnQgPSBnZXRMRUIoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzeW1uYW1lID0gZ2V0U3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsYWdzID0gZ2V0TEVCKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIFdBU01fU1lNQk9MX1RMUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tU2VjdGlvbi50bHNFeHBvcnRzLmFkZChzeW1uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN1YnNlY3Rpb25UeXBlID09PSBXQVNNX0RZTElOS19JTVBPUlRfSU5GTykge1xuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IGdldExFQigpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFN0cmluZygpOyAvLyAgbW9kdWxlIG5hbWUgLS0gbm90IHVzZWQsIGJ1dCBoYXZlIHRvIHJlYWQgdG8gZ2V0IG9mZnNldCByaWdodC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ltbmFtZSA9IGdldFN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGFncyA9IGdldExFQigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGZsYWdzICYgV0FTTV9TWU1CT0xfQklORElOR19NQVNLKSA9PSBXQVNNX1NZTUJPTF9CSU5ESU5HX1dFQUspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbVNlY3Rpb24ud2Vha0ltcG9ydHMuYWRkKHN5bW5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdW5rbm93biBzdWJzZWN0aW9uXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHN1YnNlY3Rpb25TaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXN0b21TZWN0aW9uO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0TWV0YWRhdGE7XG4vLyBHaXZlbiBhIHBvaW50ZXIgJ3B0cicgdG8gYSBudWxsLXRlcm1pbmF0ZWQgVVRGOC1lbmNvZGVkIHN0cmluZyBpbiB0aGUgZ2l2ZW4gYXJyYXlcbi8vIHRoYXQgY29udGFpbnMgdWludDggdmFsdWVzLCByZXR1cm5zIGEgY29weSBvZiB0aGF0IHN0cmluZyBhcyBhIEphdmFzY3JpcHRcbi8vIHN0cmluZyBvYmplY3QuXG5jb25zdCBVVEY4RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuZnVuY3Rpb24gVVRGOEFycmF5VG9TdHJpbmcoYmluYXJ5LCBwdHIsIG1heEJ5dGVzVG9SZWFkKSB7XG4gICAgY29uc3QgZW5kSWR4ID0gcHRyICsgbWF4Qnl0ZXNUb1JlYWQ7XG4gICAgbGV0IGVuZFB0ciA9IHB0cjtcbiAgICB3aGlsZSAoYmluYXJ5W2VuZFB0cl0gJiYgZW5kUHRyIDwgZW5kSWR4KSB7XG4gICAgICAgIGVuZFB0cisrO1xuICAgIH1cbiAgICBjb25zdCBzbGljZSA9IGJpbmFyeS5zbGljZShwdHIsIGVuZFB0cik7XG4gICAgcmV0dXJuIFVURjhEZWNvZGVyLmRlY29kZShzbGljZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwic3R1YlwiKTtcbmNvbnN0IGxvZ1VzZSA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwic3R1Yjp1c2VcIik7IC8vIGxvZyBhbGwgdXNlIG9mIHRoZSBzdHViXG5jb25zdCBsb2dGaXJzdCA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwic3R1YjpmaXJzdFwiKTsgLy8gbG9nIGZpcnN0IHVzZSBvZiB0aGUgc3R1YlxuZnVuY3Rpb24gc3R1YlByb3h5KGVudiwgZnVuY3Rpb25WaWFQb2ludGVyLCB0eXBlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm94eShlbnYsIHtcbiAgICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmID0gZnVuY3Rpb25WaWFQb2ludGVyKGtleSk7XG4gICAgICAgICAgICBpZiAoZiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9nKFwidXNpbmcgZnVuY3Rpb24gdmlhIHBvaW50ZXIgZm9yIFwiLCBrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gXCJ3YXJuXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFxcbiogV0FSTklORzogY3JlYXRpbmcgVU5TQUZFIHN0dWIgZm9yICR7U3RyaW5nKGtleSl9LiAgUGxlYXNlIGZpeCBBU0FQIWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvZ1VzZS5lbmFibGVkIHx8IGxvZ0ZpcnN0LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nU3R1YlVzZShrZXksIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmFzdGVyIHRvIG5vdCB0cmFjZSBvciBldmVuIGNoZWNrLCBvYnZpb3VzbHkuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBzdHViUHJveHk7XG5jb25zdCBzdHViVXNlZCA9IG5ldyBTZXQoW10pO1xuZnVuY3Rpb24gbG9nU3R1YlVzZShmdW5jdGlvbk5hbWUsIGFyZ3MpIHtcbiAgICBsb2dVc2UoXCJXQVJOSU5HOiB1c2luZyBzdHViXCIsIGZ1bmN0aW9uTmFtZSwgYXJncyk7XG4gICAgaWYgKGxvZ0ZpcnN0LmVuYWJsZWQpIHtcbiAgICAgICAgaWYgKHN0dWJVc2VkLmhhcyhmdW5jdGlvbk5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdHViVXNlZC5hZGQoZnVuY3Rpb25OYW1lKTtcbiAgICB9XG4gICAgbG9nRmlyc3QoXCJXQVJOSU5HOiBmaXJzdCB1c2Ugb2Ygc3R1YlwiLCBmdW5jdGlvbk5hbWUsIGFyZ3MpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R1Yi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vaW1wb3J0IGRlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuLy9jb25zdCBsb2cgPSBkZWJ1ZyhcImR5bGluazp1dGlsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NQnRvUGFnZXMgPSBleHBvcnRzLmFsaWduTWVtb3J5ID0gZXhwb3J0cy5zdHJsZW4gPSBleHBvcnRzLnNlbmRTdHJpbmcgPSBleHBvcnRzLnJlY3ZTdHJpbmcgPSBleHBvcnRzLm5vbnplcm9Qb3NpdGlvbnMgPSB2b2lkIDA7XG5mdW5jdGlvbiBub256ZXJvUG9zaXRpb25zKHRhYmxlKSB7XG4gICAgY29uc3QgdiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRhYmxlLmdldChpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2LnB1c2goaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHY7XG59XG5leHBvcnRzLm5vbnplcm9Qb3NpdGlvbnMgPSBub256ZXJvUG9zaXRpb25zO1xuY29uc3QgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTsgLy8gdXRmLThcbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmZ1bmN0aW9uIHJlY3ZTdHJpbmcoY2hhclB0ciwgbWVtb3J5KSB7XG4gICAgY29uc3QgbGVuID0gc3RybGVuKGNoYXJQdHIsIG1lbW9yeSk7XG4gICAgY29uc3Qgc2xpY2UgPSBtZW1vcnkuYnVmZmVyLnNsaWNlKGNoYXJQdHIsIGNoYXJQdHIgKyBsZW4pO1xuICAgIHJldHVybiB0ZXh0RGVjb2Rlci5kZWNvZGUoc2xpY2UpO1xufVxuZXhwb3J0cy5yZWN2U3RyaW5nID0gcmVjdlN0cmluZztcbi8vIGVuY29kZSBhcyB1dGY4IGFuZCBjb3B5IHN0cmluZyBpbnRvIHByZS1hbGxvY2F0ZWQgbWVtb3J5IGJ1ZmZlciBhcyBudWxsIHRlcm1pbmF0ZWQuXG5mdW5jdGlvbiBzZW5kU3RyaW5nKHN0ciwgY2hhclB0ciwgLy8gcHJlLWFsbG9jYXRlZCBtZW1vcnkgaW4gd2hpY2ggdG8gcHV0IHN0cjsgaXQgYmV0dGVyIGJlIGJpZyBlbm91Z2guXG5tZW1vcnkpIHtcbiAgICBjb25zdCBzdHJBc0FycmF5ID0gZW5jb2Rlci5lbmNvZGUoc3RyKTtcbiAgICBjb25zdCBsZW4gPSBzdHJBc0FycmF5Lmxlbmd0aCArIDE7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgSW50OEFycmF5KG1lbW9yeS5idWZmZXIsIGNoYXJQdHIsIGxlbik7XG4gICAgYXJyYXkuc2V0KHN0ckFzQXJyYXkpO1xuICAgIGFycmF5W2xlbiAtIDFdID0gMDtcbn1cbmV4cG9ydHMuc2VuZFN0cmluZyA9IHNlbmRTdHJpbmc7XG5mdW5jdGlvbiBzdHJsZW4oY2hhclB0ciwgbWVtb3J5KSB7XG4gICAgY29uc3QgbWVtID0gbmV3IFVpbnQ4QXJyYXkobWVtb3J5LmJ1ZmZlcik7XG4gICAgbGV0IGkgPSBjaGFyUHRyO1xuICAgIHdoaWxlIChtZW1baV0pIHtcbiAgICAgICAgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaSAtIGNoYXJQdHI7XG59XG5leHBvcnRzLnN0cmxlbiA9IHN0cmxlbjtcbmZ1bmN0aW9uIGFsaWduTWVtb3J5KHNpemUsIGFsaWdubWVudCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwoc2l6ZSAvIGFsaWdubWVudCkgKiBhbGlnbm1lbnQ7XG59XG5leHBvcnRzLmFsaWduTWVtb3J5ID0gYWxpZ25NZW1vcnk7XG5mdW5jdGlvbiBNQnRvUGFnZXMoTUIpIHtcbiAgICAvLyBcIk5vdGU6IEEgV2ViQXNzZW1ibHkgcGFnZSBoYXMgYSBjb25zdGFudCBzaXplIG9mIDY1LDUzNiBieXRlcywgaS5lLiwgNjRLaUIuXCIgZnJvbVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1dlYkFzc2VtYmx5L01lbW9yeS9NZW1vcnlcbiAgICAvLyBUaGVyZSdzIHRodXMgMTAyNS82NCA9IDE2IHBhZ2VzIGluIGEgTUIuXG4gICAgcmV0dXJuIE1CICogMTY7XG59XG5leHBvcnRzLk1CdG9QYWdlcyA9IE1CdG9QYWdlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmluaXRDb25zdGFudHMgPSB2b2lkIDA7XG4vLyBUaGVzZSBhcmUgcHVyZWx5IGZvciB0eXBlc2NyaXB0LCBhbmQgSSBjYW4gb25seSB1cGRhdGUgdGhpcyAod2hlbiB0aGUgemlnIGNvZGUgY2hhbmdlcylcbi8vIGJ5IGp1c3QgcHJpbnRpbmcgb3V0IHRoZSBjb25zdGFudHMgYXQgcnVudGltZS5cbmNvbnN0IENPTlNUQU5UUyA9IFtcbiAgICBcIkFUX0ZEQ1dEXCIsXG4gICAgXCJFMkJJR1wiLFxuICAgIFwiRUFDQ0VTXCIsXG4gICAgXCJFQkFERlwiLFxuICAgIFwiRUJVU1lcIixcbiAgICBcIkVDSElMRFwiLFxuICAgIFwiRURFQURMS1wiLFxuICAgIFwiRUVYSVNUXCIsXG4gICAgXCJFRkFVTFRcIixcbiAgICBcIkVGQklHXCIsXG4gICAgXCJFSU5UUlwiLFxuICAgIFwiRUlOVkFMXCIsXG4gICAgXCJFSU9cIixcbiAgICBcIkVJU0RJUlwiLFxuICAgIFwiRU1GSUxFXCIsXG4gICAgXCJFTUxJTktcIixcbiAgICBcIkVORklMRVwiLFxuICAgIFwiRU5PREVWXCIsXG4gICAgXCJFTk9FTlRcIixcbiAgICBcIkVOT0VYRUNcIixcbiAgICBcIkVOT01FTVwiLFxuICAgIFwiRU5PU1BDXCIsXG4gICAgXCJFTk9URElSXCIsXG4gICAgXCJFTk9UVFlcIixcbiAgICBcIkVOWElPXCIsXG4gICAgXCJFUEVSTVwiLFxuICAgIFwiRVBJUEVcIixcbiAgICBcIkVST0ZTXCIsXG4gICAgXCJFU1BJUEVcIixcbiAgICBcIkVTUkNIXCIsXG4gICAgXCJFVFhUQlNZXCIsXG4gICAgXCJFWERFVlwiLFxuICAgIFwiU0lHX0JMT0NLXCIsXG4gICAgXCJTSUdfVU5CTE9DS1wiLFxuICAgIFwiU0lHX1NFVE1BU0tcIixcbiAgICBcIkFGX0lORVRcIixcbiAgICBcIkFGX0lORVQ2XCIsXG4gICAgXCJGX1VMT0NLXCIsXG4gICAgXCJGX0xPQ0tcIixcbiAgICBcIkZfVExPQ0tcIixcbiAgICBcIkZfVEVTVFwiLFxuICAgIFwiSUZOQU1TSVpcIixcbiAgICBcIkVOT1RTVVBcIixcbiAgICBcIldOT0hBTkdcIixcbiAgICBcIldVTlRSQUNFRFwiLFxuXTtcbmNvbnN0IGNvbnN0YW50cyA9IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gY29uc3RhbnRzO1xuZnVuY3Rpb24gcmVjdkpzb25PYmplY3QoeyBjYWxsRnVuY3Rpb24sIHJlY3YgfSwgbmFtZSkge1xuICAgIGxldCBwdHIgPSBjYWxsRnVuY3Rpb24obmFtZSk7XG4gICAgaWYgKHB0ciA9PSAwKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwidW5hYmxlIHRvIHJlY2VpdmUgSlNPTiBvYmplY3RcIik7XG4gICAgfVxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlY3Yuc3RyaW5nKHB0cikpO1xufVxuZnVuY3Rpb24gaW5pdENvbnN0YW50cyhjb250ZXh0KSB7XG4gICAgY29uc3QgeyBuYW1lcywgdmFsdWVzIH0gPSByZWN2SnNvbk9iamVjdChjb250ZXh0LCBcImdldENvbnN0YW50c1wiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0YW50c1tuYW1lc1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGNvbnN0YW50cyk7XG59XG5leHBvcnRzLmluaXRDb25zdGFudHMgPSBpbml0Q29uc3RhbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcblxuU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Vwb2xsXG5cblRoaXMgaXMgYSBzdHViIGltcGxlbWVudGF0aW9uIG9mIGVwb2xsIHRoYXQgZG9lc24ndCBkbyBhbnl0aGluZyBpbiB0ZXJtc1xub2YgYWN0dWFsbHkgZGV0ZWN0aW5nIGZpbGUgY2hhbmdlcywgYnV0IGFsc28gYXBwZWFycyBub3QgYnJva2VuIHRvIHRoZSB1c2VyLlxuSXQncyB2ZXJ5IHJlYXNvbmFibGUgdGhhdCB3ZSBjb3VsZCBpbXBsZW1lbnQgYSByZWFsIHZlcnNpb24gb2YgZXBvbGwuXG5Gb3IgbGludXggaXQgY291bGQganVzdCBiZSBhIGxpZ2h0d2VpZ2h0IHdyYXBwZXIgYXJvdW5kIHJlYWwgZXBvbGwsIGFuZCBmb3Jcbm90aGVyIGVudmlyb25tZW50cywgc29tZXRoaW5nIGVsc2UgZGVwZW5kaW5nIG9uIGNvbnN0cmFpbnRzLlxuXG5UaGlzIGlzIHVzZWQgYnkgdGhlIHRhaWwgY29yZXV0aWxzIGNvbW1hbmQgdG8gd2F0Y2ggYSBmaWxlLi4uXG4qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZXBvbGwoeyBzbGVlcCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gaW50IGVwb2xsX2NyZWF0ZShpbnQgZmxhZ3MpO1xuICAgICAgICBlcG9sbF9jcmVhdGU6IChfc2l6ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBlcG9sbF9jcmVhdGUxKGludCBmbGFncyk7XG4gICAgICAgIGVwb2xsX2NyZWF0ZTE6IChfZmxhZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgZXBvbGxfY3RsKGludCBlcGZkLCBpbnQgb3AsIGludCBmZCwgc3RydWN0IGVwb2xsX2V2ZW50ICpldmVudCk7XG4gICAgICAgIGVwb2xsX2N0bDogKF9lcGZkLCBfb3AsIF9mZCwgX2Vwb2xsX2V2ZW50X3B0cikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBlcG9sbF93YWl0KGludCBlcGZkLCBzdHJ1Y3QgZXBvbGxfZXZlbnQgKmV2ZW50cywgaW50IG1heGV2ZW50cywgaW50IHRpbWVvdXQpO1xuICAgICAgICBlcG9sbF93YWl0OiAoX2VwZmQsIF9lcG9sbF9ldmVudF9wdHIsIF9tYXhldmVudHMsIHRpbWVvdXQpID0+IHtcbiAgICAgICAgICAgIC8vIGlmIGJsb2NraW5nIHNsZWVwIGlzIGF2YWlsYWJsZSwgd2Ugd2FpdCB0aW1lb3V0ICptaWxsaXNlY29uZHMqLCB0aGVuIHJldHVybiAwXG4gICAgICAgICAgICBzbGVlcD8uKHRpbWVvdXQpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGVwb2xsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXBvbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5hdGl2ZVRvV2FzbSA9IHZvaWQgMDtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5mdW5jdGlvbiBFcnJubyhlcnJvcikge1xuICAgIGNvbnN0IGVycm5vID0gY29uc3RhbnRzXzEuZGVmYXVsdFtlcnJvcl07XG4gICAgY29uc3QgZXJyID0gRXJyb3IoYEVycm9yICR7ZXJyb3J9ICAoZXJybm89JHtlcnJub30pLmApO1xuICAgIGVyci53YXNpRXJybm8gPSBlcnJubztcbiAgICByZXR1cm4gZXJyO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXJybm87XG4vLyBSZXR1cm4gbWFwIGZyb20gc3RhbmRhcmQgbmF0aXZlIGVycm9yIGNvZGVzIHRvXG4vLyBXQVNNIGVycm9yIGNvZGVzLiAgVGhlc2UgY2FuIGJlICp2ZXJ5KiBkaWZmZXJlbnRcbi8vIGFuZCBoYXZlIHRvIGJlIHRyYW5zbGF0ZWQuXG5mdW5jdGlvbiBuYXRpdmVUb1dhc20ocG9zaXgpIHtcbiAgICAvLyBETyAqKk5PVCoqIGFkZCBhbnl0aGluZyBtb3JlIHRvIHRoaXMsIGUuZy4sIEVOT1RTVVAsIHNpbmNlIHdlIGFyZSBtYWtpbmdcbiAgICAvLyBhIG1hcHBpbmcgYmFjayBhbmQgZm9ydGggdXNpZyBpdCwgYW5kIGFueSBvdmVybGFwcyB3aWxsIGxlYWQgdG8gc3VidGxlIGVycm9ycyFcbiAgICBjb25zdCBuYW1lcyA9IFtcbiAgICAgICAgXCJFMkJJR1wiLFxuICAgICAgICBcIkVBQ0NFU1wiLFxuICAgICAgICBcIkVCQURGXCIsXG4gICAgICAgIFwiRUJVU1lcIixcbiAgICAgICAgXCJFQ0hJTERcIixcbiAgICAgICAgXCJFREVBRExLXCIsXG4gICAgICAgIFwiRUVYSVNUXCIsXG4gICAgICAgIFwiRUZBVUxUXCIsXG4gICAgICAgIFwiRUZCSUdcIixcbiAgICAgICAgXCJFSU5UUlwiLFxuICAgICAgICBcIkVJTlZBTFwiLFxuICAgICAgICBcIkVJT1wiLFxuICAgICAgICBcIkVJU0RJUlwiLFxuICAgICAgICBcIkVNRklMRVwiLFxuICAgICAgICBcIkVNTElOS1wiLFxuICAgICAgICBcIkVORklMRVwiLFxuICAgICAgICBcIkVOT0RFVlwiLFxuICAgICAgICBcIkVOT0VOVFwiLFxuICAgICAgICBcIkVOT0VYRUNcIixcbiAgICAgICAgXCJFTk9NRU1cIixcbiAgICAgICAgXCJFTk9TUENcIixcbiAgICAgICAgXCJFTk9URElSXCIsXG4gICAgICAgIFwiRU5PVFRZXCIsXG4gICAgICAgIFwiRU5YSU9cIixcbiAgICAgICAgXCJFUEVSTVwiLFxuICAgICAgICBcIkVQSVBFXCIsXG4gICAgICAgIFwiRVJPRlNcIixcbiAgICAgICAgXCJFU1BJUEVcIixcbiAgICAgICAgXCJFU1JDSFwiLFxuICAgICAgICBcIkVUWFRCU1lcIixcbiAgICAgICAgXCJFWERFVlwiLFxuICAgIF07XG4gICAgY29uc3QgbWFwID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgIGNvbnN0IGVOYXRpdmUgPSBwb3NpeC5jb25zdGFudHM/LltuYW1lXTtcbiAgICAgICAgaWYgKCFlTmF0aXZlKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgcG9zaXggY29uc3RhbnQgJHtuYW1lfSBub3Qga25vd25gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlV2FzbSA9IGNvbnN0YW50c18xLmRlZmF1bHRbbmFtZV07XG4gICAgICAgIGlmICghZVdhc20pIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGB3YXNtIGNvbnN0YW50ICR7bmFtZX0gbm90IGtub3duYCk7XG4gICAgICAgIH1cbiAgICAgICAgbWFwW2VOYXRpdmVdID0gZVdhc207XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG5leHBvcnRzLm5hdGl2ZVRvV2FzbSA9IG5hdGl2ZVRvV2FzbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm5vLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcblRPRE86IHJlZmFjdG9yIC0tIHNvbWUgb2YgdGhpcyBjb2RlIHdpbGwgZ28gaW4gYSBuZXcgcHl0aG9uLXdhc20gbW9kdWxlP1xuXG5leHRlcm4gaW50IHB5dGhvbl93YXNtX2ZvcmtfZXhlYyhcbiAgICAgICAgICAgICBjaGFyICpjb25zdCBleGVjX2FycmF5W10sXG4gICAgICAgICAgICAgY2hhciAqY29uc3QgYXJndltdLFxuICAgICAgICAgICAgIGNoYXIgKmNvbnN0IGVudnBbXSxcbiAgICAgICAgICAgICBjb25zdCBjaGFyICpjd2QsXG4gICAgICAgICAgICAgaW50IHAyY3JlYWQsIGludCBwMmN3cml0ZSxcbiAgICAgICAgICAgICBpbnQgYzJwcmVhZCwgaW50IGMycHdyaXRlLFxuICAgICAgICAgICAgIGludCBlcnJyZWFkLCBpbnQgZXJyd3JpdGUsXG4gICAgICAgICAgICAgaW50IGVycnBpcGVfcmVhZCwgaW50IGVycnBpcGVfd3JpdGUsXG4gICAgICAgICAgICAgaW50IGNsb3NlX2ZkcywgaW50IHJlc3RvcmVfc2lnbmFscyxcbiAgICAgICAgICAgICBpbnQgY2FsbF9zZXRzaWQsIHBpZF90IHBnaWRfdG9fc2V0LFxuICAgICAgICAgICAgIGludCBjYWxsX3NldGdpZCwgZ2lkX3QgZ2lkLFxuICAgICAgICAgICAgIGludCBjYWxsX3NldGdyb3Vwcywgc2l6ZV90IGdyb3Vwc19zaXplLCBjb25zdCBnaWRfdCAqZ3JvdXBzLFxuICAgICAgICAgICAgIGludCBjYWxsX3NldHVpZCwgdWlkX3QgdWlkLFxuICAgICAgICAgICAgIGludCBjaGlsZF91bWFzayxcbiAgICAgICAgICAgICBjb25zdCB2b2lkICpjaGlsZF9zaWdtYXNrLFxuICAgICAgICAgICAgIGludCAqcHlfZmRzX3RvX2tlZXAgLy8gbnVsbCBvciBhIG51bGwgdGVybWluYXRlZCBpbnRbXVxuICAgICAgICAgICAgICk7XG5cblxuKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGVycm5vXzEgPSByZXF1aXJlKFwiLi9lcnJub1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwicG9zaXg6Zm9yay1leGVjXCIpO1xuY29uc3QgV0FTTSA9IEJ1ZmZlci5mcm9tKFwiXFwwYXNtXCIpO1xuZnVuY3Rpb24gZm9ya19leGVjKHsgcG9zaXgsIHJlY3YsIHdhc2ksIHJ1biwgZnMsIGNoaWxkX3Byb2Nlc3MsIH0pIHtcbiAgICBmdW5jdGlvbiBpc1dhc20oZmlsZW5hbWUpIHtcbiAgICAgICAgY29uc3QgZmQgPSBmcy5vcGVuU3luYyhmaWxlbmFtZSwgXCJyXCIpO1xuICAgICAgICBjb25zdCBiID0gQnVmZmVyLmFsbG9jKDQpO1xuICAgICAgICBmcy5yZWFkU3luYyhmZCwgYiwgMCwgNCwgMCk7XG4gICAgICAgIHJldHVybiBXQVNNLmVxdWFscyhiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcnVuTmF0aXZlKGFyZ3YpIHtcbiAgICAgICAgaWYgKGNoaWxkX3Byb2Nlc3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFUlJPUjogUnVubmluZyBuYXRpdmUgY29tbWFuZHMgbm90IHlldCBpbXBsZW1lbnRlZCBpbiB0aGlzIGVudmlyb25tZW50LlwiKTtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjaGlsZF9wcm9jZXNzLmV4ZWNGaWxlU3luYyhhcmd2WzBdLCBhcmd2LnNsaWNlKDEpLCB7XG4gICAgICAgICAgICAgICAgc3RkaW86IFwiaW5oZXJpdFwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyLnN0YXR1cztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFsX2ZkKHZpcnR1YWxfZmQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHdhc2kuRkRfTUFQLmdldCh2aXJ0dWFsX2ZkKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLnJlYWw7XG4gICAgfVxuICAgIC8vIG1hcCBmcm9tIHdhc2kgbnVtYmVyIHRvIHJlYWwgZmQgbnVtYmVyLCBmb3IgZWFjaCBpbmhlcml0YWJsZSBmaWxlIGRlc2NyaXB0b3JcbiAgICBmdW5jdGlvbiBnZXRJbmhlcml0YWJsZURlc2NyaXB0b3JzTWFwKCkge1xuICAgICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB3YXNpX2ZkIG9mIHdhc2kuRkRfTUFQLmtleXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHdhc2kuRkRfTUFQLmdldCh3YXNpX2ZkKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2l4LmlzX2luaGVyaXRhYmxlKGRhdGEucmVhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwW3dhc2lfZmRdID0gZGF0YS5yZWFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBsb2coXCJnZXRJbmhlcml0YWJsZURlc2NyaXB0b3JzTWFwXCIsIGRhdGEucmVhbCwgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBXZSBoYXZlIHRvIGltcGxlbWVudCB0aGlzIHNpbmNlIGZjbnRsIC0tIHdoaWNoIHB5dGhvbiBsaWJyYXJ5IGNhbGxzIC0tIGlzIHRvb1xuICAgICAgICAvLyBtdWNoIG9mIGEgbm8tb3AuICBUaGlzIGlzIG5lZWRlZCBmb3Igc3VicHJvY2VzcyBzdXBwb3J0IG9ubHksIG9mIGNvdXJzZS5cbiAgICAgICAgLy8gVGhpcyBjYW4gT05MWSB3b3JrIG9uIGFjdHVhbCBmZCBpbiB0aGUgbm9kZS5qcyBwcm9jZXNzIGl0c2VsZiwgZS5nLiwgcGlwZXMuXG4gICAgICAgIC8vIFdoZW4gd2UgaW1wbGVtZW50IHRoaXMgaW4gdGhlIGJyb3dzZXIsIHdlIHdpbGwgYWxzbyBoYXZlIGZkJ3MgdGhhdCBjb3JyZXNwb25kXG4gICAgICAgIC8vIHRvIHBpcGVzLCB3aGVyZSB0aGlzIHdvcmtzLlxuICAgICAgICBweXRob25fd2FzbV9zZXRfaW5oZXJpdGFibGU6IChmZCwgaW5oZXJpdGFibGUpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5zZXRfaW5oZXJpdGFibGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIG5vLW9wIG9uIHBsYXRmb3JtIHdoZXJlIHdlIGFyZW4ndCBnb2luZyB0byBldmVyIGZvcmsgYW55d2F5cy5cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlYWwgPSByZWFsX2ZkKGZkKTtcbiAgICAgICAgICAgIGlmIChyZWFsID09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGZpbGUgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGZhaWwgaWYgcmVhbCBpc24ndCBhIHBpcGUgb3IgYWN0dWFsIG5hdGl2ZSBmaWxlIGRlc2NyaXB0b3IuXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB3ZSB0cmVhdCBhcyBhIG5vLW9wLCBzaW5jZSB0aGVyZSBpcyBub3RoaW5nIHdlIGNhbiBwb3NzaWJseSBkby5cbiAgICAgICAgICAgICAgICBwb3NpeC5zZXRfaW5oZXJpdGFibGUocmVhbCwgISFpbmhlcml0YWJsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE91ciBjdXN0b20gaW1wbGVtZW50YXRpb24gb2YgdGhlIGVudGlyZSBmb3JrLWV4ZWMgcHJvY2Vzcy4gIFdlIGNhbid0IHVzZSBQeXRob24nc1xuICAgICAgICAvLyBzaW5jZSBub2RlLmpzIHdvdWxkIG5lZWQgdG8gZ2V0IHJ1biBpbiB0aGUgZm9ya2VkIHByb2Nlc3MgdG8gZG8gYXJiaXRyYXJpbHkgY29tcGxpY2F0ZWRcbiAgICAgICAgLy8gdGhpbmdzLCBhbmQgbm9kZS5qcyBpcyBub3Qgd3JpdHRlbiBpbiBhIHdheSB0byBzdXBwb3J0IGFjdHVhbCBmb3JraW5nLiAgSW4gcHJhY3RpY2UsXG4gICAgICAgIC8vIGRvaW5nIHRoYXQgc29ydCBvZiB3b3JrcywgYnV0ICoqUkFORE9NTFkgQ1JBU0hFUyoqIGFuZCB3aWxsIGRyaXZlIHlvdSBpbnNhbmUuICBTb1xuICAgICAgICAvLyB3ZSBqdXN0IGRpZCB0aGUgaGFyZCB3b3JrIGFuZCB3cm90ZSB0aGlzLlxuICAgICAgICBweXRob25fd2FzbV9mb3JrX2V4ZWM6IChleGVjX2FycmF5X3B0ciwgYXJndl9wdHIsIGVudnBfcHRyLCBjd2QsIHAyY3JlYWQsIHAyY3dyaXRlLCBjMnByZWFkLCBjMnB3cml0ZSwgZXJycmVhZCwgZXJyd3JpdGUsIGVycnBpcGVfcmVhZCwgZXJycGlwZV93cml0ZSwgY2xvc2VfZmRzLCByZXN0b3JlX3NpZ25hbHMsIGNhbGxfc2V0c2lkLCBwZ2lkX3RvX3NldCwgY2FsbF9zZXRnaWQsIGdpZCwgY2FsbF9zZXRncm91cHMsIGdyb3Vwc19zaXplLCBncm91cHMsIGNhbGxfc2V0dWlkLCB1aWQsIGNoaWxkX3VtYXNrLCBjaGlsZF9zaWdtYXNrLCBweV9mZHNfdG9fa2VlcCkgPT4ge1xuICAgICAgICAgICAgbG9nKFwiY2FsbGVkIGZvcmtfZXhlY1wiKTtcbiAgICAgICAgICAgIGxvZyhcImlnbm9yaW5nIHRoZXNlOiBcIiwge1xuICAgICAgICAgICAgICAgIHJlc3RvcmVfc2lnbmFscyxcbiAgICAgICAgICAgICAgICBjYWxsX3NldHNpZCxcbiAgICAgICAgICAgICAgICBwZ2lkX3RvX3NldCxcbiAgICAgICAgICAgICAgICBjYWxsX3NldGdpZCxcbiAgICAgICAgICAgICAgICBnaWQsXG4gICAgICAgICAgICAgICAgY2FsbF9zZXRncm91cHMsXG4gICAgICAgICAgICAgICAgZ3JvdXBzX3NpemUsXG4gICAgICAgICAgICAgICAgZ3JvdXBzLFxuICAgICAgICAgICAgICAgIGNhbGxfc2V0dWlkLFxuICAgICAgICAgICAgICAgIHVpZCxcbiAgICAgICAgICAgICAgICBjaGlsZF91bWFzayxcbiAgICAgICAgICAgICAgICBjaGlsZF9zaWdtYXNrLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2coXCJiZWZvcmUgY2hhbmdlXCIsIHtcbiAgICAgICAgICAgICAgICBwMmNyZWFkLFxuICAgICAgICAgICAgICAgIHAyY3dyaXRlLFxuICAgICAgICAgICAgICAgIGMycHJlYWQsXG4gICAgICAgICAgICAgICAgYzJwd3JpdGUsXG4gICAgICAgICAgICAgICAgZXJycmVhZCxcbiAgICAgICAgICAgICAgICBlcnJ3cml0ZSxcbiAgICAgICAgICAgICAgICBlcnJwaXBlX3JlYWQsXG4gICAgICAgICAgICAgICAgZXJycGlwZV93cml0ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgZXJyX21hcCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbjJ3ID0gKDAsIGVycm5vXzEubmF0aXZlVG9XYXNtKShwb3NpeCk7XG4gICAgICAgICAgICBmb3IgKGxldCBuYXRpdmVfZXJybm8gPSAwOyBuYXRpdmVfZXJybm8gPCAxMDA7IG5hdGl2ZV9lcnJubysrKSB7XG4gICAgICAgICAgICAgICAgZXJyX21hcFtuYXRpdmVfZXJybm9dID0gbjJ3W25hdGl2ZV9lcnJub10gPz8gY29uc3RhbnRzXzEuZGVmYXVsdC5FTk9FTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBlbnZwIGlzIGVtcHR5LCB0aGVuIGV4cGxpY2l0bHkgZ2l2ZSBXQVNJX0ZEX0lORk8gYmVsb3c7IG90aGVyd2lzZSxcbiAgICAgICAgICAgIC8vIHdlIGp1c3QgaW5jbHVkZSBXQVNJX0ZEX0lORk8gaW4gZW52cC5cbiAgICAgICAgICAgIGNvbnN0IFdBU0lfRkRfSU5GTyA9IEpTT04uc3RyaW5naWZ5KGdldEluaGVyaXRhYmxlRGVzY3JpcHRvcnNNYXAoKSk7XG4gICAgICAgICAgICBjb25zdCBlbnZwID0gcmVjdi5hcnJheU9mU3RyaW5ncyhlbnZwX3B0cik7XG4gICAgICAgICAgICBpZiAoZW52cC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZW52cC5wdXNoKGBXQVNJX0ZEX0lORk89JHtXQVNJX0ZEX0lORk99YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgIGV4ZWNfYXJyYXk6IHJlY3YuYXJyYXlPZlN0cmluZ3MoZXhlY19hcnJheV9wdHIpLFxuICAgICAgICAgICAgICAgIGFyZ3Y6IHJlY3YuYXJyYXlPZlN0cmluZ3MoYXJndl9wdHIpLFxuICAgICAgICAgICAgICAgIGVudnAsXG4gICAgICAgICAgICAgICAgY3dkOiByZWN2LnN0cmluZyhjd2QpLFxuICAgICAgICAgICAgICAgIHAyY3JlYWQ6IHJlYWxfZmQocDJjcmVhZCksXG4gICAgICAgICAgICAgICAgcDJjd3JpdGU6IHJlYWxfZmQocDJjd3JpdGUpLFxuICAgICAgICAgICAgICAgIGMycHJlYWQ6IHJlYWxfZmQoYzJwcmVhZCksXG4gICAgICAgICAgICAgICAgYzJwd3JpdGU6IHJlYWxfZmQoYzJwd3JpdGUpLFxuICAgICAgICAgICAgICAgIGVycnJlYWQ6IHJlYWxfZmQoZXJycmVhZCksXG4gICAgICAgICAgICAgICAgZXJyd3JpdGU6IHJlYWxfZmQoZXJyd3JpdGUpLFxuICAgICAgICAgICAgICAgIGVycnBpcGVfcmVhZDogcmVhbF9mZChlcnJwaXBlX3JlYWQpLFxuICAgICAgICAgICAgICAgIGVycnBpcGVfd3JpdGU6IHJlYWxfZmQoZXJycGlwZV93cml0ZSksXG4gICAgICAgICAgICAgICAgY2xvc2VfZmRzLFxuICAgICAgICAgICAgICAgIGZkc190b19rZWVwOiByZWN2LmFycmF5T2ZJMzIocHlfZmRzX3RvX2tlZXApLm1hcChyZWFsX2ZkKSxcbiAgICAgICAgICAgICAgICBlcnJfbWFwLFxuICAgICAgICAgICAgICAgIFdBU0lfRkRfSU5GTyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsb2coXCJvcHRzXCIsIG9wdHMpO1xuICAgICAgICAgICAgbG9nKFwiZGVzY3JpcHRvcnMgbWFwID0gXCIsIGdldEluaGVyaXRhYmxlRGVzY3JpcHRvcnNNYXAoKSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBpZCA9IHBvc2l4LmZvcmtfZXhlYyhvcHRzKTtcbiAgICAgICAgICAgICAgICBsb2coXCJnb3Qgc3VicHJvY2VzcyA9IFwiLCBwaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbG9nKFwiZXJyb3IgZG9pbmcgZm9ya1wiLCBlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gS2luZCBvZiBzaW1pbGFyIHRvIGFib3ZlIGJ1dCBibG9ja2luZyBhbmQgKipzdXBwb3J0cyB3ZWJhc3NlbWJseSBwcm9ncmFtcyoqXG4gICAgICAgIC8vIHRocm91Z2ggc29tZSBhbWF6aW5nIFwibWFnaWNcIjpcbiAgICAgICAgLy8gZXh0ZXJuIGludCBjb3dhc21fdmZvcmtleGVjKGNoYXIgKiphcmd2LCBjb25zdCBjaGFyICpwYXRoKTtcbiAgICAgICAgY293YXNtX3Zmb3JrZXhlYzogKGFyZ3ZQdHIsIHBhdGhQdHIgPSAwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhcmd2ID0gcmVjdi5hcnJheU9mU3RyaW5ncyhhcmd2UHRyKTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBwYXRoUHRyID8gcmVjdi5zdHJpbmcocGF0aFB0cikgOiBcIlwiO1xuICAgICAgICAgICAgbG9nKFwiY293YXNtX3Zmb3JrZXhlY1wiLCBhcmd2KTtcbiAgICAgICAgICAgIGlmICghYXJndlswXSkge1xuICAgICAgICAgICAgICAgIGxvZyhcImNvd2FzbV92Zm9ya2V4ZWNcIiwgXCJubyBhcmd2WzBdXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiYXJndlswXSBtdXN0IGJlIGRlZmluZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghYXJndlswXS5pbmNsdWRlcyhcIi9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VhcmNoIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwiY293YXNtX3Zmb3JrZXhlY1wiLCBcImdvIHRocm91Z2ggc2VhcmNoIHBhdGggdG8gZmluZFwiLCBhcmd2WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgcGF0aC5zcGxpdChcIjpcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGhUb0NtZCA9ICgwLCBwYXRoXzEuam9pbikoKDAsIHBhdGhfMS5yZXNvbHZlKShkaXIpLCBhcmd2WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdCA9IGZzLnN0YXRTeW5jKHBhdGhUb0NtZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXQubW9kZSAmIGZzLmNvbnN0YW50cy5TX0lYVVNSKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3ZbMF0gPSBwYXRoVG9DbWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChfZXJyKSB7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2coXCJjb3dhc21fdmZvcmtleGVjXCIsIFwiZm91bmRcIiwgYXJndlswXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghYXJndlswXS5pbmNsdWRlcyhcIi9cIikgfHwgIWZzLmV4aXN0c1N5bmMoYXJndlswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwiY293YXNtX3Zmb3JrZXhlY1wiLCBcImNvdWxkIG5vdCBmaW5kIGV4ZWN1dGFibGVcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7YXJndlswXX06IG5vdCBmb3VuZFxcbmApO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb3VsZG4ndCBmaW5kIGl0XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxMjc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXQgPSBmcy5zdGF0U3luYyhhcmd2WzBdKTtcbiAgICAgICAgICAgICAgICBpZiAoIShzdGF0Lm1vZGUgJiBmcy5jb25zdGFudHMuU19JWFVTUikpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwiY293YXNtX3Zmb3JrZXhlY1wiLCBcImV4ZWN1dGFibGUgaGFzIHdyb25nIHBlcm1pc3Npb25zIChtaXNzaW5nIElYVVNSKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHthcmd2WzBdfTogUGVybWlzc2lvbiBkZW5pZWRcXG5gKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IGV4ZWN1dGFibGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEyNjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgd2FzbSA9IGlzV2FzbShhcmd2WzBdKTtcbiAgICAgICAgICAgICAgICBsb2coXCJpc1dhc20gPSBcIiwgd2FzbSk7XG4gICAgICAgICAgICAgICAgaWYgKHdhc20pIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwicnVubmluZyB3YXNtIGV4ZWN1dGFibGVcIiwgYXJndlswXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW4oYXJndik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkX3Byb2Nlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2coXCJydW5uaW5nIG5hdGl2ZSBleGVjdXRhYmxlXCIsIGFyZ3ZbMF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVuTmF0aXZlKGFyZ3YpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2coXCJjYW4ndCBydW4gYW55dGhpbmdcIik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHthcmd2WzBdfTogY2Fubm90IGV4ZWN1dGUgYmluYXJ5IGZpbGVcXG5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLnRyYWNlKGAke2FyZ3ZbMF19OiAke2Vycn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFueXRoaW5nIHRoYXQgZGlkbid0IHdvcmtcbiAgICAgICAgICAgIHJldHVybiAxMjc7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGZvcmtfZXhlYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmstZXhlYy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5cbk5PVEVTOlxuICAtIGVtc2NyaXB0ZW4vc3JjL2xpYnJhcnlfc3lzY2FsbC5qcyBpcyB1c2VmdWwgaW5zcGlyYXRpb24gaW4gc29tZSBjYXNlcyFcbiovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBmb3JrX2V4ZWNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9mb3JrLWV4ZWNcIikpO1xuY29uc3QgZXBvbGxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9lcG9sbFwiKSk7XG5jb25zdCBuZXRkYl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL25ldGRiXCIpKTtcbmNvbnN0IG5ldGlmXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbmV0aWZcIikpO1xuY29uc3Qgb3RoZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9vdGhlclwiKSk7XG5jb25zdCBzY2hlZF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NjaGVkXCIpKTtcbmNvbnN0IHNpZ25hbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NpZ25hbFwiKSk7XG5jb25zdCBzb2NrZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zb2NrZXRcIikpO1xuY29uc3Qgc3Bhd25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zcGF3blwiKSk7XG5jb25zdCBzdGRsaWJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdGRsaWJcIikpO1xuY29uc3Qgc3RkaW9fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zdGRpb1wiKSk7XG5jb25zdCBzdGF0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3RhdFwiKSk7XG5jb25zdCB0ZXJtaW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGVybWlvc1wiKSk7XG5jb25zdCB0aW1lXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGltZVwiKSk7XG5jb25zdCB1bmlzdGRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi91bmlzdGRcIikpO1xuY29uc3Qgd2FpdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3dhaXRcIikpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBjb25zdGFudHNfMiA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudHNcIikpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgbG9nTm90SW1wbGVtZW50ZWQgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcInBvc2l4Om5vdC1pbXBsZW1lbnRlZFwiKTtcbmNvbnN0IGxvZ0NhbGwgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcInBvc2l4OmNhbGxcIik7XG5jb25zdCBsb2dSZXR1cm4gPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcInBvc2l4OnJldHVyblwiKTtcbi8vIEZvciBzb21lIHJlYXNvbiB0aGlzIGNvZGVcbi8vICAgIGltcG9ydCBvczsgcHJpbnQob3MucG9wZW4oJ2xzJykucmVhZCgpKVxuLy8gaGFuZ3Mgd2hlbiBydW4gaW4gKipsaW51eCBvbmx5KiogdW5kZXIgcHl0aG9uLXdhc20sIGJ1dCBub3QgcHl0aG9uLXdhc20tZGVidWcsXG4vLyBleGNlcHQgaWYgSSBzZXQgYW55IHJhbmRvbSBlbnYgdmFyaWFibGUgaGVyZS4uLiBhbmQgdGhlbiBpdCBkb2Vzbid0IGhhbmcuXG4vLyBUaGlzIGlzIHdlaXJkLlxucHJvY2Vzcy5lbnYuX19TVFVQSURfSEFDS19fID0gXCJcIjtcbmZ1bmN0aW9uIHBvc2l4KGNvbnRleHQpIHtcbiAgICBjb25zdCBQID0ge1xuICAgICAgICAuLi4oMCwgZXBvbGxfMS5kZWZhdWx0KShjb250ZXh0KSxcbiAgICAgICAgLi4uKDAsIGZvcmtfZXhlY18xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgbmV0ZGJfMS5kZWZhdWx0KShjb250ZXh0KSxcbiAgICAgICAgLi4uKDAsIG5ldGlmXzEuZGVmYXVsdCkoY29udGV4dCksXG4gICAgICAgIC4uLigwLCBvdGhlcl8xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgc2NoZWRfMS5kZWZhdWx0KShjb250ZXh0KSxcbiAgICAgICAgLi4uKDAsIHNpZ25hbF8xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgc29ja2V0XzEuZGVmYXVsdCkoY29udGV4dCksXG4gICAgICAgIC4uLigwLCBzcGF3bl8xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgc3RhdF8xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgc3RkbGliXzEuZGVmYXVsdCkoY29udGV4dCksXG4gICAgICAgIC4uLigwLCBzdGRpb18xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgdGltZV8xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgdGVybWlvc18xLmRlZmF1bHQpKGNvbnRleHQpLFxuICAgICAgICAuLi4oMCwgdW5pc3RkXzEuZGVmYXVsdCkoY29udGV4dCksXG4gICAgICAgIC4uLigwLCB3YWl0XzEuZGVmYXVsdCkoY29udGV4dCksXG4gICAgfTtcbiAgICBjb25zdCBRID0ge307XG4gICAgbGV0IG5hdGl2ZUVycm5vVG9TeW1ib2wgPSB7fTtcbiAgICBpZiAoY29udGV4dC5wb3NpeC5jb25zdGFudHMgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGNvbnN0IHN5bWJvbCBpbiBjb250ZXh0LnBvc2l4LmNvbnN0YW50cykge1xuICAgICAgICAgICAgbmF0aXZlRXJybm9Ub1N5bWJvbFtjb250ZXh0LnBvc2l4LmNvbnN0YW50c1tzeW1ib2xdXSA9IHN5bWJvbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRFcnJub0Zyb21OYXRpdmUobmF0aXZlRXJybm8pIHtcbiAgICAgICAgLy8gVGhlIGVycm9yIGNvZGUgY29tZXMgZnJvbSBuYXRpdmUgcG9zaXgsIHNvIHdlIHRyYW5zbGF0ZSBpdCB0byBXQVNJIGZpcnN0XG4gICAgICAgIGNvbnN0IHN5bWJvbCA9IG5hdGl2ZUVycm5vVG9TeW1ib2xbbmF0aXZlRXJybm9dO1xuICAgICAgICBpZiAoc3ltYm9sICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHdhc2lFcnJubyA9IGNvbnN0YW50c18yLmRlZmF1bHRbc3ltYm9sXTtcbiAgICAgICAgICAgIGlmICh3YXNpRXJybm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2FsbEZ1bmN0aW9uKFwic2V0RXJybm9cIiwgd2FzaUVycm5vKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbG9nTm90SW1wbGVtZW50ZWQoXCJVbmFibGUgdG8gbWFwIG5hdGl2ZUVycm5vIChwbGVhc2UgdXBkYXRlIGNvZGUpXCIsIG5hdGl2ZUVycm5vKTtcbiAgICB9XG4gICAgLy8gSXQncyBjcml0aWNhbCB0byBlbnN1cmUgdGhlIGRpcmVjdG9yaWVzIG9mIHRoZSBob3N0IGVudiBpcyB0aGUgc2FtZSBhc1xuICAgIC8vIHRoZSBXQVNNIGVudiwgaWYgbWVhbmluZ2Z1bCBvciBwb3NzaWJsZS4gIFRoaXMgb25seSBtYXR0ZXJzIHJpZ2h0IG5vd1xuICAgIC8vIHVuZGVyIG5vZGUuanMsIGJ1dCBpcyByZWFsbHkgY3JpdGljYWwgdGhlcmUuICBUaHVzIHdlIHdyYXAgKmFsbCogcG9zaXggY2FsbHNcbiAgICAvLyBpbiB0aGlzIHN5bmNkaXIgYmVsb3cuXG4gICAgLy8gICAgVE9ETzogb3B0aW1pemUuICBUaGlzIHNlZW1zIGRhbmdlcm91c2x5IGV4cGVuc2l2ZS5cbiAgICBsZXQgc3luY2RpcjtcbiAgICBpZiAoY29udGV4dC5wb3NpeC5jaGRpciAhPSBudWxsKSB7XG4gICAgICAgIHN5bmNkaXIgPSAoKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBpdCBpcyBleHBlY3RlZCB0aGF0IHRoaXMgbWF5IGZhaWwsIGUuZy4sIGlmIHdlIGFyZSB1c2luZyBhIHNhbmRib3ggZmlsZXN5c3RlbVxuICAgICAgICAgICAgLy8gZGVhbCB3aXRoIHRoaXMgaW4gYSBiZXR0ZXIgd2F5LlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnBvc2l4LmNoZGlyPy4oY29udGV4dC5nZXRjd2QoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2VycikgeyB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzeW5jZGlyID0gKCkgPT4geyB9O1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gUCkge1xuICAgICAgICBRW25hbWVdID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHN5bmNkaXIoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbG9nQ2FsbChuYW1lLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXQgPSBQW25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGxvZ1JldHVybihuYW1lLCByZXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci53YXNpRXJybm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNhbGxGdW5jdGlvbihcInNldEVycm5vXCIsIGVyci53YXNpRXJybm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnIuY29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEVycm5vRnJvbU5hdGl2ZShwYXJzZUludChlcnIuY29kZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXJyLmNvZGUgbm90IHlldCBzZXQgKFRPRE8pLCBzbyB3ZSBsb2cgYW5kIHRyeSBoZXVyaXN0aWMuXG4gICAgICAgICAgICAgICAgICAgIC8vIE9uIGVycm9yLCBmb3Igbm93IC0xIGlzIHJldHVybmVkLCBhbmQgZXJybm8gc2hvdWxkIGdldCBzZXQgdG8gc29tZSBzb3J0IG9mIGVycm9yIGluZGljYXRvclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBob3cgc2hvdWxkIHdlIHNldCBlcnJubz9cbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSAtLSB0aGlzIGlzIGp1c3QgdGVtcG9yYXJ5IHdoaWxlIHdlIHNvcnQgb3V0IHNldHRpbmcgZXJybm8uLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5uYW1lID09IFwiTm90SW1wbGVtZW50ZWRFcnJvclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFTk9TWVMgbWVhbnMgXCJGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQgKFBPU0lYLjEtMjAwMSkuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2FsbEZ1bmN0aW9uKFwic2V0RXJybm9cIiwgY29uc3RhbnRzXzIuZGVmYXVsdC5FTk9TWVMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS50cmFjZShgV0FSTklORzogUG9zaXggbGlicmFyeSByYWlzZWQgZXhjZXB0aW9uIHdpdGhvdXQgZXJyb3IgY29kZTogJHtlcnJ9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dOb3RJbXBsZW1lbnRlZChgUG9zaXggY2FsbCB0byAke25hbWV9IHJhaXNlZCBleGNlcHRpb24gd2l0aG91dCBlcnJvciBjb2RlYCwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyLnJldCA/PyAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgUS5pbml0ID0gKCkgPT4ge1xuICAgICAgICAoMCwgY29uc3RhbnRzXzEuaW5pdENvbnN0YW50cykoY29udGV4dCk7XG4gICAgfTtcbiAgICByZXR1cm4gUTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuRnVuY3Rpb25zIGZyb20gbmV0ZGIuXG5cblRoZXNlIGFyZSBhbGwgdmVyeSBoYXJkIHRvIGltcGxlbWVudCB3aXRoIG5vZGUsIHdpdGhvdXQganVzdCB3cml0aW5nIGEgbm9kZSBleHRlbnNpb25cbm1vZHVsZSB3aGljaCBpcyB3aGF0IEknbGwgbGlrZWx5IGhhdmUgdG8gZG8uXG4qL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53YXNtVG9OYXRpdmVTb2NrdHlwZSA9IGV4cG9ydHMud2FzbVRvTmF0aXZlRmFtaWx5ID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5mdW5jdGlvbiBuZXRkYih7IG1lbW9yeSwgcG9zaXgsIGNhbGxGdW5jdGlvbiwgcmVjdiwgc2VuZCwgZnJlZSwgfSkge1xuICAgIGNvbnN0IG5hbWVzID0gXCIgZ2V0cHJvdG9ieW5hbWUgZ2V0c2VydmJ5bmFtZSBnZXRzZXJ2Ynlwb3J0IGdldG5hbWVpbmZvIGdldHBlZXJuYW1lXCI7XG4gICAgY29uc3QgbmV0ZGIgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMuc3BsaXQoL1xccysvKSkge1xuICAgICAgICBuZXRkYltuYW1lXSA9ICgpID0+ICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKG5hbWUpO1xuICAgIH1cbiAgICAvLyBUaGlzIGNhbid0IHByb3Blcmx5IGJlIGRvbmUgdXNpbmcgemlnLCBzaW5jZSBzdHJ1Y3Qgc29ja2FkZHJcbiAgICAvLyBpbnRlbnNlbHkgYWJ1c2VzIHRoZSBDIGRhdGEgdHlwZXMuLi5cbiAgICBmdW5jdGlvbiBzZW5kU29ja2FkZHIoc2FfZmFtaWx5LCBhaV9hZGRybGVuLCBzYV9kYXRhKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHNlbmQubWFsbG9jKDIgKyBhaV9hZGRybGVuKTtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhtZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgdmlldy5zZXRVaW50MTYocHRyLCBzYV9mYW1pbHksIHRydWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFpX2FkZHJsZW47IGkrKykge1xuICAgICAgICAgICAgdmlldy5zZXRVaW50OChwdHIgKyAyICsgaSwgc2FfZGF0YVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB0cjtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVjdkhpbnRzKGhpbnRzUHRyKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcobWVtb3J5LmJ1ZmZlcik7XG4gICAgICAgIGNvbnN0IGZsYWdzID0gdmlldy5nZXRVaW50MzIoaGludHNQdHIsIHRydWUpO1xuICAgICAgICBoaW50c1B0ciArPSA0O1xuICAgICAgICBsZXQgZmFtaWx5ID0gd2FzbVRvTmF0aXZlRmFtaWx5KHBvc2l4LCB2aWV3LmdldFVpbnQzMihoaW50c1B0ciwgdHJ1ZSkpO1xuICAgICAgICBoaW50c1B0ciArPSA0O1xuICAgICAgICBjb25zdCBzb2NrdHlwZSA9IHdhc21Ub05hdGl2ZVNvY2t0eXBlKHBvc2l4LCB2aWV3LmdldFVpbnQzMihoaW50c1B0ciwgdHJ1ZSkpO1xuICAgICAgICBoaW50c1B0ciArPSA0O1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHZpZXcuZ2V0VWludDMyKGhpbnRzUHRyLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgZmFtaWx5LFxuICAgICAgICAgICAgc29ja3R5cGUsXG4gICAgICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2VuZFB0cihhZGRyZXNzLCBwdHIpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhtZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgdmlldy5zZXRVaW50MzIoYWRkcmVzcywgcHRyLCB0cnVlKTsgLy8gdHJ1ZSA9IGVuZGlhbm5lc3NcbiAgICB9XG4gICAgLy8gdGhpcyBpcyBudWxsIHRlcm1pbmF0ZWQuXG4gICAgZnVuY3Rpb24gc2VuZEFycmF5T2ZTdHJpbmdzKHYpIHtcbiAgICAgICAgY29uc3QgcHRyID0gc2VuZC5tYWxsb2MoNCAqICh2Lmxlbmd0aCArIDEpKTtcbiAgICAgICAgaWYgKHB0ciA9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm91dCBvZiBtZW1vcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzUHRyID0gc2VuZC5zdHJpbmcodltpXSk7XG4gICAgICAgICAgICBzZW5kUHRyKHB0ciArIDQgKiBpLCBzUHRyKTtcbiAgICAgICAgfVxuICAgICAgICBzZW5kUHRyKHB0ciArIDQgKiB2Lmxlbmd0aCwgMCk7XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNlbmRIb3N0ZW50KGhvc3RlbnQpIHtcbiAgICAgICAgLy8gQ29udmVydCBmcm9tIG5hdGl2ZSBwb3NpeCBjb25zdGFudCB0byBtdXNsLXdhc20gY29uc3RhbnQgZm9yIGFkZHJlc3MgdHlwZS5cbiAgICAgICAgY29uc3QgaF9hZGRydHlwZSA9IG5hdGl2ZVRvV2FzbUZhbWlseShwb3NpeCwgaG9zdGVudC5oX2FkZHJ0eXBlKTtcbiAgICAgICAgcmV0dXJuIGNhbGxGdW5jdGlvbihcInNlbmRIb3N0ZW50XCIsIHNlbmQuc3RyaW5nKGhvc3RlbnQuaF9uYW1lKSwgc2VuZEFycmF5T2ZTdHJpbmdzKGhvc3RlbnQuaF9hbGlhc2VzKSwgaF9hZGRydHlwZSwgaG9zdGVudC5oX2xlbmd0aCwgc2VuZEFycmF5T2ZTdHJpbmdzKGhvc3RlbnQuaF9hZGRyX2xpc3QpLCBob3N0ZW50LmhfYWRkcl9saXN0Lmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIHN0cnVjdCBob3N0ZW50ICpnZXRob3N0YnluYW1lKGNvbnN0IGNoYXIgKm5hbWUpO1xuICAgIC8vIHN0cnVjdCBob3N0ZW50XG4gICAgLy8ge1xuICAgIC8vICAgICBjaGFyICpoX25hbWU7ICAgICAgIC8qIE9mZmljaWFsIGRvbWFpbiBuYW1lIG9mIGhvc3QgKi9cbiAgICAvLyAgICAgY2hhciAqKmhfYWxpYXNlczsgICAvKiBOdWxsLXRlcm1pbmF0ZWQgYXJyYXkgb2YgZG9tYWluIG5hbWVzICovXG4gICAgLy8gICAgIGludCBoX2FkZHJ0eXBlOyAgICAgLyogSG9zdCBhZGRyZXNzIHR5cGUgKEFGX0lORVQpICovXG4gICAgLy8gICAgIGludCBoX2xlbmd0aDsgICAgICAgLyogTGVuZ3RoIG9mIGFuIGFkZHJlc3MsIGluIGJ5dGVzICovXG4gICAgLy8gICAgIGNoYXIgKipoX2FkZHJfbGlzdDsgICAgIC8qIE51bGwtdGVybWluYXRlZCBhcnJheSBvZiBpbl9hZGRyIHN0cnVjdHMgKi9cbiAgICAvLyB9O1xuICAgIC8vIHN0cnVjdCBpbl9hZGRyXG4gICAgLy8ge1xuICAgIC8vICAgICB1bnNpZ25lZCBpbnQgc19hZGRyOyAvKiBOZXR3b3JrIGJ5dGUgb3JkZXIgKGJpZy1lbmRpYW4pICovXG4gICAgLy8gfTtcbiAgICBuZXRkYi5nZXRob3N0YnluYW1lID0gKG5hbWVQdHIpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5nZXRob3N0YnluYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImdldGhvc3RieWFkZHJcIiwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gcmVjdi5zdHJpbmcobmFtZVB0cik7XG4gICAgICAgICAgICBjb25zdCBob3N0ZW50ID0gcG9zaXguZ2V0aG9zdGJ5bmFtZShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBzZW5kSG9zdGVudChob3N0ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnIucmV0ID0gMDtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gc3RydWN0IGhvc3RlbnQgKmdldGhvc3RieWFkZHIoY29uc3Qgdm9pZCAqYWRkcixcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NrbGVuX3QgbGVuLCBpbnQgdHlwZSk7XG4gICAgbmV0ZGIuZ2V0aG9zdGJ5YWRkciA9IChhZGRyUHRyLCBfbGVuLCB0eXBlKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAocG9zaXguZ2V0aG9zdGJ5YWRkciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJnZXRob3N0YnlhZGRyXCIsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWRkclN0cmluZ1B0ciA9IGNhbGxGdW5jdGlvbihcInJlY3ZBZGRyXCIsIGFkZHJQdHIsIHR5cGUpO1xuICAgICAgICAgICAgaWYgKGFkZHJTdHJpbmdQdHIgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYWRkclN0cmluZyA9IHJlY3Yuc3RyaW5nKGFkZHJTdHJpbmdQdHIpO1xuICAgICAgICAgICAgZnJlZShhZGRyU3RyaW5nUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGhvc3RlbnQgPSBwb3NpeC5nZXRob3N0YnlhZGRyKGFkZHJTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbmRIb3N0ZW50KGhvc3RlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGVyci5yZXQgPSAwO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBpbnQgZ2V0YWRkcmluZm8oY29uc3QgY2hhciAqcmVzdHJpY3Qgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciAqcmVzdHJpY3Qgc2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RydWN0IGFkZHJpbmZvICpyZXN0cmljdCBoaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0IGFkZHJpbmZvICoqcmVzdHJpY3QgcmVzKTtcbiAgXG4gIFNpbmNlIHdlIGFyZSBhbGxvY2F0aW5nIHRoaXMgZXhwbGljaXRseSB1c2luZyBtYWxsb2MgZm9yIHRoZSByZXN1bHQsXG4gIGl0J3MgY3JpdGljYWwgdG8ga25vdyBwcmVjaXNlbHkgd2hhdCB0aGlzIHJlYWxseSBpcyBpbiAzMi1iaXQgV2ViQXNzZW1ibHksXG4gIGJ1dCBub3doZXJlIGVsc2UsIHdoaWNoIHdlIGR1ZSBieSBncmVwcGluZyB6aWcvbGliL2xpYmMgc291cmNlcy5cbiAgXG4gICAgICAgIHN0cnVjdCBhZGRyaW5mbyB7XG4gICAgICAgICAgICAgaW50ICAgICAgICAgICAgICBhaV9mbGFncztcbiAgICAgICAgICAgICBpbnQgICAgICAgICAgICAgIGFpX2ZhbWlseTtcbiAgICAgICAgICAgICBpbnQgICAgICAgICAgICAgIGFpX3NvY2t0eXBlO1xuICAgICAgICAgICAgIGludCAgICAgICAgICAgICAgYWlfcHJvdG9jb2w7XG4gICAgICAgICAgICAgc29ja2xlbl90ICAgICAgICBhaV9hZGRybGVuO1xuICAgICAgICAgICAgIHN0cnVjdCBzb2NrYWRkciAqYWlfYWRkcjtcbiAgICAgICAgICAgICBjaGFyICAgICAgICAgICAgKmFpX2Nhbm9ubmFtZTtcbiAgICAgICAgICAgICBzdHJ1Y3QgYWRkcmluZm8gKmFpX25leHQ7XG4gICAgICAgICB9XG4gIFxuICAgICAgICAgdHlwZWRlZiB1bnNpZ25lZCBzb2NrbGVuX3Q7XG4gIFxuICAgICAgICAgc3RydWN0IHNvY2thZGRyIHtcbiAgICAgICAgICAgIF9BbGlnbmFzKG1heF9hbGlnbl90KSBzYV9mYW1pbHlfdCBzYV9mYW1pbHk7XG4gICAgICAgICAgICBjaGFyIHNhX2RhdGFbMF07XG4gICAgICAgICB9O1xuICBcbiAgICAgICAgIHR5cGVkZWYgdW5zaWduZWQgc2hvcnQgc2FfZmFtaWx5X3Q7ICAgIC8vIHVuc2lnbmVkIHNob3J0IGlzIDIgYnl0ZXNcbiAgXG4gIFRoYXQgXCJjaGFyIHNhX2RhdGFbMF1cIiBpcyBzY2FyeSBidXQgT0ssIHNpbmNlIGp1c3QgYSBwb2ludGVyOyB0aGluayBvZiBpdCBhcyBhIGNoYXIqLlxuICBcbiAgICAqL1xuICAgIG5ldGRiLmdldGFkZHJpbmZvID0gKG5vZGVQdHIsIHNlcnZpY2VQdHIsIGhpbnRzUHRyLCByZXNQdHIpID0+IHtcbiAgICAgICAgaWYgKHBvc2l4LmdldGFkZHJpbmZvID09IG51bGwpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZ2V0YWRkcmluZm9cIik7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZSA9IHJlY3Yuc3RyaW5nKG5vZGVQdHIpO1xuICAgICAgICBjb25zdCBzZXJ2aWNlID0gcmVjdi5zdHJpbmcoc2VydmljZVB0cik7XG4gICAgICAgIGNvbnN0IGhpbnRzID0gcmVjdkhpbnRzKGhpbnRzUHRyKTtcbiAgICAgICAgbGV0IGFkZHJpbmZvQXJyYXk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhZGRyaW5mb0FycmF5ID0gcG9zaXguZ2V0YWRkcmluZm8obm9kZSwgc2VydmljZSwgaGludHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnIuY29kZSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSBleGNlcHRpb24gaGFzIHRoZSBlcnJvciBjb2RlLCB3aGljaCBzaG91bGQgYmUgcmV0dXJuZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KGVyci5jb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGp1c3QgbGV0IGl0IHByb3BcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFpX25leHQgPSAwO1xuICAgICAgICBsZXQgYWRkcmluZm8gPSAwO1xuICAgICAgICBsZXQgbiA9IGFkZHJpbmZvQXJyYXkubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKG4gPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGFkZHJpbmZvQXJyYXlbbl07XG4gICAgICAgICAgICBpbmZvLmFpX3NvY2t0eXBlID0gbmF0aXZlVG9XYXNtU29ja3R5cGUocG9zaXgsIGluZm8uYWlfc29ja3R5cGUpO1xuICAgICAgICAgICAgaW5mby5haV9mYW1pbHkgPSBpbmZvLnNhX2ZhbWlseSA9IG5hdGl2ZVRvV2FzbUZhbWlseShwb3NpeCwgaW5mby5haV9mYW1pbHkpO1xuICAgICAgICAgICAgY29uc3QgYWlfYWRkciA9IHNlbmRTb2NrYWRkcihpbmZvLnNhX2ZhbWlseSwgaW5mby5haV9hZGRybGVuLCBpbmZvLnNhX2RhdGEpO1xuICAgICAgICAgICAgaWYgKCFhaV9hZGRyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJlcnJvciBjcmVhdGluZyBzb2NrYWRkclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZHJpbmZvID0gY2FsbEZ1bmN0aW9uKFwic2VuZEFkZHJpbmZvXCIsIGluZm8uYWlfZmxhZ3MsIGluZm8uYWlfZmFtaWx5LCBpbmZvLmFpX3NvY2t0eXBlLCBpbmZvLmFpX3Byb3RvY29sLCBpbmZvLmFpX2FkZHJsZW4sIGFpX2FkZHIsIGluZm8uYWlfY2Fub25uYW1lICE9IG51bGwgPyBzZW5kLnN0cmluZyhpbmZvLmFpX2Nhbm9ubmFtZSkgOiAwLCBhaV9uZXh0KTtcbiAgICAgICAgICAgIGlmICghYWRkcmluZm8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImVycm9yIGNyZWF0aW5nIGFkZHJpbmZvIHN0cnVjdHVyZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFpX25leHQgPSBhZGRyaW5mbztcbiAgICAgICAgICAgIG4gLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFkZHJpbmZvKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImVycm9yIGNyZWF0aW5nIGFkZHJpbmZvIHN0cnVjdHVyZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZW5kUHRyKHJlc1B0ciwgYWRkcmluZm8pO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIC8vIHVzZSBhIGNhY2hlIHRvIG9ubHkgbGVhayBtZW1vcnkgb25jZSBwZXIgZXJyb3IgY29kZS5cbiAgICBjb25zdCBnYWlfc3RyZXJyb3JfY2FjaGUgPSB7fTtcbiAgICBuZXRkYi5nYWlfc3RyZXJyb3IgPSAoZXJyY29kZSkgPT4ge1xuICAgICAgICBpZiAoZ2FpX3N0cmVycm9yX2NhY2hlW2VycmNvZGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnYWlfc3RyZXJyb3JfY2FjaGVbZXJyY29kZV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyUHRyID0gc2VuZC5zdHJpbmcocG9zaXguZ2FpX3N0cmVycm9yPy4oZXJyY29kZSkgPz8gXCJVbmtub3duIGVycm9yXCIpO1xuICAgICAgICBnYWlfc3RyZXJyb3JfY2FjaGVbZXJyY29kZV0gPSBzdHJQdHI7XG4gICAgICAgIHJldHVybiBzdHJQdHI7XG4gICAgfTtcbiAgICBjb25zdCBoc3RyZXJyb3JfY2FjaGUgPSB7fTtcbiAgICBuZXRkYi5oc3RyZXJyb3IgPSAoZXJyY29kZSkgPT4ge1xuICAgICAgICBpZiAoaHN0cmVycm9yX2NhY2hlW2VycmNvZGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBoc3RyZXJyb3JfY2FjaGVbZXJyY29kZV07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyUHRyID0gc2VuZC5zdHJpbmcocG9zaXguaHN0cmVycm9yPy4oZXJyY29kZSkgPz8gXCJVbmtub3duIGVycm9yXCIpO1xuICAgICAgICBoc3RyZXJyb3JfY2FjaGVbZXJyY29kZV0gPSBzdHJQdHI7XG4gICAgICAgIHJldHVybiBzdHJQdHI7XG4gICAgfTtcbiAgICBsZXQgaF9lcnJub19wdHIgPSBudWxsO1xuICAgIG5ldGRiLl9faF9lcnJub19sb2NhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgLyogQWZ0ZXIgcmVhZGluZyBzb3VyY2VzLCB0aGlzIF9faF9lcnJub19sb2NhdGlvbiByZXR1cm5zIHRoZSBtZW1vcnlcbiAgICAgICBsb2NhdGlvbiBvZiBhbiBpMzIgd2hlcmUgYW4gZXJyb3IgbnVtYmVyIGlzIHN0b3JlZCBpbiBtZW1vcnkuICBTZWU6XG4gICAgICAgIGludCBoX2Vycm5vO1xuICAgICAgICBpbnQgKl9faF9lcnJub19sb2NhdGlvbih2b2lkKSB7XG4gICAgICAgICAgICAgaWYgKCFfX3B0aHJlYWRfc2VsZigpLT5zdGFjaykgcmV0dXJuICZoX2Vycm5vOyB9XG4gICAgICAgIEVsc2V3aGVyZSwgaF9lcnJubyBpcyAjZGVmaW5lZCB0byBjYWxsaW5nIHRoZSBhYm92ZSBhbmQgZGVyZWYuXG4gICAgICAgIFNvIGZvciBub3cgd2UgZGVmaW5lIHN1Y2ggYW4gaTMyIGFuZCBzZXQgaXQgdG8gMC4gIFRoaXMgaXMgYSBsb3RcbiAgICAgICAgYmV0dGVyIHRoYW4gcmV0dXJuaW5nIDAgKHRoZSBzdHViKSBhbmQgY2F1c2luZyBhIHNlZ2ZhdWx0IVxuICAgICAgICBUT0RPOiBpbiB0aGUgZnV0dXJlLCB3ZSBjb3VsZCBzb21laG93IG1pcnJvciB0aGUgZXJyb3IgY29kZSBmcm9tIHRoZVxuICAgICAgICBuYXRpdmUgc2lkZS4uLj9cbiAgICAgICAgKi9cbiAgICAgICAgaWYgKGhfZXJybm9fcHRyID09IG51bGwpIHtcbiAgICAgICAgICAgIGhfZXJybm9fcHRyID0gc2VuZC5tYWxsb2MoNCk7IC8vIGFuIGkzMlxuICAgICAgICAgICAgc2VuZC5pMzIoaF9lcnJub19wdHIsIDApOyAvLyBzZXQgaXQgdG8gMC5cbiAgICAgICAgfVxuICAgICAgICBpZiAoaF9lcnJub19wdHIgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiYnVnXCIpO1xuICAgICAgICByZXR1cm4gaF9lcnJub19wdHI7XG4gICAgfTtcbiAgICByZXR1cm4gbmV0ZGI7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBuZXRkYjtcbmZ1bmN0aW9uIHdhc21Ub05hdGl2ZUZhbWlseShwb3NpeCwgZmFtaWx5KSB7XG4gICAgaWYgKGZhbWlseSA9PSAwKVxuICAgICAgICByZXR1cm4gZmFtaWx5OyAvLyBkZWZhdWx0IG5vIGZsYWcgZ2l2ZW5cbiAgICAvLyBjb252ZXJ0IGZyb20gbXVzbC13YXNtIEFGX0lORVQgdG8gbmF0aXZlIEFGX0lORVRcbiAgICAvLyAoYXJlIHRvdGFsbHkgZGlmZmVyZW50LCBhbmQgZGlmZmVyZW50IGZvciBlYWNoIG5hdGl2ZSBwbGF0Zm9ybSEpLlxuICAgIGlmIChmYW1pbHkgPT0gY29uc3RhbnRzXzEuZGVmYXVsdC5BRl9JTkVUKSB7XG4gICAgICAgIHJldHVybiBwb3NpeC5jb25zdGFudHMuQUZfSU5FVDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZmFtaWx5ID09IGNvbnN0YW50c18xLmRlZmF1bHQuQUZfSU5FVDYpIHtcbiAgICAgICAgcmV0dXJuIHBvc2l4LmNvbnN0YW50cy5BRl9JTkVUNjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKGB1bnN1cHBvcnRlZCBXQVNNIGFkZHJlc3MgZmFtaWx5OiAke2ZhbWlseX1gKTtcbiAgICB9XG59XG5leHBvcnRzLndhc21Ub05hdGl2ZUZhbWlseSA9IHdhc21Ub05hdGl2ZUZhbWlseTtcbmZ1bmN0aW9uIG5hdGl2ZVRvV2FzbUZhbWlseShwb3NpeCwgZmFtaWx5KSB7XG4gICAgaWYgKGZhbWlseSA9PSAwKVxuICAgICAgICByZXR1cm4gZmFtaWx5OyAvLyBkZWZhdWx0IG5vIGZsYWcgZ2l2ZW5cbiAgICBpZiAoZmFtaWx5ID09IHBvc2l4LmNvbnN0YW50cy5BRl9JTkVUKSB7XG4gICAgICAgIHJldHVybiBjb25zdGFudHNfMS5kZWZhdWx0LkFGX0lORVQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGZhbWlseSA9PSBwb3NpeC5jb25zdGFudHMuQUZfSU5FVDYpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLmRlZmF1bHQuQUZfSU5FVDY7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihgdW5zdXBwb3J0ZWQgbmF0aXZlIGFkZHJlc3MgZmFtaWx5OiAke2ZhbWlseX1gKTtcbiAgICB9XG59XG4vLyBtdWx0aXBsZSBzb2NrdHlwZXMgY2FuIGJlIHxkIHRvZ2V0aGVyLiAgRS5nLiwgUHl0aG9uIGRvZXMgdGhpcyBpbiB0aGUgc29ja2V0bW9kdWxlLmMgbW9kdWxlXG4vLyB3aGVyZSB0aGV5IGRvIFwidHlwZSB8IFNPQ0tfQ0xPRVhFQ1wiLlxuZnVuY3Rpb24gd2FzbVRvTmF0aXZlU29ja3R5cGUocG9zaXgsIHNvY2t0eXBlKSB7XG4gICAgaWYgKCFzb2NrdHlwZSlcbiAgICAgICAgcmV0dXJuIHNvY2t0eXBlO1xuICAgIGxldCBuYXRpdmVTb2NrdHlwZSA9IDA7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGNvbnN0YW50c18xLmRlZmF1bHQpIHtcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aChcIlNPQ0tcIikgJiYgY29uc3RhbnRzXzEuZGVmYXVsdFtuYW1lXSAmIHNvY2t0eXBlKSB7XG4gICAgICAgICAgICBpZiAocG9zaXguY29uc3RhbnRzW25hbWVdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBgV2UgbmVlZCB0aGUgY29uc3RhbnQgJHtuYW1lfSB0byBiZSBkZWZpbmVkIGluIHRoZSBwb3NpeC1ub2RlIG1vZHVsZS5gO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuYXRpdmVTb2NrdHlwZSB8PSBwb3NpeC5jb25zdGFudHNbbmFtZV07XG4gICAgICAgICAgICBzb2NrdHlwZSAmPSB+Y29uc3RhbnRzXzEuZGVmYXVsdFtuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc29ja3R5cGUgIT0gMCkge1xuICAgICAgICBjb25zdCBlcnIgPSBgVW5hYmxlIHRvIGNvbnZlcnQgcmVtYWluZ2luZyBzb2NrdHlwZSAke3NvY2t0eXBlfSB0byBuYXRpdmUuIE1ha2Ugc3VyZSBhbGwgU09DSyogY29uc3RhbnRzIGFyZSBkZWZpbmVkLmA7XG4gICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gbmF0aXZlU29ja3R5cGU7XG59XG5leHBvcnRzLndhc21Ub05hdGl2ZVNvY2t0eXBlID0gd2FzbVRvTmF0aXZlU29ja3R5cGU7XG5mdW5jdGlvbiBuYXRpdmVUb1dhc21Tb2NrdHlwZShwb3NpeCwgc29ja3R5cGUpIHtcbiAgICBpZiAoIXNvY2t0eXBlKVxuICAgICAgICByZXR1cm4gc29ja3R5cGU7XG4gICAgbGV0IHdhc21Tb2NrdHlwZSA9IDA7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHBvc2l4LmNvbnN0YW50cykge1xuICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKFwiU09DS1wiKSAmJiBwb3NpeC5jb25zdGFudHNbbmFtZV0gJiBzb2NrdHlwZSkge1xuICAgICAgICAgICAgaWYgKGNvbnN0YW50c18xLmRlZmF1bHRbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IGBXZSBuZWVkIHRoZSBjb25zdGFudCAke25hbWV9IHRvIGJlIGRlZmluZWQgaW4gdGhlIHBvc2l4LW5vZGUgbW9kdWxlLmA7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhc21Tb2NrdHlwZSB8PSBjb25zdGFudHNfMS5kZWZhdWx0W25hbWVdO1xuICAgICAgICAgICAgc29ja3R5cGUgJj0gfnBvc2l4LmNvbnN0YW50c1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc29ja3R5cGUgIT0gMCkge1xuICAgICAgICBjb25zdCBlcnIgPSBgVW5hYmxlIHRvIGNvbnZlcnQgcmVtYWluZ2luZyBzb2NrdHlwZSAke3NvY2t0eXBlfSB0byBuYXRpdmUuIE1ha2Ugc3VyZSBhbGwgU09DSyogcG9zaXguY29uc3RhbnRzIGFyZSBkZWZpbmVkLmA7XG4gICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICB0aHJvdyBFcnJvcihlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gd2FzbVNvY2t0eXBlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0ZGIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuRnVuY3Rpb25zIGZyb20gbmV0L2lmLmhcblxuTk9URTogbm9kZS5qcyBoYXMgcmVxdWlyZSgnb3MnKS5uZXR3b3JrSW50ZXJmYWNlcygpLCBidXQgaXQgaXMgbm90IGVxdWl2YWxlbnRcbnRvIHRoZSBzeXN0ZW0gY2FsbHMgaW4gbmV0L2lmLmguICBFLmcuLCBvbiBteSBtYWMgaWZfaW5kZXh0b25hbWUoMikgaXMgXCJnaWYwXCIsXG5idXQgXCJnaWYwXCIgaXNuJ3QgaW4gcmVxdWlyZSgnb3MnKS5uZXR3b3JrSW50ZXJmYWNlcygpLiAgVGhpcyBpcyBiZWNhdXNlXG5uZXR3b3JrSW50ZXJmYWNlIFwiUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBuZXR3b3JrIGludGVyZmFjZXMgdGhhdFxuaGF2ZSBiZWVuIGFzc2lnbmVkIGEgbmV0d29yayBhZGRyZXNzLlwiIGFuZCBnaWYwIGhhc24ndCBiZWVuLlxuKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudHNcIikpO1xuZnVuY3Rpb24gbmV0aWYoeyBwb3NpeCwgcmVjdiwgc2VuZCwgY2FsbEZ1bmN0aW9uIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBjaGFyICppZl9pbmRleHRvbmFtZSh1bnNpZ25lZCBpbnQgaWZpbmRleCwgY2hhciAqaWZuYW1lKTtcbiAgICAgICAgaWZfaW5kZXh0b25hbWU6IChpZmluZGV4LCBpZm5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWZfaW5kZXh0b25hbWUgfSA9IHBvc2l4O1xuICAgICAgICAgICAgaWYgKGlmX2luZGV4dG9uYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImlmX2luZGV4dG9uYW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGlmbmFtZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWZuYW1lID0gaWZfaW5kZXh0b25hbWUoaWZpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VuZC5zdHJpbmcoaWZuYW1lLCB7XG4gICAgICAgICAgICAgICAgcHRyOiBpZm5hbWVQdHIsXG4gICAgICAgICAgICAgICAgbGVuOiBjb25zdGFudHNfMS5kZWZhdWx0LklGTkFNU0laLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaWZuYW1lUHRyO1xuICAgICAgICB9LFxuICAgICAgICAvLyB1bnNpZ25lZCBpbnQgaWZfbmFtZXRvaW5kZXgoY29uc3QgY2hhciAqaWZuYW1lKTtcbiAgICAgICAgaWZfbmFtZXRvaW5kZXg6IChpZm5hbWVQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWZfbmFtZXRvaW5kZXggfSA9IHBvc2l4O1xuICAgICAgICAgICAgaWYgKGlmX25hbWV0b2luZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImlmX25hbWV0b2luZGV4XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaWZuYW1lID0gcmVjdi5zdHJpbmcoaWZuYW1lUHRyKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmX25hbWV0b2luZGV4KGlmbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2Vycikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpZl9uYW1laW5kZXg6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWZfbmFtZWluZGV4IH0gPSBwb3NpeDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGlmX25hbWVpbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHB0ciA9IGNhbGxGdW5jdGlvbihcImNyZWF0ZU5hbWVJbmRleEFycmF5XCIsIDApO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHRyID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwib3V0IG9mIG1lbW9yeVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHRyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuaSA9IGlmX25hbWVpbmRleCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHB0ciA9IGNhbGxGdW5jdGlvbihcImNyZWF0ZU5hbWVJbmRleEFycmF5XCIsIG5pLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHB0ciA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwib3V0IG9mIG1lbW9yeVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuaS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsRnVuY3Rpb24oXCJzZXROYW1lSW5kZXhFbGVtZW50XCIsIHB0ciwgaSwgbmlbaV1bMF0sIHNlbmQuc3RyaW5nKG5pW2ldWzFdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gcmV0ID0gMCBzaW5jZSBwb2ludGVyIGFuZCBudWxsIHBvaW50ZXIgaW5kaWNhdGVzIGVycm9yLlxuICAgICAgICAgICAgICAgIGVyci5yZXQgPSAwO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaWZfZnJlZW5hbWVpbmRleDogKHB0cikgPT4ge1xuICAgICAgICAgICAgY2FsbEZ1bmN0aW9uKFwiZnJlZU5hbWVJbmRleEFycmF5XCIsIHB0cik7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldGlmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0aWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuZnVuY3Rpb24gb3RoZXIoY29udGV4dCkge1xuICAgIGNvbnN0IHsgY2FsbEZ1bmN0aW9uLCBwb3NpeCwgcmVjdiwgc2VuZCwgd2FzaSB9ID0gY29udGV4dDtcbiAgICBjb250ZXh0LnN0YXRlLnVzZXJfZnJvbV91aWRfY2FjaGUgPSB7fTtcbiAgICBmdW5jdGlvbiBzZW5kU3RhdHZmcyhidWZQdHIsIHgpIHtcbiAgICAgICAgY2FsbEZ1bmN0aW9uKFwic2V0X3N0YXR2ZnNcIiwgYnVmUHRyLCB4LmZfYnNpemUsIHguZl9mcnNpemUsIEJpZ0ludCh4LmZfYmxvY2tzKSwgQmlnSW50KHguZl9iZnJlZSksIEJpZ0ludCh4LmZfYmF2YWlsKSwgQmlnSW50KHguZl9maWxlcyksIEJpZ0ludCh4LmZfZmZyZWUpLCBCaWdJbnQoeC5mX2ZhdmFpbCksIHguZl9mc2lkLCB4LmZfZmxhZywgeC5mX25hbWVtYXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWFsX2ZkKHZpcnR1YWxfZmQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHdhc2kuRkRfTUFQLmdldCh2aXJ0dWFsX2ZkKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLnJlYWw7XG4gICAgfVxuICAgIGNvbnN0IGxpYiA9IHtcbiAgICAgICAgc3lzbG9nOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInN5c2xvZ1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgbG9naW5fdHR5OiAoZmQpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5sb2dpbl90dHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwibG9naW5fdHR5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zaXgubG9naW5fdHR5KHJlYWxfZmQoZmQpKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBUT0RPOiB3b3JyeSBhYm91dCB2aXJ0dWFsIGZpbGVzeXN0ZW0gdGhhdCBXQVNJIHByb3ZpZGVzLFxuICAgICAgICAvLyB2ZXJzdXMgdGhpcyBqdXN0IGJlaW5nIHRoZSBzdHJhaWdodCByZWFsIG9uZT8hXG4gICAgICAgIC8vIGludCBzdGF0dmZzKGNvbnN0IGNoYXIgKnJlc3RyaWN0IHBhdGgsIHN0cnVjdCBzdGF0dmZzICpyZXN0cmljdCBidWYpO1xuICAgICAgICBzdGF0dmZzOiAocGF0aFB0ciwgYnVmUHRyKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguc3RhdHZmcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJzdGF0dmZzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgc2VuZFN0YXR2ZnMoYnVmUHRyLCBwb3NpeC5zdGF0dmZzKHBhdGgpKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICBpbnQgZnN0YXR2ZnMoaW50IGZkLCBzdHJ1Y3Qgc3RhdHZmcyAqYnVmKTtcbiAgICAgICAgZnN0YXR2ZnM6IChmZCwgYnVmUHRyKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguZnN0YXR2ZnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZnN0YXR2ZnNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZW5kU3RhdHZmcyhidWZQdHIsIHBvc2l4LmZzdGF0dmZzKHJlYWxfZmQoZmQpKSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgY3Rlcm1pZDogKHB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LmN0ZXJtaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiY3Rlcm1pZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwdHIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gcG9zaXguY3Rlcm1pZCgpO1xuICAgICAgICAgICAgICAgIHNlbmQuc3RyaW5nKHMsIHsgcHRyLCBsZW46IHMubGVuZ3RoICsgMSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbnRleHQuc3RhdGUuY3Rlcm1pZFB0cikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnN0YXRlLmN0ZXJtaWRQdHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzID0gcG9zaXguY3Rlcm1pZCgpO1xuICAgICAgICAgICAgcmV0dXJuIChjb250ZXh0LnN0YXRlLmN0ZXJtaWRQdHIgPSBzZW5kLnN0cmluZyhzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHBhc3N3b3JkIHN0dWZmXG4gICAgICAgIC8vIGludCBnZXRwd25hbV9yKGNvbnN0IGNoYXIgKm5hbWUsIHN0cnVjdCBwYXNzd2QgKnB3ZCwgY2hhciAqYnVmZmVyLCBzaXplX3QgYnVmc2l6ZSwgc3RydWN0IHBhc3N3ZCAqKnJlc3VsdCk7XG4gICAgICAgIGdldHB3bmFtX3I6IChfbmFtZVB0ciwgX3Bhc3N3ZFB0ciwgX2J1ZmZlclB0ciwgX2J1ZnNpemUsIHJlc3VsdF9wdHJfcHRyKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzIG1lYW5zIFwibm90IGZvdW5kXCIuXG4gICAgICAgICAgICBzZW5kLnBvaW50ZXIocmVzdWx0X3B0cl9wdHIsIDApO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHN0cnVjdCBwYXNzd2QgKmdldHB3dWlkKHVpZF90IHVpZCk7XG4gICAgICAgIGdldHB3dWlkOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub3QgZm91bmRcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgZ2V0cHd1aWRfcih1aWRfdCB1aWQsIHN0cnVjdCBwYXNzd2QgKnB3ZCwgY2hhciAqYnVmZmVyLFxuICAgICAgICAvLyBzaXplX3QgYnVmc2l6ZSwgc3RydWN0IHBhc3N3ZCAqKnJlc3VsdCk7XG4gICAgICAgIGdldHB3dWlkX3I6IChfdWlkLCBfcGFzc3dkUHRyLCBfYnVmZmVyUHRyLCBfYnVmc2l6ZSwgcmVzdWx0X3B0cl9wdHIpID0+IHtcbiAgICAgICAgICAgIHNlbmQucG9pbnRlcihyZXN1bHRfcHRyX3B0ciwgMCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgb3BlbnB0eTogKCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9PRDogcGxhbiB0byBkbyB0aGlzIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvbm9kZS1wdHksIGVpdGhlclxuICAgICAgICAgICAgLy8gdXNpbmcgdGhhdCBvciBqdXN0IGEgbGl0dGxlIGluc3BpcmVkIGJ5IGl0IHRvIGFkZCB0byBwb3NpeC1ub2RlLlxuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJvcGVucHR5XCIpO1xuICAgICAgICB9LFxuICAgICAgICBtc3luYzogKCkgPT4ge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBwYXJ0IG9mIG1tYXAuXG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcIm1zeW5jXCIpO1xuICAgICAgICB9LFxuICAgICAgICBtYWR2aXNlOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcIm1hZHZpc2VcIik7XG4gICAgICAgIH0sXG4gICAgICAgIG1yZW1hcDogKCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJtcmVtYXBcIik7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFRoZSBjdXJzZXMgY3B5dGhvbiBtb2R1bGUgd2FudHMgdGhpczpcbiAgICAgICAgLy8gRklMRSAqdG1wZmlsZSh2b2lkKTtcbiAgICAgICAgLyogfi90ZXN0L3RtcGZpbGUkIG1vcmUgYS5jXG4gICAgICAgICNpbmNsdWRlPHN0ZGlvLmg+XG4gICAgICAgIGludCBtYWluKCkge1xuICAgICAgICAgICBGSUxFKiBmID0gdG1wZmlsZSgpO1xuICAgICAgICAgICBwcmludGYoXCJmID0gJXBcXG5cIiwgZik7XG4gICAgICAgIH1cbiAgICAgICAgfi90ZXN0L3RtcGZpbGUkIHppZyBjYyAtdGFyZ2V0IHdhc20zMi13YXNpIC4vYS5jXG4gICAgICAgIC4vYS5jOjM6MTQ6IHdhcm5pbmc6ICd0bXBmaWxlJyBpcyBkZXByZWNhdGVkOiB0bXBmaWxlIGlzIG5vdCBkZWZpbmVkIG9uIFdBU0kgWy1XZGVwcmVjYXRlZC1kZWNsYXJhdGlvbnNdXG4gICAgICAgICovXG4gICAgICAgIHRtcGZpbGU6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwidG1wZmlsZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gY3Vyc2VzIGFsc28gd2FudHMgdGhpczpcbiAgICAgICAgLy8gaW50IHRjZmx1c2goaW50IGZpbGRlcywgaW50IGFjdGlvbik7XG4gICAgICAgIHRjZmx1c2g6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwidGNmbHVzaFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc3RydWN0IHBhc3N3ZCAqZ2V0cHduYW0oY29uc3QgY2hhciAqbG9naW4pO1xuICAgICAgICBnZXRwd25hbTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTVFVCOiBnZXRwd25hbVwiKTtcbiAgICAgICAgICAgIC8vIHJldHVybiAwIGluZGljYXRlcyBmYWlsdXJlXG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGdldHJsaW1pdChpbnQgcmVzb3VyY2UsIHN0cnVjdCBybGltaXQgKnJscCk7XG4gICAgICAgIGdldHJsaW1pdDogKCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJnZXRybGltaXRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIC8vICBpbnQgc2V0cmxpbWl0KGludCByZXNvdXJjZSwgY29uc3Qgc3RydWN0IHJsaW1pdCAqcmxwKTtcbiAgICAgICAgc2V0cmxpbWl0OiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNldHJsaW1pdFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbnVtcHkgd2FudHMgdGhpcyB0aGluZyB0aGF0IGNhbid0IGV4aXN0IGluIHdhc206XG4gICAgICAgIC8vIGludCBiYWNrdHJhY2Uodm9pZCoqIGFycmF5LCBpbnQgc2l6ZSk7XG4gICAgICAgIC8vIENvbW1lbnRpbmcgdGhpcyBvdXQgYW5kIGluc3RlYWQgcGF0Y2hpbmcgbnVtcHkgdG8gbm90IHRyeSB0byB1c2UgdGhpcywgc2luY2Ugd2VcbiAgICAgICAgLy8gaGF2ZSB0byBkbyB0aGF0IGFueXdheXMgdG8gZ2V0IGl0IHRvIGJ1aWxkIHdpdGggY2xhbmcxNS5cbiAgICAgICAgLy8gICAgIGJhY2t0cmFjZTogKCkgPT4ge1xuICAgICAgICAvLyAgICAgICBub3RJbXBsZW1lbnRlZChcImJhY2tncmFjZVwiKTtcbiAgICAgICAgLy8gICAgIH0sXG4gICAgICAgIC8vIFRoZXNlIGFyZSBmb3IgY29yZXV0aWxzLCBhbmQgd2UgY29tZSB1cCB3aXRoIGEgV2ViQXNzZW1ibHkgdmVyc2lvbixcbiAgICAgICAgLy8gd2hpY2ggaXMgdGhlIGRvY3VtZW50ZWQgZmFsbGJhY2suXG4gICAgICAgIC8vICAgICBjaGFyICogdXNlcl9mcm9tX3VpZCh1aWRfdCB1aWQsIGludCBub3VzZXIpO1xuICAgICAgICAvLyAgICAgY2hhciAqIGdyb3VwX2Zyb21fZ2lkKGdpZF90IGdpZCwgaW50IG5vZ3JvdXApO1xuICAgICAgICAvLyBUT0RPOiBmb3Igc3BlZWQgdGhpcyB3b3VsZCBiZSBiZXR0ZXIgYXQgdGhlIEMgbGV2ZWwuXG4gICAgICAgIHVzZXJfZnJvbV91aWQ6ICh1aWQsIG5vdXNlciA9IDApID0+IHtcbiAgICAgICAgICAgIGlmIChub3VzZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNhY2hlIHRoZSBwb2ludGVycyBmb3Igc3BlZWQgYW5kIHRvIHJlZHVjZSBtZW1vcnkgbGVha3NcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnN0YXRlLnVzZXJfZnJvbV91aWRfY2FjaGVbdWlkXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnN0YXRlLnVzZXJfZnJvbV91aWRfY2FjaGVbdWlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoY29udGV4dC5zdGF0ZS51c2VyX2Zyb21fdWlkX2NhY2hlW3VpZF0gPSBzZW5kLnN0cmluZyhgJHt1aWR9YCkpO1xuICAgICAgICB9LFxuICAgICAgICBncm91cF9mcm9tX2dpZDogKGdpZCwgbm9ncm91cCA9IDApID0+IHtcbiAgICAgICAgICAgIHJldHVybiBsaWIudXNlcl9mcm9tX3VpZChnaWQsIG5vZ3JvdXApO1xuICAgICAgICB9LFxuICAgICAgICAvLyBUT0RPIC0tIHNlZSBob3cgdGhpcyBpcyB1c2VkIGluIGNvZGUsIG9yIG1heWJlIG1ha2UgaXRcbiAgICAgICAgLy8gZG8gc29tZXRoaW5nIGxpa2UgXCIjZGVmaW5lIGdldHJ1c2FnZShBLEIpIG1lbXNldChCLDAsc2l6ZW9mKCpCKSlcIlxuICAgICAgICAvLyB0byBtYWtlIGV2ZXJ5dGhpbmcgMCwgYXMgYSBzdHViLlxuICAgICAgICAvLyAgaW50IGdldHJ1c2FnZShpbnQgd2hvLCBzdHJ1Y3QgcnVzYWdlICpyX3VzYWdlKTtcbiAgICAgICAgZ2V0cnVzYWdlOiAoX3dobywgX3JfdXNhZ2VfcHRyKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImdldHJ1c2FnZVwiKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIGxpYjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG90aGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3RoZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuRnVuY3Rpb25zIGZyb20gc2NoZWQuaC5cblxuVGhlc2UgYXJlIGFsbCB2ZXJ5IGhhcmQgdG8gaW1wbGVtZW50IHdpdGggbm9kZSwgd2l0aG91dCBqdXN0IHdyaXRpbmcgYSBub2RlIGV4dGVuc2lvblxubW9kdWxlIHdoaWNoIGlzIHdoYXQgSSdsbCBsaWtlbHkgaGF2ZSB0byBkby4uLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5mdW5jdGlvbiBzY2hlZCh7fSkge1xuICAgIGNvbnN0IG5hbWVzID0gXCJzY2hlZF9nZXRfcHJpb3JpdHlfbWF4IHNjaGVkX2dldF9wcmlvcml0eV9taW4gc2NoZWRfZ2V0cGFyYW0gc2NoZWRfZ2V0c2NoZWR1bGVyIHNjaGVkX3JyX2dldF9pbnRlcnZhbCBzY2hlZF9zZXRwYXJhbSBzY2hlZF9zZXRzY2hlZHVsZXJcIjtcbiAgICBjb25zdCBzY2hlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcy5zcGxpdCgvXFxzKy8pKSB7XG4gICAgICAgIHNjaGVkW25hbWVdID0gKCkgPT4gKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkobmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlZDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNjaGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuTk9URVM6XG5BIGtleSBmYWN0IGlzIHRoYXQgemlnIGRlZmluZXMgc2lnc2V0X3QgdG8gYmUgXCJ1bnNpZ25lZCBjaGFyXCIsIGluc3RlYWQgb2YgYSBtdWNoXG5tb3JlIHVzZWZ1bCBsYXJnZXIgc3RydWN0LiBUaHVzIHdlIG9ubHkgaGF2ZSA4IGJpdHMsIHNvIGNhbid0IHJlYWxseSByZXByZXNlbnRcbmFsbCB0aGUgc2lnbmFscy4gIFNvIGluc3RlYWQgd2UganVzdCB1c2UgdGhlIHBvaW50ZXIgYW5kIGEgaGlnaGVyIGxldmVsIEphdmFzY3JpcHRcblNldCBkYXRhIHN0cnVjdHVyZS4gIFNpbmNlIGFueSBub250cml2aWFsIHNpZ25hbCBmdW5jdGlvbmFsaXR5IGhhcyB0byBiZSBhdCB0aGVcbkphdmFzY3JpcHQgbGV2ZWwgYW55d2F5cywgdGhpcyBpcyBwcm9iYWJseSBqdXN0IGZpbmUuXG5cblRoZXkgc2F5IHRoaXMgaW4gdGhlIHppZyBzb3VyY2VzLCBhbmQganVzdCB3b3JyeWluZyBhYm91dCB0aGUgcG9pbnRlciBtYWtlcyB0aGluZ3NcbmFnbm9zdGljLlxuXG4vLyBUT0RPOiBUaGlzIGlzIGp1c3QgYSBwbGFjZWhvbGRlciBmb3Igbm93LiBLZWVwIHRoaXMgaW4gc3luYyB3aXRoIG11c2wuXG50eXBlZGVmIHVuc2lnbmVkIGNoYXIgc2lnc2V0X3Q7XG5cbk5PVEU6IGJlbG93IHdlIGltcGxlbWVudCBtb3JlIHRoYW4ganVzdCB3aGF0J3MgbmVlZGVkIGZvciBQeXRob24uICBUaGlzIG1heSBiZSBoZWxwZnVsXG5mb3Igb3RoZXIgbGlicmFyaWVzLlxuKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0U2lnbmFsU2V0ID0gZXhwb3J0cy5nZXRTaWduYWxTZXQgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudHNcIikpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IHNpZ25hbF90ID0ge307XG5mdW5jdGlvbiBnZXRTaWduYWxTZXQoc2V0UHRyKSB7XG4gICAgaWYgKHNpZ25hbF90W3NldFB0cl0gPT0gbnVsbCkge1xuICAgICAgICBzaWduYWxfdFtzZXRQdHJdID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmFsX3Rbc2V0UHRyXTtcbn1cbmV4cG9ydHMuZ2V0U2lnbmFsU2V0ID0gZ2V0U2lnbmFsU2V0O1xuZnVuY3Rpb24gc2V0U2lnbmFsU2V0KHNldFB0ciwgdmFsdWUpIHtcbiAgICBzaWduYWxfdFtzZXRQdHJdID0gdmFsdWU7XG59XG5leHBvcnRzLnNldFNpZ25hbFNldCA9IHNldFNpZ25hbFNldDtcbi8vIFRoZSBnbG9iYWwgc2lnbmFsIG1hc2sgZm9yIHRoaXMgcHJvY2Vzcy5cbmNvbnN0IHNpZ25hbE1hc2sgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBzZXRTaWduYWxTZXRUb01hc2soc2V0UHRyKSB7XG4gICAgY29uc3Qgc2V0ID0gZ2V0U2lnbmFsU2V0KHNldFB0cik7XG4gICAgc2V0LmNsZWFyKCk7XG4gICAgZm9yIChjb25zdCB4IG9mIHNpZ25hbE1hc2spIHtcbiAgICAgICAgc2V0LmFkZCh4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBzaWduYWwoeyBwcm9jZXNzIH0pIHtcbiAgICBjb25zdCBzaWduYWwgPSB7XG4gICAgICAgIC8vIGludCBraWxsKHBpZF90IHBpZCwgaW50IHNpZyk7XG4gICAgICAgIGtpbGw6IChwaWQsIHNpZ25hbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3Mua2lsbCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgcHJvY2Vzcy5raWxsKHBpZCwgc2lnbmFsKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIHRoZSBzaW5nbGUgdGhyZWFkZWQgdmVyc2lvbiFcbiAgICAgICAgLy8gaW50IHJhaXNlKGludCBzaWcpO1xuICAgICAgICAvLyBhY2NvcmRpbmcgdG8gbWFuIGlzIHNhbWUgYXMgXCJraWxsKGdldHBpZCgpLCBzaWcpO1wiIGZvciBzaW5nbGUgdGhyZWFkLlxuICAgICAgICByYWlzZTogKHNpZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ25hbC5raWxsKHByb2Nlc3MucGlkID8/IDEsIHNpZyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBraWxscGcoaW50IHBncnAsIGludCBzaWcpO1xuICAgICAgICBraWxscGc6IChwaWQsIHNpZ25hbCkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3Mua2lsbCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgcHJvY2Vzcy5raWxsKC1waWQsIHNpZ25hbCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHNpZ2VtcHR5c2V0KHNpZ3NldF90ICpzZXQpO1xuICAgICAgICBzaWdlbXB0eXNldDogKHNldFB0cikgPT4ge1xuICAgICAgICAgICAgZ2V0U2lnbmFsU2V0KHNldFB0cikuY2xlYXIoKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgc2lnZmlsbHNldChzaWdzZXRfdCAqc2V0KTtcbiAgICAgICAgc2lnZmlsbHNldDogKHNldFB0cikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2V0ID0gZ2V0U2lnbmFsU2V0KHNldFB0cik7XG4gICAgICAgICAgICBmb3IgKGxldCBzaWcgPSAxOyBzaWcgPD0gMzE7IHNpZysrKSB7XG4gICAgICAgICAgICAgICAgc2V0LmFkZChzaWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBzaWdmaWxsc2V0KHNpZ3NldF90ICpzZXQpO1xuICAgICAgICAvLyBpbnQgc2lnYWRkc2V0KHNpZ3NldF90ICpzZXQsIGludCBzaWdudW0pO1xuICAgICAgICBzaWdhZGRzZXQ6IChzZXRQdHIsIHNpZ251bSkgPT4ge1xuICAgICAgICAgICAgZ2V0U2lnbmFsU2V0KHNldFB0cikuYWRkKHNpZ251bSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHNpZ2RlbHNldChzaWdzZXRfdCAqc2V0LCBpbnQgc2lnbnVtKTtcbiAgICAgICAgc2lnZGVsc2V0OiAoc2V0UHRyLCBzaWdudW0pID0+IHtcbiAgICAgICAgICAgIGdldFNpZ25hbFNldChzZXRQdHIpLmRlbGV0ZShzaWdudW0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBzaWdpc21lbWJlcihjb25zdCBzaWdzZXRfdCAqc2V0LCBpbnQgc2lnbnVtKTtcbiAgICAgICAgc2lnaXNtZW1iZXI6IChzZXRQdHIsIHNpZ251bSkgPT4ge1xuICAgICAgICAgICAgaWYgKGdldFNpZ25hbFNldChzZXRQdHIpLmhhcyhzaWdudW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHNpZ3Byb2NtYXNrKGludCBob3csIGNvbnN0IHNpZ3NldF90ICpzZXQsIHNpZ3NldF90ICpvbGRzZXQpO1xuICAgICAgICAvLyBcInNpZ3Byb2NtYXNrKCkgaXMgdXNlZCB0byBmZXRjaCBhbmQvb3IgY2hhbmdlIHRoZSBzaWduYWwgbWFzayBvZlxuICAgICAgICAvLyB0aGUgY2FsbGluZyB0aHJlYWQuICBUaGUgc2lnbmFsIG1hc2sgaXMgdGhlIHNldCBvZiBzaWduYWxzIHdob3NlXG4gICAgICAgIC8vIGRlbGl2ZXJ5IGlzIGN1cnJlbnRseSBibG9ja2VkIGZvciB0aGUgY2FsbGVyLlwiXG4gICAgICAgIHNpZ3Byb2NtYXNrOiAoaG93LCBzZXRQdHIsIG9sZHNldFB0cikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNldFB0cilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2V0ID0gZ2V0U2lnbmFsU2V0KHNldFB0cik7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5kZWZhdWx0LlNJR19CTE9DSzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxNYXNrLmFkZChzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLmRlZmF1bHQuU0lHX1VOQkxPQ0s6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsTWFzay5kZWxldGUocyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5kZWZhdWx0LlNJR19TRVRNQVNLOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsTWFzay5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzIG9mIHNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbE1hc2suYWRkKHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgc2lncHJvY21hc2sgLSBpbnZhbGlkIGhvdz0ke2hvd31gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAob2xkc2V0UHRyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFNpZ25hbFNldFRvTWFzayhvbGRzZXRQdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHNpZ3N1c3BlbmQoY29uc3Qgc2lnc2V0X3QgKnNpZ21hc2spO1xuICAgICAgICBzaWdzdXNwZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNpZ3N1c3BlbmRcIik7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvLyBmb3Igc2luZ2xlIHRocmVhZGVkIHByb2dyYW1zLCB0aGVzZSBhcmUgdGhlIHNhbWU6XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHNpZ25hbC5wdGhyZWFkX3NpZ21hc2sgPSBzaWduYWwuc2lncHJvY21hc2s7XG4gICAgcmV0dXJuIHNpZ25hbDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNpZ25hbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm5vXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZXJybm9cIikpO1xuY29uc3QgbmV0ZGJfMSA9IHJlcXVpcmUoXCIuL25ldGRiXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpKTtcbmNvbnN0IHdhc2lfanNfMSA9IHJlcXVpcmUoXCJ3YXNpLWpzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmZ1bmN0aW9uIHNvY2tldCh7IGNhbGxGdW5jdGlvbiwgcG9zaXgsIHJlY3YsIHdhc2kgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNvY2tldChmYW1pbHksIHNvY2t0eXBlLCBwcm90b2NvbCkge1xuICAgICAgICAgICAgLy8gKiogTk9URSAqKiAtLSB3ZSBleHBsaWNpdGx5IGRpc2FibGUgc29ja2V0IHZpIHRoZSBcInRydWVcIiBiZWxvd1xuICAgICAgICAgICAgLy8gdW50aWwgZXZlcnl0aGluZyBpcyBpbXBsZW1lbnRlZC4gIE90aGVyd2lzZSB0aGUgdGVzdCBzdWl0ZVxuICAgICAgICAgICAgLy8gYW5kIGluc3RhbGxpbmcgcGlwIGFuZCBtYW55IG90aGVyIHRoaW5ncyBicmVhayBoYWxmLXdheSB0aHJvdWdoLlxuICAgICAgICAgICAgLy8gUmUtZW5hYmxlIHRoaXMgd2hlbiBmaW5zaWhpbmcgdGhpcyB1cC5cbiAgICAgICAgICAgIGlmICh0cnVlIHx8IHBvc2l4LnNvY2tldCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIGVycm5vXzEuZGVmYXVsdCkoXCJFTk9UU1VQXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmFtaWx5TmF0aXZlID0gKDAsIG5ldGRiXzEud2FzbVRvTmF0aXZlRmFtaWx5KShwb3NpeCwgZmFtaWx5KTtcbiAgICAgICAgICAgIGxldCBpbmhlcml0YWJsZTtcbiAgICAgICAgICAgIGlmIChjb25zdGFudHNfMS5kZWZhdWx0LlNPQ0tfQ0xPRVhFQyAmIHNvY2t0eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gU09DS19DTE9FWEVDIGlzIGRlZmluZWQgb24gTGludXggYW5kIFdBU0kgKHdlaXJkbHkpIGJ1dCBub3QgTWFjT1MsXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgbWFudWFsbHkgaW1wbGVtZW50IGl0IHRvIGF2b2lkIHdlaXJkIGhhY2tzIGluIEMgY29kZS5cbiAgICAgICAgICAgICAgICBzb2NrdHlwZSAmPSB+Y29uc3RhbnRzXzEuZGVmYXVsdC5TT0NLX0NMT0VYRUM7IC8vIHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgIGluaGVyaXRhYmxlID0gZmFsc2U7IC8vIGJlbG93IHdlIHdpbGwgZG8gd2hhdCBTT0NLX0NMT0VYRUMgd291bGQgZG8gbWFudWFsbHkuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmhlcml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpbmhlcml0YWJsZSk7XG4gICAgICAgICAgICBjb25zdCBzb2NrdHlwZU5hdGl2ZSA9ICgwLCBuZXRkYl8xLndhc21Ub05hdGl2ZVNvY2t0eXBlKShwb3NpeCwgc29ja3R5cGUpO1xuICAgICAgICAgICAgLy8gVE9ETz8gSSBkb24ndCBrbm93IGhvdyB0byB0cmFuc2xhdGUgdGhpcyBvciBpZiBpdCBpcyBuZWNlc3NhcnkuXG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbE5hdGl2ZSA9IHByb3RvY29sO1xuICAgICAgICAgICAgY29uc3QgcmVhbF9mZCA9IHBvc2l4LnNvY2tldChmYW1pbHlOYXRpdmUsIHNvY2t0eXBlTmF0aXZlLCBwcm90b2NvbE5hdGl2ZSk7XG4gICAgICAgICAgICAvLyAgICAgICBpZiAoIWluaGVyaXRhYmxlKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIHBvc2l4LnNldF9pbmhlcml0YWJsZShyZWFsX2ZkLCBpbmhlcml0YWJsZSk7XG4gICAgICAgICAgICAvLyAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB3YXNpX2ZkID0gd2FzaS5nZXRVbnVzZWRGaWxlRGVzY3JpcHRvcigpO1xuICAgICAgICAgICAgY29uc3QgU1RESU4gPSB3YXNpLkZEX01BUC5nZXQoMCk7XG4gICAgICAgICAgICB3YXNpLkZEX01BUC5zZXQod2FzaV9mZCwge1xuICAgICAgICAgICAgICAgIHJlYWw6IHJlYWxfZmQsXG4gICAgICAgICAgICAgICAgcmlnaHRzOiBTVERJTi5yaWdodHMsXG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IHdhc2lfanNfMS5jb25zdGFudHMuV0FTSV9GSUxFVFlQRV9TT0NLRVRfU1RSRUFNLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gd2FzaV9mZDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGJpbmQoaW50IHNvY2tldCwgY29uc3Qgc3RydWN0IHNvY2thZGRyICphZGRyZXNzLCBzb2NrbGVuX3QgYWRkcmVzc19sZW4pO1xuICAgICAgICBiaW5kKHNvY2tldCwgc29ja2FkZHJQdHIsIGFkZHJlc3NfbGVuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImJpbmQgc3R1YiBcIiwgeyBzb2NrZXQsIHNvY2thZGRyUHRyLCBhZGRyZXNzX2xlbiB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNhX2ZhbWlseSA9IGNhbGxGdW5jdGlvbihcInJlY3Zfc29ja2FkZHJfc2FfZmFtaWx5XCIsIHNvY2thZGRyUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IHNhX2RhdGEgPSByZWN2LmJ1ZmZlcihjYWxsRnVuY3Rpb24oXCJyZWN2X3NvY2thZGRyX3NhX2RhdGFcIiwgc29ja2FkZHJQdHIpLCBhZGRyZXNzX2xlbiAtIDIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coe1xuICAgICAgICAgICAgICAgIHNhX2ZhbWlseSxcbiAgICAgICAgICAgICAgICBzYV9kYXRhOiBzYV9kYXRhLnRvU3RyaW5nKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2FfZGF0YSA9IFwiLCBuZXcgVWludDhBcnJheShzYV9kYXRhKSk7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImJpbmRcIik7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG4gICAgICAgIGludCBnZXRzb2NrbmFtZShpbnQgc29ja2V0LCBzdHJ1Y3Qgc29ja2FkZHIgKmFkZHJlc3MsXG4gICAgICAgICAgICAgc29ja2xlbl90ICphZGRyZXNzX2xlbik7XG4gICAgICAgICovXG4gICAgICAgIGdldHNvY2tuYW1lKHNvY2tldCwgc29ja2FkZHJQdHIsIGFkZHJlc3NMZW5QdHIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZ2V0c29ja25hbWUgc3R1YiBcIiwgeyBzb2NrZXQsIHNvY2thZGRyUHRyLCBhZGRyZXNzTGVuUHRyIH0pO1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJnZXRzb2NrbmFtZVwiKTtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSxcbiAgICAgICAgY29ubmVjdChzb2NrZXQsIHNvY2thZGRyUHRyLCBhZGRyZXNzX2xlbikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0IHN0dWIgXCIsIHsgc29ja2V0LCBzb2NrYWRkclB0ciwgYWRkcmVzc19sZW4gfSk7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImNvbm5lY3RcIik7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNvY2tldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvY2tldC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5JIGRvIGludGVuZCB0byBpbXBsZW1lbnQgYWxsIHRoZSBzcGF3biBzeXN0ZW0gY2FsbHMgdXNpbmcgbm9kZS5qcyBhdCBzb21lIHBvaW50LCBzbyB0aGF0IHB5dGhvbi13YXNtIG9uIG5vZGVqcyBpc1xuYWJsZSB0byBjcmVhdGUgYW5kIHVzZSBzdWJwcm9jZXNzZXMsIGF0IGxlYXN0IHdoZW4gaW4gYW4gaW5zZWN1cmUgbW9kZS4gICBJbiB0aGUgYnJvd3NlciwgaXQgY291bGQgYWxzbyBjcmVhdGVcbm90aGVyIHdlYmFzc2VtYmx5IHdvcmtlcnMgZm9yIGEgcmVzdHJpY3RlZCBjb2xsZWN0aW9uIG9mIFwiY29tbWFuZHNcIi4gIEhvd2V2ZXIsIGZvciBub3csIHRoZXNlIHNoYWxsIGFsbCB0aHJvd1xuYW4gZXJyb3IuXG5cblNFRSBmb3JrLWV4ZWMudHMgYW5kIHBvc2l4LWNvbnRleHQudHMgZm9yIHBhcnRpYWwgc29sdXRpb25zIHRvIHRoZSBhYm92ZSBmb3IgdGhlIGZvcmsvZXhlYyBwYXR0ZXJuIVxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jb25zdCBzaWduYWxfMSA9IHJlcXVpcmUoXCIuL3NpZ25hbFwiKTtcbmZ1bmN0aW9uIHNwYXduKGNvbnRleHQpIHtcbiAgICBjb25zdCB7IGNhbGxGdW5jdGlvbiwgcG9zaXgsIHJlY3YsIHNlbmQgfSA9IGNvbnRleHQ7XG4gICAgZnVuY3Rpb24gZ2V0RmlsZUFjdGlvbnMoKSB7XG4gICAgICAgIGlmIChjb250ZXh0LnN0YXRlLmZpbGVBY3Rpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc3RhdGUuc3Bhd25fZmlsZUFjdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC5zdGF0ZS5zcGF3bl9maWxlQWN0aW9ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QXR0cnMoKSB7XG4gICAgICAgIGlmIChjb250ZXh0LnN0YXRlLnNwYXduX2F0dHJzID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRleHQuc3RhdGUuc3Bhd25fYXR0cnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGV4dC5zdGF0ZS5zcGF3bl9hdHRycztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QXR0cihwdHIsIGV4cGFuZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gZ2V0QXR0cnMoKTtcbiAgICAgICAgaWYgKGF0dHJzW3B0cl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIChhdHRyc1twdHJdID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHIgPSBhdHRyc1twdHJdO1xuICAgICAgICBpZiAoYXR0ciAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIuc2lnZGVmYXVsdFB0ciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHIuc2lnZGVmYXVsdCA9ICgwLCBzaWduYWxfMS5nZXRTaWduYWxTZXQpKGF0dHIuc2lnZGVmYXVsdFB0cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhdHRyLnNpZ21hc2tQdHIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRyLnNpZ21hc2sgPSAoMCwgc2lnbmFsXzEuZ2V0U2lnbmFsU2V0KShhdHRyLnNpZ21hc2tQdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhdHRyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJidWdcIik7IC8vIGltcG9zc2libGVcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfc2V0c2NoZWRwYXJhbTogKGF0dHJQdHIsIHNjaGVkcGFyYW1QdHIpID0+IHtcbiAgICAgICAgICAgIGdldEF0dHIoYXR0clB0cikuc2NoZWRwYXJhbSA9IHtcbiAgICAgICAgICAgICAgICBzY2hlZF9wcmlvcml0eTogY2FsbEZ1bmN0aW9uKFwiZ2V0X3Bvc2l4X3NwYXduYXR0cl9zY2hlZHBhcmFtX3NjaGVkX3ByaW9yaXR5XCIsIHNjaGVkcGFyYW1QdHIpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfZ2V0c2NoZWRwYXJhbTogKGF0dHJQdHIsIHNjaGVkcGFyYW1QdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVkX3ByaW9yaXR5ID0gZ2V0QXR0cihhdHRyUHRyKS5zY2hlZHBhcmFtID8/IDA7XG4gICAgICAgICAgICBjYWxsRnVuY3Rpb24oXCJzZXRfcG9zaXhfc3Bhd25hdHRyX3NjaGVkcGFyYW1fc2NoZWRfcHJpb3JpdHlcIiwgc2NoZWRwYXJhbVB0ciwgc2NoZWRfcHJpb3JpdHkpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduYXR0cl9zZXRzY2hlZHBvbGljeTogKGF0dHJQdHIsIHNjaGVkcG9saWN5KSA9PiB7XG4gICAgICAgICAgICBnZXRBdHRyKGF0dHJQdHIpLnNjaGVkcG9saWN5ID0gc2NoZWRwb2xpY3k7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXhfc3Bhd25hdHRyX2dldHNjaGVkcG9saWN5OiAoYXR0clB0ciwgc2NoZWRwb2xpY3lQdHIpID0+IHtcbiAgICAgICAgICAgIHNlbmQuaTMyKHNjaGVkcG9saWN5UHRyLCBnZXRBdHRyKGF0dHJQdHIpLnNjaGVkcG9saWN5ID8/IDApO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduYXR0cl9pbml0OiAoYXR0clB0cikgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXR0cnMgPSBnZXRBdHRycygpO1xuICAgICAgICAgICAgYXR0cnNbYXR0clB0cl0gPSB7fTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfZGVzdHJveTogKGF0dHJQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gZ2V0QXR0cnMoKTtcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRyc1thdHRyUHRyXTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfc2V0ZmxhZ3M6IChhdHRyUHRyLCBmbGFncykgPT4ge1xuICAgICAgICAgICAgZ2V0QXR0cihhdHRyUHRyKS5mbGFncyA9IGZsYWdzO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduYXR0cl9nZXRmbGFnczogKGF0dHJQdHIsIGZsYWdzUHRyKSA9PiB7XG4gICAgICAgICAgICBzZW5kLmkzMihmbGFnc1B0ciwgZ2V0QXR0cihhdHRyUHRyKS5mbGFncyA/PyAwKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfc2V0cGdyb3VwOiAoYXR0clB0ciwgcGdyb3VwKSA9PiB7XG4gICAgICAgICAgICBnZXRBdHRyKGF0dHJQdHIpLnBncm91cCA9IHBncm91cDtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfZ2V0cGdyb3VwOiAoYXR0clB0ciwgcGdyb3VwUHRyKSA9PiB7XG4gICAgICAgICAgICBzZW5kLmkzMihwZ3JvdXBQdHIsIGdldEF0dHIoYXR0clB0cikucGdyb3VwID8/IDApO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduYXR0cl9zZXRzaWdtYXNrOiAoYXR0clB0ciwgc2lnbWFza1B0cikgPT4ge1xuICAgICAgICAgICAgZ2V0QXR0cihhdHRyUHRyKS5zaWdtYXNrUHRyID0gc2lnbWFza1B0cjtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfZ2V0c2lnbWFzazogKGF0dHJQdHIsIHNpZ21hc2tQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1ciA9IGdldEF0dHIoYXR0clB0cikuc2lnbWFza1B0cjtcbiAgICAgICAgICAgICgwLCBzaWduYWxfMS5zZXRTaWduYWxTZXQpKHNpZ21hc2tQdHIsICgwLCBzaWduYWxfMS5nZXRTaWduYWxTZXQpKGN1cikpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduYXR0cl9zZXRzaWdkZWZhdWx0OiAoYXR0clB0ciwgc2lnZGVmYXVsdFB0cikgPT4ge1xuICAgICAgICAgICAgZ2V0QXR0cihhdHRyUHRyKS5zaWdkZWZhdWx0UHRyID0gc2lnZGVmYXVsdFB0cjtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bmF0dHJfZ2V0c2lnZGVmYXVsdDogKGF0dHJQdHIsIHNpZ2RlZmF1bHRQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1ciA9IGdldEF0dHIoYXR0clB0cikuc2lnZGVmYXVsdFB0cjtcbiAgICAgICAgICAgICgwLCBzaWduYWxfMS5zZXRTaWduYWxTZXQpKHNpZ2RlZmF1bHRQdHIsICgwLCBzaWduYWxfMS5nZXRTaWduYWxTZXQpKGN1cikpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l4X3NwYXduOiAocGlkUHRyLCBwYXRoUHRyLCBmaWxlQWN0aW9uc1B0ciwgYXR0clB0ciwgYXJndlB0ciwgZW52cFB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnBvc2l4X3NwYXduID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInBvc2l4X3NwYXduXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgY29uc3QgYXJndiA9IHJlY3YuYXJyYXlPZlN0cmluZ3MoYXJndlB0cik7XG4gICAgICAgICAgICBjb25zdCBlbnZwID0gcmVjdi5hcnJheU9mU3RyaW5ncyhlbnZwUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gZ2V0RmlsZUFjdGlvbnMoKTtcbiAgICAgICAgICAgIGNvbnN0IHBpZCA9IHBvc2l4LnBvc2l4X3NwYXduKHBhdGgsIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXSwgZ2V0QXR0cihhdHRyUHRyLCB0cnVlKSwgYXJndiwgZW52cCk7XG4gICAgICAgICAgICBzZW5kLmkzMihwaWRQdHIsIHBpZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXhfc3Bhd25wOiAocGlkUHRyLCBwYXRoUHRyLCBmaWxlQWN0aW9uc1B0ciwgYXR0clB0ciwgYXJndlB0ciwgZW52cFB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnBvc2l4X3NwYXducCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJwb3NpeF9zcGF3bnBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcmVjdi5zdHJpbmcocGF0aFB0cik7XG4gICAgICAgICAgICBjb25zdCBhcmd2ID0gcmVjdi5hcnJheU9mU3RyaW5ncyhhcmd2UHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGVudnAgPSByZWN2LmFycmF5T2ZTdHJpbmdzKGVudnBQdHIpO1xuICAgICAgICAgICAgY29uc3QgZmlsZUFjdGlvbnMgPSBnZXRGaWxlQWN0aW9ucygpO1xuICAgICAgICAgICAgY29uc3QgcGlkID0gcG9zaXgucG9zaXhfc3Bhd25wKHBhdGgsIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXSwgZ2V0QXR0cihhdHRyUHRyLCB0cnVlKSwgYXJndiwgZW52cCk7XG4gICAgICAgICAgICBzZW5kLmkzMihwaWRQdHIsIHBpZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXhfc3Bhd25fZmlsZV9hY3Rpb25zX2luaXQ6IChmaWxlQWN0aW9uc1B0cikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZUFjdGlvbnMgPSBnZXRGaWxlQWN0aW9ucygpO1xuICAgICAgICAgICAgZmlsZUFjdGlvbnNbZmlsZUFjdGlvbnNQdHJdID0gW107XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXhfc3Bhd25fZmlsZV9hY3Rpb25zX2Rlc3Ryb3k6IChmaWxlQWN0aW9uc1B0cikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmlsZUFjdGlvbnMgPSBnZXRGaWxlQWN0aW9ucygpO1xuICAgICAgICAgICAgZGVsZXRlIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bl9maWxlX2FjdGlvbnNfYWRkY2xvc2U6IChmaWxlQWN0aW9uc1B0ciwgZmQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gZ2V0RmlsZUFjdGlvbnMoKTtcbiAgICAgICAgICAgIGlmIChmaWxlQWN0aW9uc1tmaWxlQWN0aW9uc1B0cl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZUFjdGlvbnNbZmlsZUFjdGlvbnNQdHJdLnB1c2goW1wiYWRkY2xvc2VcIiwgZmRdKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bl9maWxlX2FjdGlvbnNfYWRkb3BlbjogKGZpbGVBY3Rpb25zUHRyLCBmZCwgcGF0aFB0ciwgb2ZsYWcsIG1vZGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVBY3Rpb25zID0gZ2V0RmlsZUFjdGlvbnMoKTtcbiAgICAgICAgICAgIGlmIChmaWxlQWN0aW9uc1tmaWxlQWN0aW9uc1B0cl0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgZmlsZUFjdGlvbnNbZmlsZUFjdGlvbnNQdHJdLnB1c2goW1wiYWRkb3BlblwiLCBmZCwgcGF0aCwgb2ZsYWcsIG1vZGVdKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwb3NpeF9zcGF3bl9maWxlX2FjdGlvbnNfYWRkZHVwMjogKGZpbGVBY3Rpb25zUHRyLCBmZCwgbmV3X2ZkKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlQWN0aW9ucyA9IGdldEZpbGVBY3Rpb25zKCk7XG4gICAgICAgICAgICBpZiAoZmlsZUFjdGlvbnNbZmlsZUFjdGlvbnNQdHJdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmaWxlQWN0aW9uc1tmaWxlQWN0aW9uc1B0cl0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbGVBY3Rpb25zW2ZpbGVBY3Rpb25zUHRyXS5wdXNoKFtcImFkZGR1cDJcIiwgZmQsIG5ld19mZF0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNwYXduO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bhd24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXRoXzEgPSByZXF1aXJlKFwicGF0aFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5jb25zdCBlcnJub18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Vycm5vXCIpKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5mdW5jdGlvbiBzdGF0cyh7IGZzLCBwcm9jZXNzLCByZWN2LCB3YXNpIH0pIHtcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVBdChkaXJmZCwgcGF0aCwgYWxsb3dFbXB0eSA9IGZhbHNlKSB7XG4gICAgICAgIGlmICgoMCwgcGF0aF8xLmlzQWJzb2x1dGUpKFwicGF0aFwiKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRpcjtcbiAgICAgICAgaWYgKGRpcmZkID09IGNvbnN0YW50c18xLmRlZmF1bHQuQVRfRkRDV0QpIHtcbiAgICAgICAgICAgIGRpciA9IHByb2Nlc3MuY3dkPy4oKSA/PyBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0IGlzIGEgZmlsZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHdhc2kuRkRfTUFQLmdldChkaXJmZCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIGVycm5vXzEuZGVmYXVsdCkoXCJFQkFERlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpciA9IGVudHJ5LnBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGlmICghYWxsb3dFbXB0eSkge1xuICAgICAgICAgICAgICAgIHRocm93ICgwLCBlcnJub18xLmRlZmF1bHQpKFwiRU5PRU5UXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHBhdGhfMS5qb2luKShkaXIsIHBhdGgpO1xuICAgIH1cbiAgICAvLyBiZWNhdXNlIHdhc2kncyBzdHJ1Y3RzIGRvbid0IGhhdmUgc3VmZmljaWVudCBpbmZvIHRvIGRlYWwgd2l0aCBwZXJtaXNzaW9ucywgd2UgbWFrZSBBTEwgb2YgdGhlc2VcbiAgICAvLyBjaG1vZHMgaW50byBzdHVicywgYmVsb3csIGRlc3BpdGUgaGF2aW5nIGltcGxlbWVudGVkIHRoZW0hXG4gICAgLy8gVGhpcyBpbiBwYXJ0aWN1bGFyIHRvdGFsbHkgYnJva2UgbGliZ2l0MiB3b3JraW5nIGF0IGFsbC5cbiAgICAvLyBUT0RPOiBhbiBhbHRlcm5hdGl2ZSBtYXkgYmUgdG8gYWx3YXlzIHNldCB0aGUgbW9kZSB0byAwNzc3LiAgSSdtIG5vdCBzdXJlIGhvdyBiYWQgdGhhdCB3b3VsZCBiZS5cbiAgICByZXR1cm4ge1xuICAgICAgICBjaG1vZDogKHBhdGhQdHIsIG1vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBzdHViYmVkIGR1ZSB0byB3YXNpIHNob3J0Y29taW5nc1xuICAgICAgICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSBmb3Igc3RhdCBjYWxscyBieSB3YXNpIHRvIHJldHVybiBhbnl0aGluZyBleGNlcHQgMCBhdCBwcmVzZW50IGR1ZSB0byB0aGlzIGJ1ZzpcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1dlYkFzc2VtYmx5L3dhc2ktZmlsZXN5c3RlbS9pc3N1ZXMvMzRcbiAgICAgICAgICAgICAgICAvLyBUaHVzIHRoZXkgd2lsbCBvZnRlbiB0aGVuIHNldCB0aGUgbW9kZSB0byAwLCBlLmcuLCBzaHV0aWwuY29weSBpbiBweXRob24gZG9lcyB0aGlzIHRvIGFsbCBmaWxlcy5cbiAgICAgICAgICAgICAgICAvLyBJbiBzdWNoIGNhc2VzLCB3ZSBzaWxlbnRseSBtYWtlIHRoaXMgYSBzdWNjZXNzZnVsIG5vLW9wIGluc3RlYWQgb2YgYnJlYWtpbmcgZXZlcnl0aGluZyBob3JyaWJseS5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGNvbWVzIHVwIGEgbG90IHdpdGggdXNpbmcgUHl0aG9uIGFzIHBhcnQgb2YgYSBidWlsZCBwcm9jZXNzLlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgZnMuY2htb2RTeW5jKHBhdGgsIG1vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIF9mY2htb2Q6IChmZCwgbW9kZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHN0dWJiZWQgZHVlIHRvIHdhc2kgc2hvcnRjb21pbmdzXG4gICAgICAgICAgICBpZiAoIW1vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyBzZWUgYWJvdmUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHdhc2kuRkRfTUFQLmdldChmZCk7XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiYmFkIGZpbGUgZGVzY3JpcHRvciwgZmNobW9kXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZzLmZjaG1vZFN5bmMoZW50cnkucmVhbCwgbW9kZSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGZjaG1vZGF0KGludCBkaXJmZCwgY29uc3QgY2hhciAqcGF0aG5hbWUsIG1vZGVfdCBtb2RlLCBpbnQgZmxhZ3MpO1xuICAgICAgICBmY2htb2RhdDogKGRpcmZkLCBwYXRoUHRyLCBtb2RlLCBfZmxhZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBzdHViYmVkIGR1ZSB0byB3YXNpIHNob3J0Y29taW5nc1xuICAgICAgICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VlIGFib3ZlLlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLyogXCJUaGUgZmNobW9kYXQoKSBzeXN0ZW0gY2FsbCBvcGVyYXRlcyBpbiBleGFjdGx5IHRoZSBzYW1lIHdheSBhcyBjaG1vZCgyKSwgZXhjZXB0Li4uIElmIHRoZVxuICAgICAgICAgICAgcGF0aG5hbWUgZ2l2ZW4gaW4gcGF0aG5hbWUgaXMgcmVsYXRpdmUsIHRoZW4gaXQgaXMgaW50ZXJwcmV0ZWQgcmVsYXRpdmUgdG8gdGhlIGRpcmVjdG9yeSByZWZlcnJlZFxuICAgICAgICAgICAgdG8gYnkgdGhlIGZpbGUgZGVzY3JpcHRvciBkaXJmZCAocmF0aGVyIHRoYW4gcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3Rvcnkgb2YgdGhlXG4gICAgICAgICAgICBjYWxsaW5nIHByb2Nlc3MsIGFzIGlzIGRvbmUgYnkgY2htb2QoMikgZm9yIGEgcmVsYXRpdmUgcGF0aG5hbWUpLiAgSWYgcGF0aG5hbWUgaXMgcmVsYXRpdmUgYW5kXG4gICAgICAgICAgICBkaXJmZCBpcyB0aGUgc3BlY2lhbCB2YWx1ZSBBVF9GRENXRCwgdGhlbiBwYXRobmFtZSBpcyBpbnRlcnByZXRlZCByZWxhdGl2ZSB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAgd29ya2luZyBkaXJlY3Rvcnkgb2YgdGhlIGNhbGxpbmcgcHJvY2VzcyAobGlrZSBjaG1vZCgyKSkuIElmIHBhdGhuYW1lIGlzIGFic29sdXRlLCB0aGVuIGRpcmZkXG4gICAgICAgICAgICBpcyBpZ25vcmVkLiAgVGhpcyBmbGFnIGlzIG5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXCJcbiAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSByZWN2LnN0cmluZyhwYXRoUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhBdCA9IGNhbGN1bGF0ZUF0KGRpcmZkLCBwYXRoKTtcbiAgICAgICAgICAgIGZzLmNobW9kU3luYyhwYXRoQXQsIG1vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIGxjaG1vZDogKHBhdGhQdHIsIG1vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyBzdHViYmVkIGR1ZSB0byB3YXNpIHNob3J0Y29taW5nc1xuICAgICAgICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VlIGFib3ZlLlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgZnMubGNobW9kU3luYyhwYXRoLCBtb2RlKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBtb2RlX3QgdW1hc2sobW9kZV90IG1hc2spO1xuICAgICAgICB1bWFzazogKG1hc2spID0+IHtcbiAgICAgICAgICAgIC8vIHdlIHJldHVybiAxOCB3aGVuIHRoZXJlJ3Mgbm8gcHJvY2Vzcy51bWFzayBmdW5jdGlvbiwgc2luY2UgdGhhdCdzXG4gICAgICAgICAgICAvLyBsaWtlIHVtYXNrIDAyMiwgaS5lLiwgaXQncyBhIHJlYXNvbmFibGUgZGVmYXVsdC5cbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLnVtYXNrPy4obWFzaykgPz8gMTg7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIG5vdCBpbiB3YXNpIGFuZCB3ZSBoYXZlbid0IGRvbmUgaXQgeWV0Li4uXG4gICAgICAgIG1rZmlmbzogKCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJta2ZpZm9cIik7XG4gICAgICAgIH0sXG4gICAgICAgIG1rbm9kOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcIm1rbm9kXCIpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBzdGF0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBzdGRpbyhjb250ZXh0KSB7XG4gICAgY29uc3QgeyBmcywgc2VuZCB9ID0gY29udGV4dDtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKiBjaGFyICp0bXBuYW0oY2hhciAqcyk7XG4gICAgXG4gICAgICAgIExpbnV4IG1hbnBhZ2UgaXMgZnVubnkgYW5kIGNsZWFyOlxuICAgIFxuICAgIFRoZSB0bXBuYW0oKSBmdW5jdGlvbiByZXR1cm5zIGEgcG9pbnRlciB0byBhIHN0cmluZyB0aGF0IGlzIGEgdmFsaWQgZmlsZW5hbWUsXG4gICAgYW5kIHN1Y2ggdGhhdCBhIGZpbGUgd2l0aCB0aGlzIG5hbWUgZGlkIG5vdCBleGlzdCBhdCBzb21lIHBvaW50IGluIHRpbWUsIHNvIHRoYXRcbiAgICBuYWl2ZSBwcm9ncmFtbWVycyBtYXkgdGhpbmsgaXQgYSBzdWl0YWJsZSBuYW1lIGZvciBhIHRlbXBvcmFyeSBmaWxlLiBJZiB0aGVcbiAgICBhcmd1bWVudCBzIGlzIE5VTEwsIHRoaXMgbmFtZSBpcyBnZW5lcmF0ZWQgaW4gYW4gaW50ZXJuYWwgc3RhdGljIGJ1ZmZlciBhbmQgbWF5XG4gICAgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG5leHQgY2FsbCB0byB0bXBuYW0oKS4gICBJZiBzIGlzIG5vdCBOVUxMLCB0aGUgbmFtZSBpcyBjb3BpZWQgdG9cbiAgICB0aGUgY2hhcmFjdGVyIGFycmF5IChvZiBsZW5ndGggYXQgbGVhc3QgTF90bXBuYW0pIHBvaW50ZWQgdG8gYnkgcyBhbmQgdGhlIHZhbHVlIHNcbiAgICBpcyByZXR1cm5lZCBpbiBjYXNlIG9mIHN1Y2Nlc3MuXG4gICAgICAgICovXG4gICAgICAgIHRtcG5hbShzUHRyKSB7XG4gICAgICAgICAgICBsZXQgcyA9IFwiL3RtcC90bXBuYW1fXCI7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDA7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuYW1lID0gcztcbiAgICAgICAgICAgICAgICAvLyB2ZXJ5IG5haXZlLCBidXQgV0FTTSBpcyBhIHNpbmdsZSB1c2VyIFZNIHNvIGEgbG90IG9mIHNlY3VyaXR5IGlzc3VlcyBkaXNhcHBlYXJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDY7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBuYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBNYXRoLmZsb29yKDI2ICogTWF0aC5yYW5kb20oKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNQdHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQuc3RyaW5nKG5hbWUsIHsgcHRyOiBzUHRyLCBsZW46IDIwIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNQdHI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRleHQuc3RhdGUudG1wbmFtX2J1Zikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3RhdGUudG1wbmFtX2J1ZiA9IHNlbmQubWFsbG9jKDIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmQuc3RyaW5nKG5hbWUsIHsgcHRyOiBjb250ZXh0LnN0YXRlLnRtcG5hbV9idWYsIGxlbjogMjAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5zdGF0ZS50bXBuYW1fYnVmO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIC8qXG4gICAgICAgIFN0dWJzIGZvciBwb3BlbiBhbmQgcGNsb3NlIHRoYXQgdGhyb3cgYW4gZXJyb3IuIEkgdGhpbmsgdGhlc2Ugd291bGQgYmUga2luZCBvZiBpbXBvc3NpYmxlXG4gICAgICAgIHRvIGRvIGluIFdBU00gKHdpdGhvdXQgbXVsdGlwbGUgdGhyZWFkcy4uLiBoZW5jZSBzeW5jJ2QgZmlsZXN5c3RlbSkgYmVjYXVzZSB0aGV5IGFyZVxuICAgICAgICBub25ibG9ja2luZy4uLj9cbiAgICBcbiAgICAgICAgRklMRSogcG9wZW4oY29uc3QgY2hhciogY29tbWFuZCwgY29uc3QgY2hhciogdHlwZSk7XG4gICAgICAgIGludCBwY2xvc2UoRklMRSogc3RyZWFtKTtcbiAgICAgICAgKi9cbiAgICAgICAgcG9wZW4oX2NvbW1hbmRQdHIsIF90eXBlUHRyKSB7XG4gICAgICAgICAgICAvLyByZXR1cm5pbmcgMCBtZWFucyBpdCBjb3VsZG4ndCBkbyBpdC5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBwY2xvc2UoX3N0cmVhbVB0cikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBzdGRpbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZGlvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwicG9zaXg6c3RkbGliXCIpO1xuZnVuY3Rpb24gc3RkbGliKHsgY2hpbGRfcHJvY2Vzcywgb3MsIHJlY3YsIHNlbmQsIGZzIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXRqbXA6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIFJldHVybiAwIHNvIGl0IGRvZXNuJ3QgZG8gdGhlIGZhaWx1cmUgY2FyZSBvZiB0aGUgc2V0am1wLlxuICAgICAgICAgICAgbG9nKFwiU1RVQjogc2V0am1wIC0gbm8gb3BcIik7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gdm9pZCBsb25nam1wKGptcF9idWYgZW52LCBpbnQgdmFsKTtcbiAgICAgICAgbG9uZ2ptcDogKCkgPT4ge1xuICAgICAgICAgICAgbG9nKFwiU1RVQjogbG9uZ2ptcCAtIG5vIG9wXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHNpZ2xvbmdqbXA6ICgpID0+IHtcbiAgICAgICAgICAgIGxvZyhcIlNUVUI6IHNpZ2xvbmdqbXAgLSBubyBvcFwiKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBzaWdzZXRqbXA6ICgpID0+IHtcbiAgICAgICAgICAgIGxvZyhcIlNUVUI6IHNpZ3NldGptcCAtIG5vIG9wXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBnZXRsb2FkYXZnKGRvdWJsZSBsb2FkYXZnW10sIGludCBuZWxlbSk7XG4gICAgICAgIGdldGxvYWRhdmc6IChsb2FkYXZnRG91YmxlQXJyYXlQdHIsIG5lbGVtKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxvYWRhdmcgfSA9IG9zO1xuICAgICAgICAgICAgaWYgKGxvYWRhdmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvYWQgYXZlcmFnZSBpcyBub3QgYXR0YWluYWJsZVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF2ZyA9IGxvYWRhdmcoKTtcbiAgICAgICAgICAgIHNlbmQuZjY0KGxvYWRhdmdEb3VibGVBcnJheVB0ciwgYXZnWzBdKTtcbiAgICAgICAgICAgIHNlbmQuZjY0KGxvYWRhdmdEb3VibGVBcnJheVB0ciArIDgsIGF2Z1sxXSk7IC8vIGRvdWJsZSA9IDggYnl0ZXMgaW4gV0FTTVxuICAgICAgICAgICAgc2VuZC5mNjQobG9hZGF2Z0RvdWJsZUFycmF5UHRyICsgMTYsIGF2Z1syXSk7XG4gICAgICAgICAgICAvLyBudW1iZXIgb2Ygc2FtcGxlcyAobm90IHByb3ZpZGVkIGJ5IGxvYWRhdmcpLiAgSW4gcHl0aG9uIGl0c2VsZiBpZiB5b3UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAvLyBhbGwgb2YgdGhlbSAoMyBhcmUgcmVxdWVzdGVkKSwgaXQganVzdCBnaXZlcyBhbiBlcnJvci5cbiAgICAgICAgICAgIHJldHVybiBuZWxlbTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHN5c3RlbShjb25zdCBjaGFyICpjb21tYW5kKTtcbiAgICAgICAgLy8gVGhpcyBiZWxvdyBpcyBub3QgZXhhY3RseSBsaWtlIHN5c3RlbSBiZWNhdXNlIGl0IHJ1bnMgdW50aWwgdGhlIGNvbW1hbmQgY29tcGxldGVzIHdpdGggbm8gdmlzaWJsZSBvdXRwdXRcbiAgICAgICAgLy8gdW50aWwgaXQgY29tcGxldGVzLlxuICAgICAgICAvLyBUT0RPOiB0aGlzIG9ubHkgd29ya3Mgb25jZSB0aGVuIGdldHMgdG90YWxseSBicm9rZW4gd2hlbiB1c2luZyB3ZWJ3b3JrZXJzISAgSXQgd29ya3MgZmluZVxuICAgICAgICAvLyBmb3IgdGhlIGJsb2NraW5nIHZlcnNpb24gb25seS5cbiAgICAgICAgc3lzdGVtOiAoY29tbWFuZFB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKGNoaWxkX3Byb2Nlc3Muc3Bhd25TeW5jID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInN5c3RlbSBpcyBub3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IHJlY3Yuc3RyaW5nKGNvbW1hbmRQdHIpO1xuICAgICAgICAgICAgY29uc3QgeyBzdGRvdXQsIHN0ZGVyciwgc3RhdHVzIH0gPSBjaGlsZF9wcm9jZXNzLnNwYXduU3luYyhjb21tYW5kLCB7XG4gICAgICAgICAgICAgICAgc2hlbGw6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0ZG91dC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihzdGRlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICAvLyBjaGFyICpyZWFscGF0aChjb25zdCBjaGFyICpwYXRoLCBjaGFyICpyZXNvbHZlZF9wYXRoKTtcbiAgICAgICAgcmVhbHBhdGg6IChwYXRoUHRyLCByZXNvbHZlZFBhdGhQdHIpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgICAgIGxvZyhcInJlYWxwYXRoXCIsIHsgcGF0aCB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZFBhdGggPSBmcy5yZWFscGF0aFN5bmMocGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbmQuc3RyaW5nKHJlc29sdmVkUGF0aCwgeyBwdHI6IHJlc29sdmVkUGF0aFB0ciwgbGVuOiA0MDk2IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvZyhcInJlYWxwYXRoIGVycm9yIFwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIC8vIEl0IGNhbiBiZSBub3JtYWwgdG8gY2hlY2sgZm9yIGEgZmlsZSB0aGF0IGRvZXNuJ3QgZXhpc3Qgb25seSBjb25zb2xlLndhcm4gaW4gY2FzZSBvZiBsb3cgbGV2ZWwgZGVidWdnaW5nLlxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybihcIkVSUk9SXCIsIGVycik7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIDAgdG8gaW5kaWNhdGUgZXJyb3IsIE5PVCAtMSFcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLypcbiAgICAgICAgV2UgbmVlZCBta3N0ZW1wIHNpbmNlIGl0IHVzZWQgaW4gZWRpdGxpbmUvcmVhZGxpbmUuYyB0byBkbyBoaXN0b3J5IGZpbGUgdHJ1bmNhdGlvbi5cbiAgICAgICAgKFB5dGhvbiBkb2Vzbid0IHVzZSB0aGlzIHNpbmNlIGl0IGhhcyBpdHMgb3duIGltcGxlbWVudGF0aW9uLilcbiAgICAgICAgKi9cbiAgICAgICAgLy8gQ29tbWVudGVkIG91dCBzaW5jZSB3ZSBoYXZlIGEgQyBpbXBsZW1lbnRhdGlvbiBpbiBzdGRsaWIuYzsgdGhlIG9uZSBiZWxvdyBzaG91bGQgd29yayBmaW5lIHRob3VnaC4uLj9cbiAgICAgICAgLypcbiAgICAgICAgbWtzdGVtcDogKHRlbXBsYXRlUHRyOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICAgIGxldCB0ZW1wbGF0ZSA9IHJlY3Yuc3RyaW5nKHRlbXBsYXRlUHRyKTtcbiAgICAgICAgICAvLyB0ZW1wbGF0ZSBlbmRzIGluIFhYWFhYWFxuICAgICAgICAgIGlmICh0ZW1wbGF0ZS5zbGljZSgtNikgIT0gXCJYWFhYWFhcIikge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ0ZW1wbGF0ZSBtdXN0IGVuZCBpbiBYWFhYWFhcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHRoZSBhbGdvcml0aG0gaW4gbXVzbCBpcyB0byB0cnkgMTAwIHJhbmRvbWl6YXRpb25zIG9mIHRoZSBsYXN0IDYgY2hhcmFjdGVyc1xuICAgICAgICAgIGxldCByZXRyaWVzID0gMTAwO1xuICAgICAgICAgIHdoaWxlIChyZXRyaWVzID4gMCkge1xuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEzNDk0MDQvZ2VuZXJhdGUtcmFuZG9tLXN0cmluZy1jaGFyYWN0ZXJzLWluLWphdmFzY3JpcHRcbiAgICAgICAgICAgIHRlbXBsYXRlID1cbiAgICAgICAgICAgICAgdGVtcGxhdGUuc2xpY2UoMCwgLTYpICtcbiAgICAgICAgICAgICAgKE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpICsgXCIwMDAwMDAwMDAwMDAwMDAwMFwiKS5zbGljZSgyLCA4KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBmcy5vcGVuU3luYyhcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICBmcy5jb25zdGFudHM/Lk9fUkRXUiB8IGZzLmNvbnN0YW50cz8uT19DUkVBVCB8IGZzLmNvbnN0YW50cz8uT19FWENMLFxuICAgICAgICAgICAgICAgIDBvNjAwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgcmV0cmllcyAtPSAxO1xuICAgICAgICAgICAgICBpZiAocmV0cmllcyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZmFpbGVkXG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9LFxuICAgICAgICAqL1xuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHQgPSBzdGRsaWI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGRsaWIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuXG5SQU5ET00gTk9URVNcblxuTUFKT1IgVE9ETzogIEZvciB4dGVybS5qcyBlbnRpcmVseSBpbiBicm93c2VyIChhbmQgTVMgV2luZG93cyksIHdlIG1heSBzdGlsbFxuaGF2ZSB0byBpbXBsZW1lbnQgdGhpcyBzdHVmZi4gIEhvcGVmdWxseSB0aGlzIHdpbGwgYmUgbXVjaCBlYXNpZXIsIHNpbmNlIHdlXG5pbXBsZW1lbnRlZCBldmVyeXRoaW5nIHZpYSBvdXIgcG9zaXgtbm9kZSBhbmQgY2FuIG9ic2VydmUgd2hhdCdzIGV4cGVjdGVkXG5ieSBwcm9ncmFtcy5cblxuQWxzbywgZm9yIGV4YW1wbGUsIG9uZSBvZiB0aGUgZmxhZ3MgaXNcblxuICAgIFwiSVNJRyAgIFdoZW4gYW55IG9mIHRoZSBjaGFyYWN0ZXJzIElOVFIsIFFVSVQsIFNVU1AsIG9yIERTVVNQIGFyZSByZWNlaXZlZCwgZ2VuZXJhdGUgdGhlIGNvcnJlc3BvbmRpbmcgc2lnbmFsLlwiXG5cbmFuZCBzaW5jZSB3ZSBhcmUgaW1wbGVtZW50aW5nIHNpZ25hbHMgYW5kIHdhdGNoaW5nIGNoYXJhY3RlcnMsIG9mIGNvdXJzZSB0aGlzIGlzIHNvbWVcbmxvZ2ljIHRoYXQgd2Ugd291bGQgZG8uXG5cbk9uIGEgUE9TSVggc2VydmVyLCBhIGNvbXBsZXRlIGFuZCBlYXN5IG9wdGlvbiBpcyB0byBkaXJlY3RseSBjYWxsIHRoZSBjIGxpYnJhcnkgdmlhXG5hbiBleHRlbnNpb24gbW9kdWxlLCB0cmFuc2xhdGluZyBmbGFncyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIG5hdGl2ZSBhbmQgd2FzaSxcbmFuZCB3ZSBkbyBleGFjdGx5IHRoYXQgaGVyZS5cblxuUmlnaHQgbm93IG9uIG5vbi1QT1NJWCwgdGhlIGZvbGxvd2luZyBhcmUgcGFydGlhbGx5IHN0dWIgZnVuY3Rpb25zLCBidXQgbm90IG1pbmltYWwuXG5cbklNUE9SVEFOVCEgV2UgY2FuJ3QgZG8gTk9USElORyEgIEZvciBleGFtcGxlLCBsaWJlZGl0IHdpbGxcbnJhbmRvbWx5IG5vdCB3b3JrIGlmIHdlIGRvIG5vdGhpbmcgKHdoaWNoIGRyb3ZlIG1lIGNyYXp5IGZvciBkYXlzKSFcblRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgbGluZVxuXG4gICAgaWYgKHRjZ2V0YXR0cihmaWxlbm8ocmxfaW5zdHJlYW0pLCAmdCkgIT0gLTEgJiYgKHQuY19sZmxhZyAmIEVDSE8pID09IDApXG5cbmluIHBhY2thZ2VzL2xpYmVkaXQvYnVpbGQvd2FzbS9zcmMvcmVhZGxpbmUuYy4gICBJZiB0LmNfbGZsYWcgZG9lc24ndCBoYXZlIHRoZSBFQ0hPXG5mbGFnLCB0aGVuIGxpYmVkaXQgd2lsbCBiZSB0b3RhbGx5IGJyb2tlbiBmb3IgaW50ZXJhY3RpdmUgdXNlLlxuV2Ugc2V0IGF0IGxlYXN0IHRoYXQgYmVsb3cgZm9yIGZkPTAgYW5kIGludGVuZCB0byBkbyBtb3JlIChUT0RPISkuXG5cbiAgICAgICAgICAgdGNmbGFnX3QgY19pZmxhZzsgICAgICAvLyBpbnB1dCBtb2Rlc1xuICAgICAgICAgICB0Y2ZsYWdfdCBjX29mbGFnOyAgICAgIC8vIG91dHB1dCBtb2Rlc1xuICAgICAgICAgICB0Y2ZsYWdfdCBjX2NmbGFnOyAgICAgIC8vIGNvbnRyb2wgbW9kZXNcbiAgICAgICAgICAgdGNmbGFnX3QgY19sZmxhZzsgICAgICAvLyBsb2NhbCBtb2Rlc1xuICAgICAgICAgICBjY190ICAgICBjX2NjW05DQ1NdOyAgIC87IHNwZWNpYWwgY2hhcmFjdGVyc1xuXG5JIHRoaW5rIGZvciB1cyBjX2xmbGFnIGlzIG1vc3RseSB3aGF0IG1hdHRlcnMuXG5cbkFub3RoZXIga2V5IHBvaW50IHRoYXQgaXMgc3VidGxlLCBpcyB3ZSBjYW4ndCBqdXN0IHdvcnJ5IGFib3V0IGEgc3Vic2V0IG9mIFwib2ZmaWNpYWxcbnBvc2l4IGZsYWdzXCIgYW5kIGZvcmdldCBhYm91dCB0aGUgcmVzdC4gIFdlIGhhdmUgdG8gc2VlIHdoYXQgd2FzIGNoYW5nZWQgYXQgdGhlXG53YXNpIGxldmVsLCB0aGVuIG1vZGlmeSBleGFjdGx5IHdoYXQgaXMgdHJ1ZSBuYXRpdmVseSB0byBtYXRjaCB0aGF0LiAgIFRoaXMgbWFrZXNcbnRoZSBjb2RlIGJlbG93IGEgYml0IG9kZC5cbiovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBjb25zdGFudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb25zdGFudHNcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJwb3NpeDp0ZXJtaW9zXCIpO1xuY29uc3QgRkxBR1MgPSB7XG4gICAgY19pZmxhZzogW1xuICAgICAgICBcIklHTkJSS1wiLFxuICAgICAgICBcIkJSS0lOVFwiLFxuICAgICAgICBcIklHTlBBUlwiLFxuICAgICAgICBcIlBBUk1SS1wiLFxuICAgICAgICBcIklOUENLXCIsXG4gICAgICAgIFwiSVNUUklQXCIsXG4gICAgICAgIFwiSU5MQ1JcIixcbiAgICAgICAgXCJJR05DUlwiLFxuICAgICAgICBcIklDUk5MXCIsXG4gICAgICAgIFwiSVhPTlwiLFxuICAgICAgICBcIklYQU5ZXCIsXG4gICAgICAgIFwiSVhPRkZcIixcbiAgICAgICAgXCJJTUFYQkVMXCIsXG4gICAgICAgIFwiSVVURjhcIixcbiAgICBdLFxuICAgIGNfb2ZsYWc6IFtcIk9QT1NUXCIsIFwiT05MQ1JcIiwgXCJPQ1JOTFwiLCBcIk9OT0NSXCIsIFwiT05MUkVUXCIsIFwiT0ZJTExcIiwgXCJPRkRFTFwiXSxcbiAgICBjX2NmbGFnOiBbXG4gICAgICAgIFwiQ1NJWkVcIixcbiAgICAgICAgXCJDUzVcIixcbiAgICAgICAgXCJDUzZcIixcbiAgICAgICAgXCJDUzdcIixcbiAgICAgICAgXCJDUzhcIixcbiAgICAgICAgXCJDU1RPUEJcIixcbiAgICAgICAgXCJDUkVBRFwiLFxuICAgICAgICBcIlBBUkVOQlwiLFxuICAgICAgICBcIlBBUk9ERFwiLFxuICAgICAgICBcIkhVUENMXCIsXG4gICAgICAgIFwiQ0xPQ0FMXCIsXG4gICAgXSxcbiAgICBjX2xmbGFnOiBbXG4gICAgICAgIFwiSVNJR1wiLFxuICAgICAgICBcIklDQU5PTlwiLFxuICAgICAgICBcIkVDSE9cIixcbiAgICAgICAgXCJFQ0hPRVwiLFxuICAgICAgICBcIkVDSE9LXCIsXG4gICAgICAgIFwiRUNIT05MXCIsXG4gICAgICAgIFwiTk9GTFNIXCIsXG4gICAgICAgIFwiVE9TVE9QXCIsXG4gICAgICAgIFwiSUVYVEVOXCIsXG4gICAgXSxcbn07XG5mdW5jdGlvbiBzdGRpbyh7IHBvc2l4LCBjYWxsRnVuY3Rpb24sIHJlY3YsIHNlbmQsIHdhc2kgfSkge1xuICAgIC8vIFdlIHVzZSBjb3dhc21fdGVybWlvc19zZXQvZ2V0IGluc3RlYWQgb2YganVzdCBkaXJlY3RseSBzZXR0aW5nIG1lbW9yeVxuICAgIC8vIGluIHRoZSBzdHJ1Y3QgdG8gYXZvaWQgc3VidGxlIGJ1Z3MuIEl0J3MgYSBiaXQgbW9yZSB0ZWRpb3VzIGJ1dCBtb3JlIHJvYnVzdFxuICAgIC8vIGFuZCB3b3JrcyBpZiB0aGUgc3RydWN0IGlzIGNoYW5nZWQgaW4gdGVybXMgb2Ygb3JkZXIsIGV0Yy5cbiAgICBmdW5jdGlvbiB0ZXJtaW9zX3NldCh0aW9QdHIsIHsgY19pZmxhZywgY19vZmxhZywgY19jZmxhZywgY19sZmxhZyB9KSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSA0O1xuICAgICAgICBsZXQgZmxhZ3NQdHIgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmxhZ3NQdHIgPSBzZW5kLm1hbGxvYyg0ICogc2l6ZSk7IC8vIDQgdW5zaWduZWQgaW50c1xuICAgICAgICAgICAgc2VuZC51MzIoZmxhZ3NQdHIsIGNfaWZsYWcgPz8gMCk7XG4gICAgICAgICAgICBzZW5kLnUzMihmbGFnc1B0ciArIHNpemUsIGNfb2ZsYWcgPz8gMCk7XG4gICAgICAgICAgICBzZW5kLnUzMihmbGFnc1B0ciArIDIgKiBzaXplLCBjX2NmbGFnID8/IDApO1xuICAgICAgICAgICAgc2VuZC51MzIoZmxhZ3NQdHIgKyAzICogc2l6ZSwgY19sZmxhZyA/PyAwKTtcbiAgICAgICAgICAgIGNhbGxGdW5jdGlvbihcImNvd2FzbV90ZXJtaW9zX3NldFwiLCB0aW9QdHIsIGZsYWdzUHRyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChmbGFnc1B0cikge1xuICAgICAgICAgICAgICAgIHNlbmQuZnJlZShmbGFnc1B0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVybWlvc19nZXQodGlvUHRyKSB7XG4gICAgICAgIGxldCBmbGFnc1B0ciA9IDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gNDtcbiAgICAgICAgICAgIGZsYWdzUHRyID0gc2VuZC5tYWxsb2MoNCAqIHNpemUpOyAvLyA0IHVuc2lnbmVkIGludHNcbiAgICAgICAgICAgIGNhbGxGdW5jdGlvbihcImNvd2FzbV90ZXJtaW9zX2dldFwiLCB0aW9QdHIsIGZsYWdzUHRyKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY19pZmxhZzogcmVjdi51MzIoZmxhZ3NQdHIpLFxuICAgICAgICAgICAgICAgIGNfb2ZsYWc6IHJlY3YudTMyKGZsYWdzUHRyICsgc2l6ZSksXG4gICAgICAgICAgICAgICAgY19jZmxhZzogcmVjdi51MzIoZmxhZ3NQdHIgKyAyICogc2l6ZSksXG4gICAgICAgICAgICAgICAgY19sZmxhZzogcmVjdi51MzIoZmxhZ3NQdHIgKyAzICogc2l6ZSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKGZsYWdzUHRyKSB7XG4gICAgICAgICAgICAgICAgc2VuZC5mcmVlKGZsYWdzUHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBuYXRpdmVfdG9fd2FzaSh0aW9fbmF0aXZlKSB7XG4gICAgICAgIC8vIG5vdyB0cmFuc2xhdGUgdGhlIGZsYWdzIGZyb20gbmF0aXZlIHRvIFdBU0lcbiAgICAgICAgY29uc3QgdGlvX3dhc2kgPSB7XG4gICAgICAgICAgICBjX2lmbGFnOiAwLFxuICAgICAgICAgICAgY19vZmxhZzogMCxcbiAgICAgICAgICAgIGNfY2ZsYWc6IDAsXG4gICAgICAgICAgICBjX2xmbGFnOiAwLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aW9fbmF0aXZlKSB7XG4gICAgICAgICAgICB0aW9fd2FzaVtrZXldID0gMDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBGTEFHU1trZXldKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRpb19uYXRpdmVba2V5XSAmIHBvc2l4LmNvbnN0YW50c1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICB0aW9fd2FzaVtrZXldIHw9IGNvbnN0YW50c18xLmRlZmF1bHRbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcy5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgcy5zb3J0KCk7XG4gICAgICAgICAgICBsb2coXCJOQVRJVkU6IFwiLCBzLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlvX3dhc2k7XG4gICAgfVxuICAgIC8qXG4gICAgLy8gdGhpcyBkb2Vzbid0IGVuZCB1cCBnZXR0aW5nIHVzZWQsIHNvIGNvbW1lbnRlZCBvdXQuXG4gICAgZnVuY3Rpb24gd2FzaV90b19uYXRpdmUodGlvX3dhc2k6IFRlcm1pb3MpOiBUZXJtaW9zIHtcbiAgICAgIGNvbnN0IHRpb19uYXRpdmU6IFRlcm1pb3MgPSB7XG4gICAgICAgIGNfaWZsYWc6IDAsXG4gICAgICAgIGNfb2ZsYWc6IDAsXG4gICAgICAgIGNfY2ZsYWc6IDAsXG4gICAgICAgIGNfbGZsYWc6IDAsXG4gICAgICB9O1xuICAgICAgLy8gbGV0IHM6IHN0cmluZ1tdID0gW107XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBGTEFHUykge1xuICAgICAgICB0aW9fbmF0aXZlW2tleV0gPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgRkxBR1Nba2V5XSkge1xuICAgICAgICAgIGlmICh0aW9fd2FzaVtrZXldICYgY29uc3RhbnRzW25hbWVdKSB7XG4gICAgICAgICAgICB0aW9fbmF0aXZlW2tleV0gfD0gcG9zaXguY29uc3RhbnRzW25hbWVdO1xuICAgICAgICAgICAgLy8gcy5wdXNoKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gcy5zb3J0KCk7XG4gICAgICAvL2NvbnNvbGUubG9nKHMuam9pbihcIiBcIikpO1xuICAgICAgLy9yZXF1aXJlKFwiZnNcIikuYXBwZW5kRmlsZVN5bmMoXCIvdG1wL2xvZ1wiLCBzICsgXCJcXG5cIik7XG4gIFxuICAgICAgcmV0dXJuIHRpb19uYXRpdmU7XG4gICAgfVxuICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLypcbiAgICAgICAgVGhlc2UgdHdvIGZ1bmN0aW9ucyBhcmUgY3JpdGljYWwgdG8gYXBwbGljYXRpb25zIHRoYXQgdXNlXG4gICAgICAgIHRoZSB0ZXJtaW5hbC4gIFRoZXkgZG8gYSBodWdlIGFtb3VudCBpbiBhIHRyYWRpdGlvbmFsIFBPU0lYIHN5c3RlbSxcbiAgICAgICAgZS5nLiwgc2V0dGluZyBiYXVkIHJhdGVzLCBJQ0FOT04gbW9kZSwgZWNobywgZXRjLlxuICAgIFxuICAgICAgICBJIHRoaW5rIHh0ZXJtLmpzIGlzIG9ydGhvZ29uYWwgdG8gdGhpczsgaXQganVzdCByZWZsZWN0cyBob3cgdGhlXG4gICAgICAgIHVuZGVybHlpbmcgdGVybWluYWwgYmVoYXZlcy5cbiAgICBcbiAgICAgICAgIGludFxuICAgICAgICAgdGNnZXRhdHRyKGludCBmaWxkZXMsIHN0cnVjdCB0ZXJtaW9zICp0ZXJtaW9zX3ApO1xuICAgIFxuICAgICAgICAgaW50XG4gICAgICAgICB0Y3NldGF0dHIoaW50IGZpbGRlcywgaW50IG9wdGlvbmFsX2FjdGlvbnMsXG4gICAgICAgICAgICAgY29uc3Qgc3RydWN0IHRlcm1pb3MgKnRlcm1pb3NfcCk7XG4gICAgXG4gICAgICAgICovXG4gICAgICAgIHRjZ2V0YXR0cih3YXNpX2ZkLCB0aW9QdHIpIHtcbiAgICAgICAgICAgIGNvbnN0IGZkID0gd2FzaS5GRF9NQVAuZ2V0KHdhc2lfZmQpLnJlYWw7XG4gICAgICAgICAgICBsZXQgdGlvX3dhc2k7XG4gICAgICAgICAgICBsZXQgdGlvX25hdGl2ZTtcbiAgICAgICAgICAgIGlmIChwb3NpeC50Y2dldGF0dHIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRpb19uYXRpdmUgPSBwb3NpeC50Y2dldGF0dHIoZmQpO1xuICAgICAgICAgICAgICAgIC8vIG5vdyB0cmFuc2xhdGUgdGhlIGZsYWdzIGZyb20gbmF0aXZlIHRvIFdBU0lcbiAgICAgICAgICAgICAgICB0aW9fd2FzaSA9IG5hdGl2ZV90b193YXNpKHRpb19uYXRpdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGlvX25hdGl2ZSA9IHt9OyAvLyBqdXN0IGZvciBsb2dnaW5nIGJlbG93XG4gICAgICAgICAgICAgICAgaWYgKGZkID09IDAgfHwgZmQgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJIGNvcGllZCB0aGlzIGZyb20gcnVubmluZyBpdCBhbmQgb2JzZXJ2aW5nLlxuICAgICAgICAgICAgICAgICAgICAvLyBOTyBNQVRURVIgd2hhdCB3ZSBtdXN0IGNfbGZsYWc6IGNvbnN0YW50cy5FQ0hPIGFzIGJlbG93LCB0aG91Z2ggbWF5YmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaGF2aW5nIGV2ZXJ5dGhpbmcgaXMgYmV0dGVyLlxuICAgICAgICAgICAgICAgICAgICB0aW9fd2FzaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNfaWZsYWc6IDI3OTA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgY19vZmxhZzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNfY2ZsYWc6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjX2xmbGFnOiAzMjgyNyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgIC8vIHN0ZGluIC0gZG8gc29tZXRoaW5nIHRvIGF2b2lkIHRvdGFsIGRpc2FzdGVyIChzZWUgY29tbWVudCBpbiBoZWFkZXIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICB0aW9fd2FzaSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY19pZmxhZzogMCxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY19vZmxhZzogMCxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY19jZmxhZzogMCxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY19sZmxhZzogY29uc3RhbnRzLkVDSE8sIC8vIGF0IGxlYXN0IHRoaXMgaXMgbmVlZGVkIG9yIG5vdGhpbmcgd2lsbCB3b3JrLlxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpb193YXNpID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY19pZmxhZzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNfb2ZsYWc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjX2NmbGFnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY19sZmxhZzogMCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwidGNnZXRhdHRyXCIsIHsgd2FzaV9mZCwgZmQsIHRpb193YXNpLCB0aW9fbmF0aXZlIH0pO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkdFVFwiKTtcbiAgICAgICAgICAgIC8vd2FzaV90b19uYXRpdmUodGlvX3dhc2kpO1xuICAgICAgICAgICAgdGVybWlvc19zZXQodGlvUHRyLCB0aW9fd2FzaSk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgdGNzZXRhdHRyKHdhc2lfZmQsIF9vcHRpb25hbF9hY3Rpb25zLCAvLyBpZ25vcmVkIChpbnZvbHZlcyBidWZmZXJpbmcgYW5kIHdoZW4gY2hhbmdlIGhhcHBlbnMpXG4gICAgICAgIHRpb1B0cikge1xuICAgICAgICAgICAgY29uc3QgZmQgPSB3YXNpLkZEX01BUC5nZXQod2FzaV9mZCkucmVhbDtcbiAgICAgICAgICAgIGNvbnN0IHRpb193YXNpID0gdGVybWlvc19nZXQodGlvUHRyKTtcbiAgICAgICAgICAgIGlmIChwb3NpeC50Y3NldGF0dHIgPT0gbnVsbCB8fCBwb3NpeC50Y2dldGF0dHIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGlvX25hdGl2ZSA9IHBvc2l4LnRjZ2V0YXR0cihmZCk7XG4gICAgICAgICAgICBjb25zdCB0aW9fbmF0aXZlX29yaWcgPSB7IC4uLnRpb19uYXRpdmUgfTtcbiAgICAgICAgICAgIGNvbnN0IHRpb193YXNpX2N1cnJlbnQgPSBuYXRpdmVfdG9fd2FzaSh0aW9fbmF0aXZlKTtcbiAgICAgICAgICAgIC8vIFdlIGNoYW5nZSBpbiBuYXRpdmUgKipleGFjdGx5Kiogd2hhdCB0aGV5IGNoYW5nZWQsIGxlYXZpbmcgZXZlcnl0aGluZ1xuICAgICAgICAgICAgLy8gZWxzZSB0aGUgc2FtZS5cbiAgICAgICAgICAgIGxldCBzb21ldGhpbmdDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBGTEFHUykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBGTEFHU1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodGlvX3dhc2lba2V5XSAmIGNvbnN0YW50c18xLmRlZmF1bHRbbmFtZV0pICE9XG4gICAgICAgICAgICAgICAgICAgICAgICAodGlvX3dhc2lfY3VycmVudFtrZXldICYgY29uc3RhbnRzXzEuZGVmYXVsdFtuYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5hbWUgd2FzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvbWV0aGluZ0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpb193YXNpW2tleV0gJiBjb25zdGFudHNfMS5kZWZhdWx0W25hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlvX25hdGl2ZVtrZXldIHw9IHBvc2l4LmNvbnN0YW50c1tuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVuc2V0IGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlvX25hdGl2ZVtrZXldICY9IH5wb3NpeC5jb25zdGFudHNbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNvbWV0aGluZ0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBsb2coXCJ0Y3NldGF0dHI6IG5vdGhpbmcgY2hhbmdlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZyhcInRjc2V0YXR0clwiLCB7IGZkLCB0aW9fbmF0aXZlLCB0aW9fbmF0aXZlX29yaWcgfSk7XG4gICAgICAgICAgICBwb3NpeC50Y3NldGF0dHIoZmQsIHBvc2l4LmNvbnN0YW50cy5UQ1NBTk9XLCB0aW9fbmF0aXZlKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBUaGVzZSBhcmUgc3R1YnMgZm9yIG5vdzpcbiAgICAgICAgLy8gaW50IHRjZHJhaW4oaW50IGZpbGRlcyk7XG4gICAgICAgIHRjZHJhaW4oKSB7XG4gICAgICAgICAgICBsb2coXCJ0Y2RyYWluIC0gU1RVQlwiKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgdGNmbG93KGludCBmaWxkZXMsIGludCBhY3Rpb24pO1xuICAgICAgICB0Y2Zsb3coKSB7XG4gICAgICAgICAgICBsb2coXCJ0Y2Zsb3cgLSBTVFVCXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCB0Y2ZsdXNoKGludCBmaWxkZXMsIGludCBhY3Rpb24pO1xuICAgICAgICB0Y2ZsdXNoKCkge1xuICAgICAgICAgICAgbG9nKFwidGNmbHVzaCAtIFNUVUJcIik7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHRjc2VuZGJyZWFrKGludCBmaWxkZXMsIGludCBkdXJhdGlvbik7XG4gICAgICAgIHRjc2VuZGJyZWFrKCkge1xuICAgICAgICAgICAgbG9nKFwidGNzZW5kYnJlYWsgLSBTVFVCXCIpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHN0ZGlvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVybWlvcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRhdGVGb3JtYXQgPSByZXF1aXJlKFwiZGF0ZS1mb3JtYXRcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuZnVuY3Rpb24gdGltZSh7IGNoaWxkX3Byb2Nlc3MsIG1lbW9yeSwgb3MgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIGludCBhZGp0aW1lIChjb25zdCBzdHJ1Y3QgdGltZXZhbCAqLCBzdHJ1Y3QgdGltZXZhbCAqKTtcbiAgICAgICAgYWRqdGltZSgpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHNpbWlsYXIgdG8gY2xvY2tfc2V0dGltZSBiZWxvdy4uLiBidXQgcmVhbGx5IG1heWJlIG5vdCBuZWNlc3Nhcnkgc2luY2VcbiAgICAgICAgICAgIC8vIGNvd2FzbSBzaG91bGQgYmUgcHJldHR5IHNhbmRib3hlZCFcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiVE9ETzogaW1wbGVtZW50IGFkanRpbWVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHNldHRpbWVvZmRheSgpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiVE9ETzogc2V0dGltZW9mZGF5XCIpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgY2xvY2tfc2V0dGltZShjbG9ja2lkX3QgY2xrX2lkLCBjb25zdCBzdHJ1Y3QgdGltZXNwZWMgKnRwKTtcbiAgICAgICAgY2xvY2tfc2V0dGltZShfY2xrX2lkLCB0aW1lc3BlYykge1xuICAgICAgICAgICAgaWYgKGNoaWxkX3Byb2Nlc3Muc3Bhd25TeW5jID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImNsb2NrX3NldHRpbWUgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTk9URTogV2UgYXNzdW1lIHRoZSBjbGtfaWQgaXMgQ0xPQ0tfUkVBTFRJTUUgd2l0aG91dCBhIGNoZWNrLlxuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhtZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IHR2X3NlYyA9IHZpZXcuZ2V0VWludDMyKHRpbWVzcGVjLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIHdlIGlnbm9yZSBuYW5vc2Vjb25kcyBoZXJlOyB0aGUgZGF0ZSBjb21tYW5kcyBhcmVuJ3QgdGhhdCBwcmVjaXNlIGFueXdheXMuXG4gICAgICAgICAgICBsZXQgY21kLCBjbWQyID0gXCJcIiwgYXJncywgYXJnczIgPSBbXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3MucGxhdGZvcm0/LigpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImRhcndpblwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBkYXRlIC1mIFwiJXNcIiBcIjE2NjAxNzMzNTBcIiAgIyA8LS0gbnVtYmVyIG9mIHNlY29uZHMuXG4gICAgICAgICAgICAgICAgICAgIGNtZCA9IFwiZGF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gW1wiLWZcIiwgXCIlc1wiLCBgJHt0dl9zZWN9YF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsaW51eFwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBkYXRlIC0tZGF0ZT0nQDIxNDc0ODM2NDcnICMgPC0tIG51bWJlciBvZiBzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIGNtZCA9IFwiZGF0ZVwiO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gW2AtLXNldD1AJHt0dl9zZWN9YF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ3aW4zMlwiOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlVGltZSA9IG5ldyBEYXRlKDEwMDAgKiB0dl9zZWMpO1xuICAgICAgICAgICAgICAgICAgICBjbWQgPSBcImRhdGVcIjtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IFtkYXRlRm9ybWF0KFwibS9kL3l5eXlcIiwgZGF0ZVRpbWUpXTtcbiAgICAgICAgICAgICAgICAgICAgY21kMiA9IFwidGltZVwiO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gW2RhdGVGb3JtYXQoXCJISDpNTTpzc1wiLCBkYXRlVGltZSldO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgY2xvY2tfc2V0dGltZSBub3Qgc3VwcG9ydGVkIG9uIHBsYXRmb3JtICA9ICR7b3MucGxhdGZvcm0/LigpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBzdGF0dXMsIHN0ZGVyciB9ID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoY21kLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgY2xvY2tfc2V0dGltZSBmYWlsZWQgLSAke3N0ZGVycn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjbWQyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGF0dXMsIHN0ZGVyciB9ID0gY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoY21kMiwgYXJnczIpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGNsb2NrX3NldHRpbWUgZmFpbGVkIC0gJHtzdGRlcnJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCB3YXNpX2pzXzEgPSByZXF1aXJlKFwid2FzaS1qc1wiKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwicG9zaXg6dW5pc3RkXCIpO1xuZnVuY3Rpb24gdW5pc3RkKGNvbnRleHQpIHtcbiAgICBjb25zdCB7IGZzLCBvcywgcHJvY2VzcywgcmVjdiwgc2VuZCwgd2FzaSwgcG9zaXgsIG1lbW9yeSwgY2FsbFdpdGhTdHJpbmcgfSA9IGNvbnRleHQ7XG4gICAgLy8gVE9ETzogdGhpcyBkb2Vzbid0IHRocm93IGFuIGVycm9yIHlldCBpZiB0aGUgdGFyZ2V0IGZpbGVzeXN0ZW0gaXNuJ3QgbmF0aXZlLlxuICAgIGZ1bmN0aW9uIHRvTmF0aXZlRmQoZmQpIHtcbiAgICAgICAgLy8gT0JWSU9VU0xZIC0tIHRoZXNlICBmdW5jdGlvbnMgd29uJ3Qgd29yayBpZiB0aGUgdGFyZ2V0XG4gICAgICAgIC8vIGlzIGluIGEgd2FzaSBtZW1mcywgc2luY2UgdGhlIGhvc3QgcG9zaXggbGliYyBrbm93cyBub3RoaW5nIGFib3V0IHRoYXQuXG4gICAgICAgIC8vIFdlIGRvIHRyYW5zbGF0ZSBmaWxlIGRlc2NyaXB0b3JzIGF0IGxlYXN0LlxuICAgICAgICAvLyBEbyB3ZSBuZWVkIHRvIGNoZWNrIGFuZCB0aHJvdyBhbiBlcnJvciBpZiB0YXJnZXQgcGF0aCBpc24ndCBuYXRpdmU/XG4gICAgICAgIC8vIE9mIGNvdXJzZSwgdGhhdCB3aWxsIGhhcHBlbiBhbnl3YXlzIHNpbmNlIHRoZSBzeXNjYWxsIHdpbGwgaW1tZWRpYXRlbHlcbiAgICAgICAgLy8gcmVqZWN0IHRoZSBpbnZhbGlkIGZpbGUgZGVzY3JpcHRvciBhbnl3YXlzLlxuICAgICAgICBjb25zdCB4ID0gd2FzaS5GRF9NQVAuZ2V0KGZkKTtcbiAgICAgICAgaWYgKHggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGZpbGUgZGVzY3JpcHRvclwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geC5yZWFsO1xuICAgIH1cbiAgICAvLyBXZSB1c2UgdGhlIHJpZ2h0cyBmcm9tIHN0ZGluIGFuZCBzdGRvdXQgd2hlbiBtYWtpbmdcbiAgICAvLyBhIHBpcGUuICBUaGVzZSBjYW4gZ2V0IGNsb3NlZCBhZnRlciBzdGFydHVwIChlLmcuLCBpblxuICAgIC8vIHRoZSB0ZXN0X3N1YnByb2Nlc3MucHkgY3B5dGhvbiB0ZXN0cyksIHNvIHdlIGhhdmUgdG9cbiAgICAvLyBtYWtlIGEgY29weSBoZXJlLiAgVGhpcyBhbHNvIGF2b2lkcyBoYXZpbmcgdG8ga2VlcCBhIGRhdGFcbiAgICAvLyBzdHJ1Y3R1cmUgaW4gc3luYyB3aXRoIHdhc2ktanMuXG4gICAgY29uc3QgU1RESU4gPSB3YXNpLkZEX01BUC5nZXQoMCk7XG4gICAgY29uc3QgU1RET1VUID0gd2FzaS5GRF9NQVAuZ2V0KDEpO1xuICAgIGNvbnN0IHVuaXN0ZCA9IHtcbiAgICAgICAgY2hvd246IChwYXRoUHRyLCB1aWQsIGdpZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgZnMuY2hvd25TeW5jKHBhdGgsIHVpZCwgZ2lkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBsY2hvd246IChwYXRoUHRyLCB1aWQsIGdpZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IHJlY3Yuc3RyaW5nKHBhdGhQdHIpO1xuICAgICAgICAgICAgZnMubGNob3duU3luYyhwYXRoLCB1aWQsIGdpZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGZjaG93bihpbnQgZmQsIHVpZF90IG93bmVyLCBnaWRfdCBncm91cCk7XG4gICAgICAgIF9mY2hvd246IChmZCwgdWlkLCBnaWQpID0+IHtcbiAgICAgICAgICAgIGZzLmZjaG93blN5bmModG9OYXRpdmVGZChmZCksIHVpZCwgZ2lkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBnZXR1aWQ6ICgpID0+IHByb2Nlc3MuZ2V0dWlkPy4oKSA/PyAwLFxuICAgICAgICBnZXRnaWQ6ICgpID0+IHByb2Nlc3MuZ2V0Z2lkPy4oKSA/PyAwLFxuICAgICAgICBfZ2V0ZXVpZDogKCkgPT4gcHJvY2Vzcy5nZXRldWlkPy4oKSA/PyAwLFxuICAgICAgICBnZXRlZ2lkOiAoKSA9PiBwcm9jZXNzLmdldGVnaWQ/LigpID8/IDAsXG4gICAgICAgIC8vIGludCBnZXRncm91cHMoaW50IGdpZHNldHNpemUsIGdpZF90IGdyb3VwbGlzdFtdKTtcbiAgICAgICAgLy8gaW4gV0FTSSwgXCJ0eXBlZGVmIHVuc2lnbmVkIGdpZF90XCJcbiAgICAgICAgZ2V0Z3JvdXBzOiAoZ2lkc2V0c2l6ZSwgZ3JvdXBsaXN0UHRyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBncm91cHMgPSBwcm9jZXNzLmdldGdyb3Vwcz8uKCk7XG4gICAgICAgICAgICBpZiAoZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDsgLy8gbm8gZ3JvdXBzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2lkc2V0c2l6ZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8geWVwLCB3ZSBlbmQgdXAgY29tcHV0aW5nIGdldGdyb3VwcyB0d2ljZSwgc2luY2UgdGhlXG4gICAgICAgICAgICAgICAgLy8gcG9zaXggYXBpIGlzIGEgYml0IGF3a3dhcmQuLi5cbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXBzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4oZ3JvdXBzLmxlbmd0aCwgZ2lkc2V0c2l6ZSk7XG4gICAgICAgICAgICBpZiAoY291bnQgPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhtZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKGdyb3VwbGlzdFB0ciArIDQgKiBpLCBncm91cHNbaV0sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgICAgICB9LFxuICAgICAgICBnZXRwaWQ6ICgpID0+IHByb2Nlc3MucGlkID8/IDEsXG4gICAgICAgIGdldHBnaWQ6IChwaWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpeC5nZXRwZ2lkPy4ocGlkKSA/PyAxO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgc2V0cGdpZChwaWRfdCBwaWQsIHBpZF90IHBnaWQpO1xuICAgICAgICBzZXRwZ2lkOiAocGlkLCBwZ2lkKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguc2V0cGdpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJzZXRwZ2lkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zaXguc2V0cGdpZChwaWQsIHBnaWQpO1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHN1Y2Nlc3NcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0cGdycDogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l4LmdldHBncnA/LigpID8/IDE7XG4gICAgICAgIH0sXG4gICAgICAgIG5pY2U6IChpbmNyKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwID0gb3MuZ2V0UHJpb3JpdHk/LigpO1xuICAgICAgICAgICAgaWYgKHAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9zLnNldFByaW9yaXR5Py4ocCArIGluY3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyAgICAgaW50IGdldHByaW9yaXR5KGludCB3aGljaCwgaWRfdCB3aG8pO1xuICAgICAgICBnZXRwcmlvcml0eTogKHdoaWNoLCB3aG8pID0+IHtcbiAgICAgICAgICAgIGlmIChvcy5nZXRQcmlvcml0eSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gZW52aXJvbiB3aXRoIG5vIGluZm8gYWJvdXQgcHJvY2Vzc2VzIChlLmcuLCBicm93c2VyKS5cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aGljaCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiZ2V0cHJpb3JpdHkgY2FuIG9ubHkgYmUgaW1wbGVtZW50ZWQgaW4gbm9kZS5qcyBmb3IgKnByb2Nlc3MgaWQqXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBtaW5pbWFsIGluZm8uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3MuZ2V0UHJpb3JpdHk/Lih3aG8pO1xuICAgICAgICB9LFxuICAgICAgICAvLyAgIGludCBzZXRwcmlvcml0eShpbnQgd2hpY2gsIGlkX3Qgd2hvLCBpbnQgdmFsdWUpO1xuICAgICAgICBzZXRwcmlvcml0eTogKHdoaWNoLCB3aG8sIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAob3Muc2V0UHJpb3JpdHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGVudmlyb24gd2l0aCBubyBpbmZvIGFib3V0IHByb2Nlc3NlcyAoZS5nLiwgYnJvd3NlcikuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2hpY2ggIT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInNldHByaW9yaXR5IGNhbiBvbmx5IGJlIGltcGxlbWVudGVkIGluIG5vZGUuanMgZm9yICpwcm9jZXNzIGlkKlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3Muc2V0UHJpb3JpdHk/Lih3aG8sIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGR1cChpbnQgb2xkZmQpO1xuICAgICAgICBkdXA6IChvbGRmZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LmR1cCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJkdXBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDb25zaWRlcmVkIGluIDIwMjIsIGJ1dCBjbG9zZWQgYnkgbm9kZSBkZXZlbG9wZXJzOiBodHRwczovL2dpdGh1Yi5jb20vbGlidXYvbGlidXYvaXNzdWVzLzM0NDgjaXNzdWVjb21tZW50LTExNzQ3ODYyMThcbiAgICAgICAgICAgIGNvbnN0IHggPSB3YXNpLkZEX01BUC5nZXQob2xkZmQpO1xuICAgICAgICAgICAgY29uc3QgbmV3ZmRfcmVhbCA9IHBvc2l4LmR1cCh4LnJlYWwpO1xuICAgICAgICAgICAgY29uc3QgbmV3ZmQgPSB3YXNpLmdldFVudXNlZEZpbGVEZXNjcmlwdG9yKCk7XG4gICAgICAgICAgICB3YXNpLkZEX01BUC5zZXQobmV3ZmQsIHsgLi4ueCwgcmVhbDogbmV3ZmRfcmVhbCB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXdmZDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGR1cDIoaW50IG9sZGZkLCBpbnQgbmV3ZmQpO1xuICAgICAgICBkdXAyOiAob2xkZmQsIG5ld2ZkKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguZHVwMiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJkdXAyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeF9vbGQgPSB3YXNpLkZEX01BUC5nZXQob2xkZmQpO1xuICAgICAgICAgICAgbGV0IHhfbmV3O1xuICAgICAgICAgICAgLy8gSSdtIG5vdCAxMDAlIGhhcHB5IHdpdGggdGhpcy5cbiAgICAgICAgICAgIGlmICh3YXNpLkZEX01BUC5oYXMobmV3ZmQpKSB7XG4gICAgICAgICAgICAgICAgeF9uZXcgPSB3YXNpLkZEX01BUC5nZXQobmV3ZmQpLnJlYWwgPz8gbmV3ZmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB4X25ldyA9IG5ld2ZkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV3ZmRfcmVhbCA9IHBvc2l4LmR1cDIoeF9vbGQucmVhbCwgeF9uZXcpO1xuICAgICAgICAgICAgd2FzaS5GRF9NQVAuc2V0KG5ld2ZkLCB7IC4uLnhfb2xkLCByZWFsOiBuZXdmZF9yZWFsIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5ld2ZkO1xuICAgICAgICB9LFxuICAgICAgICBzeW5jOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub2RlanMgZG9lc24ndCBleHBvc2Ugc3luYywgYnV0IGl0IGRvZXMgZXhwb3NlIGZzeW5jIGZvciBhIGZpbGUgZGVzY3JpcHRvciwgc28gd2UgY2FsbCBpdCBvblxuICAgICAgICAgICAgLy8gYWxsIHRoZSBvcGVuIGZpbGUgZGVzY3JpcHRvcnNcbiAgICAgICAgICAgIGlmIChmcy5mc3luY1N5bmMgPT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtfLCB7IHJlYWwgfV0gb2Ygd2FzaS5GRF9NQVApIHtcbiAgICAgICAgICAgICAgICBmcy5mc3luY1N5bmMocmVhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEluIG5vZGVqcyB0aGVzZSBzZXQqaWQgZnVuY3Rpb24gY2FuJ3QgYmUgZG9uZSBpbiBhIHdvcmtlciB0aHJlYWQ6XG4gICAgICAgIC8vIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvcHJvY2Vzcy5odG1sI3Byb2Nlc3NzZXRnaWRpZFxuICAgICAgICAvLyBUT0RPOiBtYXliZSB3ZSBzaG91bGQgaW1wbGVtZW50IHRoZXNlIGJ5IHNlbmRpbmcgYSBtZXNzYWdlIHRvXG4gICAgICAgIC8vIHRoZSBtYWluIHRocmVhZCByZXF1ZXN0aW5nIHRvIGRvIHRoZW0/ICBGb3Igbm93LCB5b3UnbGwgZ2V0XG4gICAgICAgIC8vIGFuIGVycm9yIHVubGVzcyB5b3UgcnVuIGluIGEgbW9kZSB3aXRob3V0IGEgd29ya2VyIHRocmVhZC5cbiAgICAgICAgc2V0dWlkOiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInNldHVpZCBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRldWlkOiAodWlkKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguc2V0ZXVpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJzZXRldWlkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zaXguc2V0ZXVpZCh1aWQpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHNldGVnaWQ6IChnaWQpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5zZXRlZ2lkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNldGVnaWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3NpeC5zZXRlZ2lkKGdpZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0Z2lkOiAoZ2lkKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5zZXRnaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwic2V0Z2lkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvY2Vzcy5zZXRnaWQoZ2lkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXRzaWQ6IChzaWQpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5zZXRzaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwic2V0c2lkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvc2l4LnNldHNpZChzaWQpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBUT0RPIVxuICAgICAgICBnZXRzaWQ6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZ2V0c2lkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRyZXVpZDogKHVpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnNldHJldWlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNldHJldWlkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zaXguc2V0cmV1aWQodWlkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXRyZWdpZDogKGdpZCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnNldHJlZ2lkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNldHJlZ2lkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zaXguc2V0cmVnaWQoZ2lkKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRwcGlkOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguZ2V0cHBpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gYnJvd3NlciAtLSBvbmx5IG9uZSBwcm9jZXNzIGlkOlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmlzdGQuZ2V0cGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcG9zaXguZ2V0cHBpZCgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRncm91cHM6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwic2V0Z3JvdXBzXCIpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRwZ3JwOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInNldHBncnBcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHRjZ2V0cGdycDogKCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJ0Y2dldHBncnBcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHRjc2V0cGdycDogKCkgPT4ge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJ0Y3NldHBncnBcIik7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcms6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5mb3JrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImZvcmtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwaWQgPSBwb3NpeC5mb3JrKCk7XG4gICAgICAgICAgICBpZiAocGlkID09IDApIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBlbmQgdGhlIGV2ZW50IGxvb3AgaW4gdGhlIGNoaWxkLCBiZWNhdXNlIGhvcGVmdWxseSB1c3VhbGx5IGFueXRoaW5nXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBpcyB1c2luZyBmb3JrIGlzIGFib3V0IHRvIGV4ZWMqIGFueXdheXMuICBJdCBzZWVtcyB0aGF0IHRyeWluZ1xuICAgICAgICAgICAgICAgIC8vIHRvIGFjdHVhbGx5IHVzZSB0aGUgTm9kZS5qcyBldmVudCBsb29wIGFmdGVyIGZvcmtpbmcgdGVuZHMgdG8gcmFuZG9tbHlcbiAgICAgICAgICAgICAgICAvLyBoYW5nLCBzbyBpc24ndCByZWFsbHkgdmlhYmxlLlxuICAgICAgICAgICAgICAgIHBvc2l4LmNsb3NlX2V2ZW50X2xvb3A/LigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBpZDtcbiAgICAgICAgfSxcbiAgICAgICAgZm9yazE6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZm9yazFcIik7XG4gICAgICAgIH0sXG4gICAgICAgIHZmb3JrOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBcInRoaXMgc3lzdGVtIGNhbGwgYmVoYXZlcyBpZGVudGljYWxseSB0byB0aGUgZm9yaygyKSBzeXN0ZW0gY2FsbCwgZXhjZXB0IHdpdGhvdXRcbiAgICAgICAgICAgIC8vIGNhbGxpbmcgYW55IGhhbmRsZXJzIHJlZ2lzdGVyZWQgd2l0aCBwdGhyZWFkX2F0Zm9yaygyKS5cIlxuICAgICAgICAgICAgcmV0dXJuIHVuaXN0ZC5mb3JrKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGZvcmtwdHk6ICgpID0+IHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZm9ya3B0eVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0bG9naW46ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LnN0YXRlLmdldGxvZ2luX3B0ciAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnN0YXRlLmdldGxvZ2luX3B0cjtcbiAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIHVzZXJuYW1lIG9mIHRoZSBzaWduZWQgaW4gdXNlcjsgaWYgbm90IGF2YWlsYWJsZSwgZS5nLixcbiAgICAgICAgICAgIC8vIGluIGEgYnJvd3NlciwgcmV0dXJucyBcInVzZXJcIi5cbiAgICAgICAgICAgIGNvbnN0IHVzZXJuYW1lID0gb3MudXNlckluZm8/LigpPy51c2VybmFtZSA/PyBcInVzZXJcIjtcbiAgICAgICAgICAgIHJldHVybiAoY29udGV4dC5zdGF0ZS5nZXRsb2dpbl9wdHIgPSBzZW5kLnN0cmluZyh1c2VybmFtZSkpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgZ2V0aG9zdG5hbWUoY2hhciAqbmFtZSwgc2l6ZV90IGxlbik7XG4gICAgICAgIGdldGhvc3RuYW1lOiAobmFtZVB0ciwgbGVuKSA9PiB7XG4gICAgICAgICAgICBpZiAob3MuaG9zdG5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiZ2V0aG9zdG5hbWUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9zLmhvc3RuYW1lKCk7XG4gICAgICAgICAgICBzZW5kLnN0cmluZyhuYW1lLCB7IHB0cjogbmFtZVB0ciwgbGVuIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGludCBzZXRob3N0bmFtZShjb25zdCBjaGFyICpuYW1lLCBzaXplX3QgbGVuKTtcbiAgICAgICAgc2V0aG9zdG5hbWU6IChuYW1lUHRyLCBsZW4pID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5zZXRob3N0bmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJzZXRob3N0bmFtZSBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgcGxhdGZvcm1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gcmVjdi5zdHJpbmcobmFtZVB0ciwgbGVuKTtcbiAgICAgICAgICAgIHBvc2l4LnNldGhvc3RuYW1lKG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGNoYXIgKnR0eW5hbWUoaW50IGZkKTtcbiAgICAgICAgdHR5bmFtZTogKGZkKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXgudHR5bmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ0dHluYW1lX3IgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIHBsYXRmb3JtXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbnRleHQuc3RhdGUudHR5bmFtZV9wdHIgIT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGV4dC5zdGF0ZS50dHluYW1lX3B0cjtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IDEyODtcbiAgICAgICAgICAgIGNvbnRleHQuc3RhdGUudHR5bmFtZV9wdHIgPSBzZW5kLm1hbGxvYyhsZW4pO1xuICAgICAgICAgICAgc2VuZC5zdHJpbmcocG9zaXgudHR5bmFtZShmZCksIHsgcHRyOiBjb250ZXh0LnN0YXRlLnR0eW5hbWVfcHRyLCBsZW4gfSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5zdGF0ZS50dHluYW1lX3B0cjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IHR0eW5hbWVfcihpbnQgZmQsIGNoYXIgKmJ1Ziwgc2l6ZV90IGJ1Zmxlbik7XG4gICAgICAgIHR0eW5hbWVfcjogKGZkLCBwdHIsIGxlbikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnR0eW5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwidHR5bmFtZV9yIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbmQuc3RyaW5nKHBvc2l4LnR0eW5hbWUoZmQpLCB7IHB0ciwgbGVuIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIGFsYXJtOiAoc2Vjb25kcykgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LmFsYXJtID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcImFsYXJtIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBwbGF0Zm9ybVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwb3NpeC5hbGFybShzZWNvbmRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyA0IGFyZSBhY3R1YWxseSBvbmx5IGF2YWlsYWJsZSBvbiBhIExpbnV4IGhvc3QsXG4gICAgICAgIC8vIHRob3VnaCB3YXNpLW11c2wgZGVmaW5lcyB0aGVtLFxuICAgICAgICAvLyBzbyBjcHl0aG9uLXdhc20gdGhpbmtzIHRoZXkgZXhpc3QuXG4gICAgICAgIC8vIEZvciBDb1dhc20sIGxldCdzIGp1c3QgbWFrZSB0aGVzZSBuby1vcHMgd2hlbiBub3QgYXZhaWxhYmxlLFxuICAgICAgICAvLyBzaW5jZSB0aGV5IGFyZSBhYm91dCBtdWx0aXBsZSB1c2Vycywgd2hpY2ggd2Ugc2hvdWxkbid0XG4gICAgICAgIC8vIHN1cHBvcnQgaW4gV0FTTS5cbiAgICAgICAgZ2V0cmVzdWlkOiAocnVpZFB0ciwgZXVpZFB0ciwgc3VpZFB0cikgPT4ge1xuICAgICAgICAgICAgbGV0IHJ1aWQsIGV1aWQsIHN1aWQ7XG4gICAgICAgICAgICBpZiAocG9zaXguZ2V0cmVzdWlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBydWlkID0gZXVpZCA9IHN1aWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKHsgcnVpZCwgZXVpZCwgc3VpZCB9ID0gcG9zaXguZ2V0cmVzdWlkKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhtZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKHJ1aWRQdHIsIHJ1aWQsIHRydWUpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIoZXVpZFB0ciwgZXVpZCwgdHJ1ZSk7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMihzdWlkUHRyLCBzdWlkLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBnZXRyZXNnaWQ6IChyZ2lkUHRyLCBlZ2lkUHRyLCBzZ2lkUHRyKSA9PiB7XG4gICAgICAgICAgICBsZXQgcmdpZCwgZWdpZCwgc2dpZDtcbiAgICAgICAgICAgIGlmIChwb3NpeC5nZXRyZXNnaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJnaWQgPSBlZ2lkID0gc2dpZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoeyByZ2lkLCBlZ2lkLCBzZ2lkIH0gPSBwb3NpeC5nZXRyZXNnaWQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gbmV3IERhdGFWaWV3KG1lbW9yeS5idWZmZXIpO1xuICAgICAgICAgICAgdmlldy5zZXRVaW50MzIocmdpZFB0ciwgcmdpZCwgdHJ1ZSk7XG4gICAgICAgICAgICB2aWV3LnNldFVpbnQzMihlZ2lkUHRyLCBlZ2lkLCB0cnVlKTtcbiAgICAgICAgICAgIHZpZXcuc2V0VWludDMyKHNnaWRQdHIsIHNnaWQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHNldHJlc3VpZDogKHJ1aWQsIGV1aWQsIHN1aWQpID0+IHtcbiAgICAgICAgICAgIGlmIChwb3NpeC5zZXRyZXN1aWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBvc2l4LnNldHJlc3VpZChydWlkLCBldWlkLCBzdWlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICBzZXRyZXNnaWQ6IChyZ2lkLCBlZ2lkLCBzZ2lkKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguc2V0cmVzZ2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwb3NpeC5zZXRyZXNnaWQocmdpZCwgZWdpZCwgc2dpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW50IGV4ZWN2ZShjb25zdCBjaGFyICpwYXRobmFtZSwgY2hhciAqY29uc3QgYXJndltdLCBjaGFyICpjb25zdCBlbnZwW10pO1xuICAgICAgICBleGVjdmU6IChwYXRobmFtZVB0ciwgYXJndlB0ciwgZW52cFB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4Ll9leGVjdmUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwiZXhlY3ZlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aG5hbWUgPSByZWN2LnN0cmluZyhwYXRobmFtZVB0cik7XG4gICAgICAgICAgICBjb25zdCBhcmd2ID0gcmVjdi5hcnJheU9mU3RyaW5ncyhhcmd2UHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGVudnAgPSByZWN2LmFycmF5T2ZTdHJpbmdzKGVudnBQdHIpO1xuICAgICAgICAgICAgbG9nKFwiZXhlY3ZlXCIsIHBhdGhuYW1lLCBhcmd2LCBlbnZwKTtcbiAgICAgICAgICAgIHBvc2l4Ll9leGVjdmUocGF0aG5hbWUsIGFyZ3YsIGVudnApO1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHRoaXMgd29uJ3QgaGFwcGVuIGJlY2F1c2UgZXhlY3ZlIHRha2VzIG92ZXIsIG9yIHRoZXJlJ3MgYW4gZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgZXhlY3Y6IChwYXRobmFtZVB0ciwgYXJndlB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LmV4ZWN2ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImV4ZWN2XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aG5hbWUgPSByZWN2LnN0cmluZyhwYXRobmFtZVB0cik7XG4gICAgICAgICAgICBjb25zdCBhcmd2ID0gcmVjdi5hcnJheU9mU3RyaW5ncyhhcmd2UHRyKTtcbiAgICAgICAgICAgIGxvZyhcImV4ZWN2XCIsIHBhdGhuYW1lLCBhcmd2KTtcbiAgICAgICAgICAgIHBvc2l4LmV4ZWN2KHBhdGhuYW1lLCBhcmd2KTtcbiAgICAgICAgICAgIHJldHVybiAwOyAvLyB0aGlzIHdvbid0IGhhcHBlbiBiZWNhdXNlIGV4ZWN2IHRha2VzIG92ZXJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXhlY3ZwIGlzIGxpa2UgZXhlY3YgYnV0IHRha2VzIHRoZSBmaWxlbmFtZSByYXRoZXIgdGhhbiB0aGUgcGF0aC5cbiAgICAgICAgLy8gaW50IGV4ZWN2cChjb25zdCBjaGFyICpmaWxlLCBjaGFyICpjb25zdCBhcmd2W10pO1xuICAgICAgICBleGVjdnA6IChmaWxlUHRyLCBhcmd2UHRyKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXguZXhlY3ZwID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImV4ZWN2cFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSByZWN2LnN0cmluZyhmaWxlUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3YgPSByZWN2LmFycmF5T2ZTdHJpbmdzKGFyZ3ZQdHIpO1xuICAgICAgICAgICAgbG9nKFwiZXhlY3ZwXCIsIGZpbGUsIGFyZ3YpO1xuICAgICAgICAgICAgcG9zaXguZXhlY3ZwKGZpbGUsIGFyZ3YpO1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHRoaXMgd29uJ3QgaGFwcGVuIGJlY2F1c2UgZXhlY3ZwIHRha2VzIG92ZXJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZXhlY2xwIGlzIHNvIGZhciBvbmx5IGJ5IGxpYmVkaXQgdG8gbGF1bmNoIHZpbSB0byBlZGl0XG4gICAgICAgIC8vIHRoZSBoaXN0b3J5LiAgU28gaXQncyBzYWZlIHRvIGp1c3QgZGlzYWJsZS4gIFB5dGhvbiBkb2Vzbid0XG4gICAgICAgIC8vIHVzZSB0aGlzIGF0IGFsbC5cbiAgICAgICAgZXhlY2xwOiAoKSA9PiB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImV4ZWNscFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcbiAgICAgICAgSSBkb24ndCBoYXZlIGF1dG9tYXRlZCB0ZXN0aW5nIGZvciB0aGlzLCBzaW5jZSBpdCBxdWl0cyBub2RlLlxuICAgICAgICBIb3dldmVyLCBoZXJlIGlzIHdoYXQgd29ya3Mgb24gTGludXguIFRoZXJlIGlzIG5vIGZleGVjdmUgb24gbWFjb3MuXG4gICAgICAgID4+PiBpbXBvcnQgb3M7IGEgPSBvcy5vcGVuKFwiL2Jpbi9sc1wiLG9zLk9fUkRPTkxZIHwgb3MuT19DUkVBVClcbiAgICAgICAgPj4+IG9zLmV4ZWN2ZShhLFsnLWwnLCcvJ10se30pXG4gICAgICAgIGJpbiAgIGRldiAgaG9tZSAgbWVkaWEgIG9wdCAgIHJvb3QgIHNiaW4gIHN5cyAgdXNyXG4gICAgICAgIGJvb3QgIGV0YyAgbGliICAgbW50ICAgIHByb2MgIHJ1biAgIHNydiAgIHRtcCAgdmFyXG4gICAgICAgICovXG4gICAgICAgIGZleGVjdmU6IChmZCwgYXJndlB0ciwgZW52cFB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4Ll9mZXhlY3ZlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImZleGVjdmVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcmd2ID0gcmVjdi5hcnJheU9mU3RyaW5ncyhhcmd2UHRyKTtcbiAgICAgICAgICAgIGNvbnN0IGVudnAgPSByZWN2LmFycmF5T2ZTdHJpbmdzKGVudnBQdHIpO1xuICAgICAgICAgICAgcG9zaXguX2ZleGVjdmUodG9OYXRpdmVGZChmZCksIGFyZ3YsIGVudnApO1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHRoaXMgd29uJ3QgaGFwcGVuIGJlY2F1c2UgZXhlY3ZlIHRha2VzIG92ZXJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gIGludCBwaXBlKGludCBwaXBlZmRbMl0pO1xuICAgICAgICBwaXBlOiAocGlwZWZkUHRyKSA9PiB7XG4gICAgICAgICAgICBpZiAocG9zaXgucGlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJwaXBlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyByZWFkZmQsIHdyaXRlZmQgfSA9IHBvc2l4LnBpcGUoKTtcbiAgICAgICAgICAgIC8vIHJlYWRmZCBhbmQgd3JpdGVmZCBhcmUgZ2VudWluZSBuYXRpdmUgZmlsZSBkZXNjcmlwdG9ycyB0aGF0IHdlIGp1c3QgY3JlYXRlZC5cbiAgICAgICAgICAgIGNvbnN0IHdhc2lfcmVhZGZkID0gd2FzaS5nZXRVbnVzZWRGaWxlRGVzY3JpcHRvcigpO1xuICAgICAgICAgICAgd2FzaS5GRF9NQVAuc2V0KHdhc2lfcmVhZGZkLCB7XG4gICAgICAgICAgICAgICAgcmVhbDogcmVhZGZkLFxuICAgICAgICAgICAgICAgIHJpZ2h0czogU1RESU4ucmlnaHRzLFxuICAgICAgICAgICAgICAgIGZpbGV0eXBlOiB3YXNpX2pzXzEuY29uc3RhbnRzLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3Qgd2FzaV93cml0ZWZkID0gd2FzaS5nZXRVbnVzZWRGaWxlRGVzY3JpcHRvcigpO1xuICAgICAgICAgICAgd2FzaS5GRF9NQVAuc2V0KHdhc2lfd3JpdGVmZCwge1xuICAgICAgICAgICAgICAgIHJlYWw6IHdyaXRlZmQsXG4gICAgICAgICAgICAgICAgcmlnaHRzOiBTVERPVVQucmlnaHRzLFxuICAgICAgICAgICAgICAgIGZpbGV0eXBlOiB3YXNpX2pzXzEuY29uc3RhbnRzLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VuZC5pMzIocGlwZWZkUHRyLCB3YXNpX3JlYWRmZCk7XG4gICAgICAgICAgICBzZW5kLmkzMihwaXBlZmRQdHIgKyA0LCB3YXNpX3dyaXRlZmQpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBpcGUyOiAocGlwZWZkUHRyLCBmbGFncykgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LnBpcGUyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcInBpcGUyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5hdGl2ZUZsYWdzID0gMDtcbiAgICAgICAgICAgIGlmIChmbGFncyAmIGNvbnN0YW50c18xLmRlZmF1bHQuT19OT05CTE9DSykge1xuICAgICAgICAgICAgICAgIG5hdGl2ZUZsYWdzICs9IHBvc2l4LmNvbnN0YW50cz8uT19OT05CTE9DSyA/PyAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTk9URTogd2FzaSBkZWZpbmVkIE9fQ0xPRVhFQyB0byBiZSAwLCB3aGljaCBpcyBzdXBlciBhbm5veWluZy5cbiAgICAgICAgICAgIC8vIFdlIHRodXMgbmV2ZXIgc2V0IGl0LCBzaW5jZSBvdGhlcndpc2UgaXQgd291bGQgYWx3YXlzIGdldCBzZXQuXG4gICAgICAgICAgICAvKiBpZiAoZmxhZ3MgJiBjb25zdGFudHMuT19DTE9FWEVDKSB7XG4gICAgICAgICAgICAgIG5hdGl2ZUZsYWdzICs9IHBvc2l4LmNvbnN0YW50cz8uT19DTE9FWEVDID8/IDA7XG4gICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZGZkLCB3cml0ZWZkIH0gPSBwb3NpeC5waXBlMihuYXRpdmVGbGFncyk7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJwaXBlMiAtLSBUT0RPOiB3ZSBhbG1vc3QgY2VydGFpbmx5IG5lZWQgdG8gYWJzdHJhY3QgdGhlc2UgdGhyb3VnaCBvdXIgV0FTSSBmZCBvYmplY3QhXCIpO1xuICAgICAgICAgICAgc2VuZC5pMzIocGlwZWZkUHRyLCByZWFkZmQpO1xuICAgICAgICAgICAgc2VuZC5pMzIocGlwZWZkUHRyICsgNCwgd3JpdGVmZCk7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgbG9ja2Y6IChmZCwgY21kLCBzaXplKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxvY2tmIH0gPSBwb3NpeDtcbiAgICAgICAgICAgIGlmIChsb2NrZiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJsb2NrZlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBjbWROYXRpdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHggb2YgW1wiRl9VTE9DS1wiLCBcIkZfTE9DS1wiLCBcIkZfVExPQ0tcIiwgXCJGX1RFU1RcIl0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY21kID09IGNvbnN0YW50c18xLmRlZmF1bHRbeF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY21kTmF0aXZlID0gcG9zaXguY29uc3RhbnRzW3hdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY21kTmF0aXZlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgaW52YWxpZCBjbWQgJHtjbWR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NrZih0b05hdGl2ZUZkKGZkKSwgY21kTmF0aXZlLCBCaWdJbnQoc2l6ZSkpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHBhdXNlOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHBhdXNlIH0gPSBwb3NpeDtcbiAgICAgICAgICAgIGlmIChwYXVzZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjb3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBjYXNlIG9mIHdvcmtlclxuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwicGF1c2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGF1c2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaW5pdGdyb3VwcyBpbiBub2RlLCBzbyBlYXNpZXIuLi5cbiAgICAgICAgLy8gaW50IGluaXRncm91cHMoY29uc3QgY2hhciAqdXNlciwgZ2lkX3QgZ3JvdXApO1xuICAgICAgICBpbml0Z3JvdXBzOiAodXNlclB0ciwgZ3JvdXApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaW5pdGdyb3VwcyB9ID0gcHJvY2VzcztcbiAgICAgICAgICAgIGlmIChpbml0Z3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcImluaXRncm91cHNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB1c2VyID0gcmVjdi5zdHJpbmcodXNlclB0cik7XG4gICAgICAgICAgICBpbml0Z3JvdXBzKHVzZXIsIGdyb3VwKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBpbnQgZ2V0Z3JvdXBsaXN0KGNvbnN0IGNoYXIgKnVzZXIsIGdpZF90IGdyb3VwLCBnaWRfdCAqZ3JvdXBzLCBpbnQgKm5ncm91cHMpO1xuICAgICAgICBnZXRncm91cGxpc3Q6ICh1c2VyUHRyLCBncm91cCwgZ3JvdXBQdHIsIG5ncm91cHNQdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0Z3JvdXBsaXN0IH0gPSBwb3NpeDtcbiAgICAgICAgICAgIGNvbnN0IHVzZXIgPSByZWN2LnN0cmluZyh1c2VyUHRyKTtcbiAgICAgICAgICAgIGNvbnN0IG5ncm91cHMgPSByZWN2LmkzMihuZ3JvdXBzUHRyKTtcbiAgICAgICAgICAgIGxldCB2O1xuICAgICAgICAgICAgaWYgKGdldGdyb3VwbGlzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdiA9IFtncm91cF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2ID0gZ2V0Z3JvdXBsaXN0KHVzZXIsIGdyb3VwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGsgPSBNYXRoLm1pbih2Lmxlbmd0aCwgbmdyb3Vwcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgICAgICAgICAgIHNlbmQudTMyKGdyb3VwUHRyICsgNCAqIGksIHZbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VuZC5pMzIobmdyb3Vwc1B0ciwgdi5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGsgPCB2Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9LFxuICAgICAgICAvLyBqdXN0IGxpa2UgY2hkaXIsIGJ1dCB1c2VzIGEgZmlsZSBkZXNjcmlwdG9yLiBXQVNJIGRvZXNuJ3QgaGF2ZSBpdCwgc28gd2VcbiAgICAgICAgLy8gYWRkIGl0LlxuICAgICAgICBmY2hkaXI6IChmZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlyID0gd2FzaS5GRF9NQVAuZ2V0KGZkKT8ucGF0aDtcbiAgICAgICAgICAgIGlmICghZGlyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgZmNoZGlyOiBpbnZhbGlkIGZpbGUgZGVzY3JpcHRvcjogJHtmZH1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhTdHJpbmcoXCJjaGRpclwiLCBkaXIpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHVuaXN0ZDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVuaXN0ZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXN0ZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm90SW1wbGVtZW50ZWQgPSBleHBvcnRzLk5vdEltcGxlbWVudGVkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBsb2cgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcInBvc2l4XCIpO1xuY2xhc3MgTm90SW1wbGVtZW50ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihmdW5jdGlvbk5hbWUsIHJldCkge1xuICAgICAgICBzdXBlcihgJHtmdW5jdGlvbk5hbWV9IGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXRgKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJOb3RJbXBsZW1lbnRlZEVycm9yXCI7IC8vIG5hbWUgaXMgYSBzdGFuZGFyZCBleGNlcHRpb24gcHJvcGVydHkuXG4gICAgICAgIGlmIChyZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5yZXQgPSByZXQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLk5vdEltcGxlbWVudGVkRXJyb3IgPSBOb3RJbXBsZW1lbnRlZEVycm9yO1xuZnVuY3Rpb24gbm90SW1wbGVtZW50ZWQoZnVuY3Rpb25OYW1lLCByZXQgPSAtMSkge1xuICAgIGNvbnNvbGUud2FybihcIldBUk5JTkc6IGNhbGxpbmcgTk9UIElNUExFTUVOVEVEIGZ1bmN0aW9uXCIsIGZ1bmN0aW9uTmFtZSk7XG4gICAgbG9nKFwiV0FSTklORzogY2FsbGluZyBOT1QgSU1QTEVNRU5URUQgZnVuY3Rpb25cIiwgZnVuY3Rpb25OYW1lKTtcbiAgICB0aHJvdyBuZXcgTm90SW1wbGVtZW50ZWRFcnJvcihmdW5jdGlvbk5hbWUsIHJldCk7XG59XG5leHBvcnRzLm5vdEltcGxlbWVudGVkID0gbm90SW1wbGVtZW50ZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKSk7XG5mdW5jdGlvbiB3YWl0KHsgcG9zaXgsIHNlbmQgfSkge1xuICAgIGZ1bmN0aW9uIG5hdGl2ZU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBsZXQgbmF0aXZlX29wdGlvbnMgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBbXCJXTk9IQU5HXCIsIFwiV1VOVFJBQ0VEXCJdKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmIGNvbnN0YW50c18xLmRlZmF1bHRbb3B0aW9uXSkge1xuICAgICAgICAgICAgICAgIG5hdGl2ZV9vcHRpb25zIHw9IHBvc2l4LmNvbnN0YW50c1tvcHRpb25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVfb3B0aW9ucztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2FzbV93c3RhdHVzKHdzdGF0dXMpIHtcbiAgICAgICAgLy8gVE9ETyAtLSBuZWVkIHRvIHBhcnNlIHN0YXR1cyBhbmQgZW5jb2RlIGluIHdzdGF0dXNQdHIgY29ycmVjdGx5LiAgSSBkb24ndFxuICAgICAgICAvLyBrbm93IHRoYXQgd3N0YXR1cyBuYXRpdmUgaXMgdGhlIHNhbWUgYXMgd3N0YXR1cyBpbiBXQVNJISE/IVxuICAgICAgICByZXR1cm4gd3N0YXR1cztcbiAgICB9XG4gICAgY29uc3Qgb2JqID0ge1xuICAgICAgICB3YWl0OiAod3N0YXR1c1B0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LndhaXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwid2FpdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgcmV0LCB3c3RhdHVzIH0gPSBwb3NpeC53YWl0KCk7XG4gICAgICAgICAgICBzZW5kLmkzMih3c3RhdHVzUHRyLCB3YXNtX3dzdGF0dXMod3N0YXR1cykpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSxcbiAgICAgICAgd2FpdGlkOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyB3YWl0aWQgaXMgbGludXggb25seVxuICAgICAgICAgICAgKDAsIHV0aWxfMS5ub3RJbXBsZW1lbnRlZCkoXCJ3YWl0aWRcIik7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0sXG4gICAgICAgIC8vICBwaWRfdCB3YWl0cGlkKHBpZF90IHBpZCwgaW50ICp3c3RhdHVzLCBpbnQgb3B0aW9ucyk7XG4gICAgICAgIC8vIHdhaXRwaWQocGlkOiBudW1iZXIsIG9wdGlvbnMgOiBudW1iZXIpID0+IHtzdGF0dXM6IFN0YXR1cywgcmV0Om51bWJlcn1cbiAgICAgICAgd2FpdHBpZDogKHBpZCwgd3N0YXR1c1B0ciwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LndhaXRwaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwid2FpdHBpZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE8gLS0gbmVlZCB0byBwYXJzZSBzdGF0dXMgYW5kIGVuY29kZSBpbiB3c3RhdHVzUHRyIGNvcnJlY3RseS4gIEkgZG9uJ3RcbiAgICAgICAgICAgIC8vIGtub3cgdGhhdCB3c3RhdHVzIG5hdGl2ZSBpcyB0aGUgc2FtZSBhcyB3c3RhdHVzIGluIFdBU0khIT8hXG4gICAgICAgICAgICBjb25zdCB7IHJldCwgd3N0YXR1cyB9ID0gcG9zaXgud2FpdHBpZChwaWQsIG5hdGl2ZU9wdGlvbnMob3B0aW9ucykpO1xuICAgICAgICAgICAgc2VuZC5pMzIod3N0YXR1c1B0ciwgd2FzbV93c3RhdHVzKHdzdGF0dXMpKTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHBpZF90IHdhaXQzKGludCAqc3RhdF9sb2MsIGludCBvcHRpb25zLCBzdHJ1Y3QgcnVzYWdlICpydXNhZ2UpO1xuICAgICAgICB3YWl0MzogKHdzdGF0dXNQdHIsIG9wdGlvbnMsIHJ1c2FnZVB0cikgPT4ge1xuICAgICAgICAgICAgaWYgKHBvc2l4LndhaXQzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLm5vdEltcGxlbWVudGVkKShcIndhaXQzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1c2FnZVB0ciAhPSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwid2FpdDMgbm90IGltcGxlbWVudGVkIGZvciBub24tTlVMTCAqcnVzYWdlXCIpO1xuICAgICAgICAgICAgICAgICgwLCB1dGlsXzEubm90SW1wbGVtZW50ZWQpKFwid2FpdDNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHJldCwgd3N0YXR1cyB9ID0gcG9zaXgud2FpdDMobmF0aXZlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICAgICAgICBzZW5kLmkzMih3c3RhdHVzUHRyLCB3YXNtX3dzdGF0dXMod3N0YXR1cykpO1xuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB3YWl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2FpdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qIFRoaXMgaXMgZnJvbSB0aGUgSVNDIGxpY2Vuc2VkIGFzeW5jLWF3YWl0LXV0aWxzIHByb2plY3QsIGZyb20gaGVyZTpcbiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXNvdGltZS9hc3luYy1hd2FpdC11dGlscy9ibG9iL21hc3Rlci9zcmMvaG9mL3JldXNlSW5GbGlnaHQuanNcbiAgIEluY2x1ZGluZyB0aGF0IHF1aXRlIGhlYXZ5IChkdWUgdG8gYmFiZWwgZGVwKSBwcm9qZWN0IGp1c3QgZm9yIHRoaXMgb25lIGZ1bmN0aW9uXG4gICBpcyBhIGJpdCBtdWNoLCBzbyBJIGNvcHkvcGFzdGVkIGl0IGhlcmUuXG4qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgY3JlYXRlS2V5KGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3MpO1xuICAgIH0sXG4gICAgaWdub3JlU2luZ2xlVW5kZWZpbmVkOiBmYWxzZSxcbn07XG4vLyBmb3IgYSBnaXZlbiBQcm9taXNlLWdlbmVyYXRpbmcgZnVuY3Rpb24sIHRyYWNrIGVhY2ggZXhlY3V0aW9uIGJ5IHRoZSBzdHJpbmdpZmllZFxuLy8gYXJndW1lbnRzLiBpZiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGFnYWluIHdpdGggdGhlIHNhbWUgYXJndW1lbnRzLCB0aGVuIGluc3RlYWRcbi8vIG9mIGdlbmVyYXRpbmcgYSBuZXcgcHJvbWlzZSwgYW4gZXhpc3RpbmcgaW4tZmxpZ2h0IHByb21pc2UgaXMgdXNlZCBpbnN0ZWFkLiBUaGlzXG4vLyBwcmV2ZW50cyB1bm5lY2Vzc2FyeSByZXBldGl0aW9uIG9mIGFzeW5jIGZ1bmN0aW9uIGNhbGxzIHdoaWxlIHRoZSBzYW1lIGZ1bmN0aW9uXG4vLyBpcyBzdGlsbCBpbiBmbGlnaHQuXG5mdW5jdGlvbiByZXVzZUluRmxpZ2h0KGFzeW5jRm4sIGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHtcbiAgICAgICAgLi4uREVGQVVMVF9DT05GSUcsXG4gICAgICAgIC4uLihjb25maWcgfHwge30pLFxuICAgIH07XG4gICAgY29uc3QgaW5mbGlnaHQgPSB7fTtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5pZ25vcmVTaW5nbGVVbmRlZmluZWQgJiZcbiAgICAgICAgICAgIGFyZ3MubGVuZ3RoID09PSAxICYmXG4gICAgICAgICAgICBhcmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIklnbm9yaW5nIHNpbmdsZSB1bmRlZmluZWQgYXJnIChyZXVzZUluRmxpZ2h0KVwiKTtcbiAgICAgICAgICAgIGFyZ3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBjb25maWcuY3JlYXRlS2V5KGFyZ3MpO1xuICAgICAgICBpZiAoIWluZmxpZ2h0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIC8vIFdFIERPIE5PVCBBV0FJVCwgd2UgYXJlIHN0b3JpbmcgdGhlIHByb21pc2UgaXRzZWxmXG4gICAgICAgICAgICBpbmZsaWdodFtrZXldID0gYXN5bmNGbi5hcHBseSh0aGlzLCBhcmdzKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gc2VsZiBpbnZhbGlkYXRlXG4gICAgICAgICAgICAgICAgZGVsZXRlIGluZmxpZ2h0W2tleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gc3RpbGwgc2VsZi1pbnZhbGlkYXRlLCB0aGVuIHJldGhyb3dcbiAgICAgICAgICAgICAgICBkZWxldGUgaW5mbGlnaHRba2V5XTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5mbGlnaHRba2V5XTtcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcmV1c2VJbkZsaWdodDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJldXNlSW5GbGlnaHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuVGhpcyBpcyB0aGUgV29ya2VyIHNjcmlwdCB3aGVuIGltcG9ydGluZyB0aGUgd2FzbSBtb2R1bGUgaW4gYSB3ZWIgYnJvd3Nlci5cbiovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB3YXNpX2pzXzEgPSByZXF1aXJlKFwid2FzaS1qc1wiKTtcbmNvbnN0IGJyb3dzZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwid2FzaS1qcy9kaXN0L2JpbmRpbmdzL2Jyb3dzZXJcIikpO1xuY29uc3QgaW1wb3J0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaW1wb3J0XCIpKTtcbmNvbnN0IGluaXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pbml0XCIpKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmNvbnN0IHBvc2l4X2Jyb3dzZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9wb3NpeC1icm93c2VyXCIpKTtcbmNvbnN0IGlvX3VzaW5nX2F0b21pY3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pby11c2luZy1hdG9taWNzXCIpKTtcbmNvbnN0IGlvX3VzaW5nX3NlcnZpY2Vfd29ya2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaW8tdXNpbmctc2VydmljZS13b3JrZXJcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJ3YXNtOndvcmtlcjpicm93c2VyXCIpO1xuYXN5bmMgZnVuY3Rpb24gd2FzbUltcG9ydEJyb3dzZXIod2FzbVVybCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbG9nKFwid2FzbUltcG9ydEJyb3dzZXJcIik7XG4gICAgLy8gYWxzbyBmaXggemlwIHBhdGgsIGlmIG5lY2Vzc2FyeSBhbmQgcmVhZCBpbiBhbnkgemlwIGZpbGVzIChzb1xuICAgIC8vIHRoZXkgY2FuIGJlIGxvYWRlZCBpbnRvIG1lbWZzKS5cbiAgICBsb2coXCJwcm9jZXNzaW5nIGZzPVwiLCBvcHRpb25zLmZzKTtcbiAgICBjb25zdCBmc1NwZWMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFggb2Ygb3B0aW9ucy5mcyA/PyBbXSkge1xuICAgICAgICBpZiAoWC50eXBlID09IFwiemlwdXJsXCIpIHtcbiAgICAgICAgICAgIGxldCBZO1xuICAgICAgICAgICAgaWYgKCFYLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgWSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ6aXBcIixcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYXdhaXQgKGF3YWl0IGZldGNoKFguemlwdXJsKSkuYXJyYXlCdWZmZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbW91bnRwb2ludDogWC5tb3VudHBvaW50LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhc3luY2hyb25vdXNseSBsb2FkIGl0IGlycmVnYXJkbGVzcyBvZiB3aGF0ZXZlciBlbHNlIGlzIGhhcHBlbmluZy4uLlxuICAgICAgICAgICAgICAgIC8vIFRPRE86XG4gICAgICAgICAgICAgICAgWSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ6aXAtYXN5bmNcIixcbiAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YTogYXN5bmMgKCkgPT4gYXdhaXQgKGF3YWl0IGZldGNoKFguemlwdXJsKSkuYXJyYXlCdWZmZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgbW91bnRwb2ludDogWC5tb3VudHBvaW50LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmc1NwZWMucHVzaChZKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZzU3BlYy5wdXNoKFgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZzID0gKDAsIHdhc2lfanNfMS5jcmVhdGVGaWxlU3lzdGVtKShmc1NwZWMpO1xuICAgIC8vIEFzc3VtZWQgdG8gYmUgbG9hZGVkIGludG8gbWVtZnMuXG4gICAgZnVuY3Rpb24gaW1wb3J0V2ViQXNzZW1ibHlTeW5jKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYmluYXJ5ID0gbmV3IFVpbnQ4QXJyYXkoZnMucmVhZEZpbGVTeW5jKHBhdGgpKTtcbiAgICAgICAgY29uc3QgbW9kID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShiaW5hcnkpO1xuICAgICAgICByZXR1cm4gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IHdhc20gPSBhd2FpdCAoMCwgaW1wb3J0XzEuZGVmYXVsdCkoe1xuICAgICAgICBzb3VyY2U6IHdhc21VcmwsXG4gICAgICAgIGJpbmRpbmdzOiB7IC4uLmJyb3dzZXJfMS5kZWZhdWx0LCBmcywgcG9zaXg6IHBvc2l4X2Jyb3dzZXJfMS5kZWZhdWx0IH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGltcG9ydFdlYkFzc2VtYmx5LFxuICAgICAgICBpbXBvcnRXZWJBc3NlbWJseVN5bmMsXG4gICAgICAgIHJlYWRGaWxlU3luYzogKHBhdGgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMocGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1heE1lbW9yeU1COiAxMDAwLFxuICAgIH0pO1xuICAgIHJldHVybiB3YXNtO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gd2FzbUltcG9ydEJyb3dzZXI7XG4vLyBEb3dubG9hZCBmcm9tIG91ciBzZXJ2ZXIuXG5hc3luYyBmdW5jdGlvbiBpbXBvcnRXZWJBc3NlbWJseShwYXRoLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBpbnN0YW5jZSB9ID0gYXdhaXQgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZmV0Y2gocGF0aCksIG9wdGlvbnMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIG1haW4oKSB7XG4gICAgLy8gaW4gYSB3b3JrZXIsIHNvIGRvIHdvcmtlciBzdHVmZlxuICAgIGxvZyhcImluaXRpYWxpemluZyB3b3JrZXJcIik7XG4gICAgY2xhc3MgUGFyZW50IGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5wb3N0TWVzc2FnZSA9IHNlbGYucG9zdE1lc3NhZ2UuYmluZChzZWxmKTtcbiAgICAgICAgICAgIHNlbGYub25tZXNzYWdlID0gKHsgZGF0YTogbWVzc2FnZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFwibWVzc2FnZVwiLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGFyZW50ID0gbmV3IFBhcmVudCgpO1xuICAgICgwLCBpbml0XzEuZGVmYXVsdCkoe1xuICAgICAgICB3YXNtSW1wb3J0OiB3YXNtSW1wb3J0QnJvd3NlcixcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBjYXB0dXJlT3V0cHV0OiB0cnVlLFxuICAgICAgICBJT0hhbmRsZXI6IGNyb3NzT3JpZ2luSXNvbGF0ZWRcbiAgICAgICAgICAgID8gaW9fdXNpbmdfYXRvbWljc18xLmRlZmF1bHRcbiAgICAgICAgICAgIDogaW9fdXNpbmdfc2VydmljZV93b3JrZXJfMS5kZWZhdWx0LFxuICAgIH0pO1xufVxuaWYgKHNlbGYuZG9jdW1lbnQgPT0gbnVsbCkge1xuICAgIG1haW4oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RybGVuID0gdm9pZCAwO1xuY29uc3Qgd2FzaV9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ3YXNpLWpzXCIpKTtcbmNvbnN0IHJldXNlSW5GbGlnaHRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vcmV1c2VJbkZsaWdodFwiKSk7XG5jb25zdCBpbnN0YW5jZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2luc3RhbmNlXCIpKTtcbmNvbnN0IGR5bGlua18xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJkeWxpbmtcIikpO1xuY29uc3QgdHJhbXBvbGluZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW1wb2xpbmVcIikpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgcG9zaXhfY29udGV4dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Bvc2l4LWNvbnRleHRcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJ3YXNtLXdvcmtlclwiKTtcbmZ1bmN0aW9uIHN0cmxlbihjaGFyUHRyLCBtZW1vcnkpIHtcbiAgICBjb25zdCBtZW0gPSBuZXcgVWludDhBcnJheShtZW1vcnkuYnVmZmVyKTtcbiAgICBsZXQgaSA9IGNoYXJQdHI7XG4gICAgd2hpbGUgKG1lbVtpXSkge1xuICAgICAgICBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpIC0gY2hhclB0cjtcbn1cbmV4cG9ydHMuc3RybGVuID0gc3RybGVuO1xuY29uc3QgY2FjaGUgPSB7fTtcbmFzeW5jIGZ1bmN0aW9uIGRvV2FzbUltcG9ydCh7IHNvdXJjZSwgYmluZGluZ3MsIG9wdGlvbnMgPSB7fSwgaW1wb3J0V2ViQXNzZW1ibHlTeW5jLCBpbXBvcnRXZWJBc3NlbWJseSwgcmVhZEZpbGVTeW5jLCBtYXhNZW1vcnlNQiwgfSkge1xuICAgIGxvZyhcImRvV2FzbUltcG9ydFwiLCBzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBFcnJvcihcInNvdXJjZSBtdXN0IGJlIGRlZmluZWRcIik7XG4gICAgfVxuICAgIGlmIChjYWNoZVtzb3VyY2VdICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlW3NvdXJjZV07XG4gICAgfVxuICAgIGNvbnN0IHQgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgICBjb25zdCBtZW1vcnkgPSBuZXcgV2ViQXNzZW1ibHkuTWVtb3J5KHtcbiAgICAgICAgaW5pdGlhbDogKDAsIGR5bGlua18xLk1CdG9QYWdlcykoMTApLFxuICAgICAgICAuLi4obWF4TWVtb3J5TUIgPyB7IG1heGltdW06ICgwLCBkeWxpbmtfMS5NQnRvUGFnZXMpKG1heE1lbW9yeU1CKSB9IDoge30pLFxuICAgIH0pO1xuICAgIGNvbnN0IHRhYmxlID0gbmV3IFdlYkFzc2VtYmx5LlRhYmxlKHsgaW5pdGlhbDogMTAwMDAsIGVsZW1lbnQ6IFwiYW55ZnVuY1wiIH0pO1xuICAgIGNvbnN0IHdhc21FbnYgPSB7XG4gICAgICAgIHJlcG9ydEVycm9yOiAocHRyLCBsZW4pID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IHNsaWNlID0gbWVtb3J5LmJ1ZmZlci5zbGljZShwdHIsIHB0ciArIGxlbik7XG4gICAgICAgICAgICBjb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IodGV4dERlY29kZXIuZGVjb2RlKHNsaWNlKSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICAvLyBOT1RFOiBpZiB3ZSB3YW50IHRvIHRyeSB0byB1c2UgV2ViQXNzZW1ibHkuVGFibGUgZm9yIHNvbWV0aGluZyxcbiAgICAvLyB0aGVuIHNldCBlbnYuX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSB0byBpdC4gIFRoZSBuYW1lXG4gICAgLy8gX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSBpcyB0aGUgYXJiaXRyYXJ5IGhhcmRjb2RlZCBuYW1lIHRoYXQgemlnXG4gICAgLy8ganVzdCBoYXBwZW5zIHRvIHVzZSBmb3IgdGhlIHRhYmxlIGl0IGltcG9ydHMgd2hlbiB5b3UgY29tcGlsZVxuICAgIC8vIHdpdGggLS1pbXBvcnQtdGFibGUuIEkgb25seSBmaWd1cmVkIHRoaXMgb3V0IGJ5IGRlY29tcGlsaW5nIGFuZCByZWFkaW5nLiBTZWVcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemlnbGFuZy96aWcvcHVsbC8xMDM4Mi9maWxlcyNkaWZmLWUyODc5Mzc0ZDU4MWQ2ZTk0MjJmNGY2ZjA5YWUzYzhlZTVmNDI5Zjc1ODFkN2I4OTlmMzg2MzMxOWFmZmY0ZTBSNjQ4XG4gICAgY29uc3Qgd2FzbU9wdHMgPSB7XG4gICAgICAgIGVudjoge1xuICAgICAgICAgICAgLi4ud2FzbUVudixcbiAgICAgICAgICAgIC4uLm9wdGlvbnMud2FzbUVudixcbiAgICAgICAgICAgIG1lbW9yeSxcbiAgICAgICAgICAgIF9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGU6IHRhYmxlLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgbGV0IHdhc207XG4gICAgaWYgKHdhc21PcHRzLmVudi53YXNtR2V0U2lnbmFsU3RhdGUgPT0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJ3YXNtR2V0U2lnbmFsU3RhdGUgbm90IGRlZmluZWQ7IHVzaW5nIFNUVUJcIik7XG4gICAgICAgIHdhc21PcHRzLmVudi53YXNtR2V0U2lnbmFsU3RhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHdhc21PcHRzLmVudi53YXNtU2VuZFN0cmluZyA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoaXMgc2VuZHMgYSBzdHJpbmcgZnJvbSBXZWJBc3NlbWJseSBiYWNrIHRvIFR5cGVzY3JpcHQgYW5kIHBsYWNlc1xuICAgICAgICAvLyBpdCBpbiB0aGUgcmVzdWx0IHZhcmlhYmxlLlxuICAgICAgICB3YXNtT3B0cy5lbnYud2FzbVNlbmRTdHJpbmcgPSAocHRyLCBsZW4pID0+IHtcbiAgICAgICAgICAgIHdhc20ucmVzdWx0ID0gd2FzbS5yZWN2LnN0cmluZyhwdHIsIGxlbik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmICh3YXNtT3B0cy5lbnYud2FzbVNldEV4Y2VwdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHdhc21PcHRzLmVudi53YXNtU2V0RXhjZXB0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgd2FzbS5yZXN1bHRFeGNlcHRpb24gPSB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAod2FzbU9wdHMuZW52LmdldHJhbmRvbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IGRpZG4ndCBuZWVkIHRvIGRvIHRoaXMgZ2V0IGZpeGVkIGluIG5ld2VyIHppZz9cbiAgICAgICAgd2FzbU9wdHMuZW52LmdldHJhbmRvbSA9IChidWZQdHIsIGJ1ZkxlbiwgX2ZsYWdzKSA9PiB7XG4gICAgICAgICAgICAvLyBOT1RFOiByZXR1cm5pbmcgMCBoZXJlIChvdXIgZGVmYXVsdCBzdHViIGJlaGF2aW9yKVxuICAgICAgICAgICAgLy8gd291bGQgcmVzdWx0IGluIFB5dGhvbiBoYW5naW5nIG9uIHN0YXJ0dXAhXG4gICAgICAgICAgICBiaW5kaW5ncy5yYW5kb21GaWxsU3luYyhcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KG1lbW9yeS5idWZmZXIpLCBidWZQdHIsIGJ1Zkxlbik7XG4gICAgICAgICAgICByZXR1cm4gYnVmTGVuO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAod2FzbU9wdHMuZW52Lm1haW4gPT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIHNlZW1zIHN1c3BlY3RcbiAgICAgICAgd2FzbU9wdHMuZW52Lm1haW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHdhc21PcHRzLmVudi5fUHlfZW1zY3JpcHRlbiA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IHRoaXMgc2VlbXMgc3VzcGVjdFxuICAgICAgICB3YXNtT3B0cy5lbnYuX1B5X2Vtc2NyaXB0ZW5fcnVudGltZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAoMCwgdHJhbXBvbGluZV8xLmRlZmF1bHQpKHRhYmxlLCB3YXNtT3B0cy5lbnYpO1xuICAgIGNvbnN0IHsgZnMgfSA9IGJpbmRpbmdzO1xuICAgIGNvbnN0IHdhc2lDb25maWcgPSB7XG4gICAgICAgIHByZW9wZW5zOiB7IFwiL1wiOiBcIi9cIiB9LFxuICAgICAgICBiaW5kaW5ncyxcbiAgICAgICAgYXJnczogcHJvY2Vzcy5hcmd2LFxuICAgICAgICBlbnY6IG9wdGlvbnMuZW52LFxuICAgICAgICBzbGVlcDogb3B0aW9ucy5zbGVlcCxcbiAgICAgICAgZ2V0U3RkaW46IG9wdGlvbnMuZ2V0U3RkaW4sXG4gICAgICAgIHNlbmRTdGRvdXQ6IG9wdGlvbnMuc2VuZFN0ZG91dCxcbiAgICAgICAgc2VuZFN0ZGVycjogb3B0aW9ucy5zZW5kU3RkZXJyLFxuICAgIH07XG4gICAgY29uc3Qgd2FzaSA9IG5ldyB3YXNpX2pzXzEuZGVmYXVsdCh3YXNpQ29uZmlnKTtcbiAgICB3YXNtT3B0cy53YXNpX3NuYXBzaG90X3ByZXZpZXcxID0gd2FzaS53YXNpSW1wb3J0O1xuICAgIGNvbnN0IGR5bGlua09wdGlvbnMgPSB7XG4gICAgICAgIGltcG9ydFdlYkFzc2VtYmx5U3luYyxcbiAgICAgICAgaW1wb3J0V2ViQXNzZW1ibHksXG4gICAgICAgIHJlYWRGaWxlU3luYyxcbiAgICAgICAgc3R1YjogZmFsc2UsXG4gICAgfTtcbiAgICBjb25zdCBwb3NpeENvbnRleHQgPSBuZXcgcG9zaXhfY29udGV4dF8xLmRlZmF1bHQoe1xuICAgICAgICBtZW1vcnksXG4gICAgICAgIHdhc2ksXG4gICAgICAgIHdhc2lDb25maWcsXG4gICAgfSk7XG4gICAgcG9zaXhDb250ZXh0LmluamVjdEZ1bmN0aW9ucyh3YXNtT3B0cy5lbnYpO1xuICAgIGNvbnN0IGluc3RhbmNlID0gYXdhaXQgKDAsIGR5bGlua18xLmRlZmF1bHQpKHtcbiAgICAgICAgLi4uZHlsaW5rT3B0aW9ucyxcbiAgICAgICAgcGF0aDogc291cmNlLFxuICAgICAgICBpbXBvcnRPYmplY3Q6IHdhc21PcHRzLFxuICAgIH0pO1xuICAgIGlmICh3YXNpICE9IG51bGwpIHtcbiAgICAgICAgLy8gd2FzaSBhc3N1bWVzIHRoaXMgaXMgY2FsbGVkLlxuICAgICAgICB3YXNpLnN0YXJ0KGluc3RhbmNlLCBtZW1vcnkpO1xuICAgIH1cbiAgICB3YXNtID0gbmV3IGluc3RhbmNlXzEuZGVmYXVsdChpbnN0YW5jZSwgbWVtb3J5LCBmcywgdGFibGUpO1xuICAgIHBvc2l4Q29udGV4dC5pbml0KHdhc20pO1xuICAgIGNhY2hlW3NvdXJjZV0gPSB3YXNtO1xuICAgIGlmIChvcHRpb25zLnRpbWUgJiYgbG9nLmVuYWJsZWQpIHtcbiAgICAgICAgbG9nKGBpbXBvcnRlZCAke3NvdXJjZX0gaW4gJHtuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHR9bXNgKTtcbiAgICB9XG4gICAgd2FzbS50YWJsZSA9IHRhYmxlO1xuICAgIHdhc20ud2FzaSA9IHdhc2k7XG4gICAgd2FzbS5wb3NpeENvbnRleHQgPSBwb3NpeENvbnRleHQ7XG4gICAgd2FzbS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIHJldHVybiB3YXNtO1xufVxuY29uc3Qgd2FzbUltcG9ydCA9ICgwLCByZXVzZUluRmxpZ2h0XzEuZGVmYXVsdCkoZG9XYXNtSW1wb3J0LCB7XG4gICAgY3JlYXRlS2V5OiAoYXJncykgPT4gYXJnc1swXSxcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gd2FzbUltcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltcG9ydC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwid2FzbTp3b3JrZXI6aW5pdFwiKTtcbmZ1bmN0aW9uIGluaXRXb3JrZXIoeyB3YXNtSW1wb3J0LCBwYXJlbnQsIGNhcHR1cmVPdXRwdXQsIElPSGFuZGxlciwgfSkge1xuICAgIGxldCB3YXNtID0gdW5kZWZpbmVkO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBsb2coXCJ3b3JrZXIgZ290IG1lc3NhZ2UgXCIsIG1lc3NhZ2UpO1xuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UuZXZlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJpbml0XCI6XG4gICAgICAgICAgICAgICAgY29uc3QgaW9IYW5kbGVyID0gbmV3IElPSGFuZGxlcihtZXNzYWdlLm9wdGlvbnMsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnBvc3RNZXNzYWdlKHsgZXZlbnQ6IFwic2VydmljZS13b3JrZXItYnJva2VuXCIgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5hYmxlIGRlYnVnIGxvZ2dpbmcgdG8gbWF0Y2ggbWFpbiB0aHJlYWQuICBPdGhlcndpc2UsIHRoZXJlIGlzIG5vIHBvc3NpYmxlXG4gICAgICAgICAgICAgICAgICAgIC8vIHdheSB0byBoYXZlIGFueSBsb2dnaW5nIGluc2lkZSB0aGUgV2ViV29ya2VyLlxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z18xLmRlZmF1bHQuZW5hYmxlKG1lc3NhZ2UuZGVidWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBvcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5tZXNzYWdlLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHNsZWVwOiBpb0hhbmRsZXIuc2xlZXAuYmluZChpb0hhbmRsZXIpLFxuICAgICAgICAgICAgICAgICAgICBnZXRTdGRpbjogaW9IYW5kbGVyLmdldFN0ZGluLmJpbmQoaW9IYW5kbGVyKSxcbiAgICAgICAgICAgICAgICAgICAgd2FzbUVudjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2FzbUdldFNpZ25hbFN0YXRlOiBpb0hhbmRsZXIuZ2V0U2lnbmFsU3RhdGUuYmluZChpb0hhbmRsZXIpLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGNhcHR1cmVPdXRwdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5zZW5kU3Rkb3V0ID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlvSGFuZGxlci5zZW5kT3V0cHV0KHR5cGVzXzEuU3RyZWFtLlNURE9VVCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuc2VuZFN0ZGVyciA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpb0hhbmRsZXIuc2VuZE91dHB1dCh0eXBlc18xLlN0cmVhbS5TVERFUlIsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXNtID0gYXdhaXQgd2FzbUltcG9ydChtZXNzYWdlLm5hbWUsIG9wdHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGV2ZW50OiBcImluaXRcIiwgc3RhdHVzOiBcIm9rXCIgfTtcbiAgICAgICAgICAgIGNhc2UgXCJjYWxsV2l0aFN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGlmICh3YXNtID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ3YXNtIG11c3QgYmUgaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogd2FzbS5jYWxsV2l0aFN0cmluZyhtZXNzYWdlLm5hbWUsIG1lc3NhZ2Uuc3RyLCAvLyB0aGlzIGlzIGEgc3RyaW5nIG9yIHN0cmluZ1tdXG4gICAgICAgICAgICAgICAgICAgIC4uLm1lc3NhZ2UuYXJncyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJjYWxsXCI6XG4gICAgICAgICAgICAgICAgaWYgKHdhc20gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIndhc20gbXVzdCBiZSBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB3YXNtLmNhbGxXaXRoU3RyaW5nKG1lc3NhZ2UubmFtZSwgXCJcIiwgW10pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIFwid2FpdFVudGlsRnNMb2FkZWRcIjpcbiAgICAgICAgICAgICAgICBpZiAod2FzbT8uZnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIndhc20uZnMgbXVzdCBiZSBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaXQgbWlnaHQgbm90IGJlIGRlZmluZWQsIGUuZy4sIGlmIG5vdCB1c2luZyB1bmlvbmZzIGF0IGFsbFxuICAgICAgICAgICAgICAgIGNvbnN0IHsgd2FpdFVudGlsTG9hZGVkIH0gPSB3YXNtLmZzO1xuICAgICAgICAgICAgICAgIGlmICh3YWl0VW50aWxMb2FkZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2coXCJ3YWl0VW50aWxMb2FkZWQgLSBubyB3YWl0IGZ1bmN0aW9uIGRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB3YWl0VW50aWxMb2FkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwid2FpdGVkIGFuZCBub3cgZmlsZSBzeXN0ZW1cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0YWtlcyBlZmZvcnRcbiAgICAgICAgICAgICAgICAgICAgbG9nKFwibHMgLyA9IFwiLCB3YXNtLmZzLnJlYWRkaXJTeW5jKFwiL1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJmZXRjaFwiOlxuICAgICAgICAgICAgICAgIGlmICh3YXNtPy5mcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwid2FzbS5mcyBtdXN0IGJlIGluaXRpYWxpemVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCB3YXNtLmZldGNoKG1lc3NhZ2UudXJsLCBtZXNzYWdlLnBhdGgsIG1lc3NhZ2UubW9kZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBhcmVudC5vbihcIm1lc3NhZ2VcIiwgYXN5bmMgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3AgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgLi4uKGF3YWl0IGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBhcmVudC5wb3N0TWVzc2FnZShyZXNwKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gaW5pdFdvcmtlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBzZW5kX3RvX3dhc21fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zZW5kLXRvLXdhc21cIikpO1xuY29uc3QgcmVjdl9mcm9tX3dhc21fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZWN2LWZyb20td2FzbVwiKSk7XG5jb25zdCBhd2FpdGluZ18xID0gcmVxdWlyZShcImF3YWl0aW5nXCIpO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4vLyBNYXNzaXZlIG9wdGltaXphdGlvbiAtLSB3aGVuIGNhbGxpbmcgYSBXQVNNIGZ1bmN0aW9uIHZpYVxuLy8gY2FsbFdpdGhTdHJpbmcgKHNvIGZpcnN0IGFyZyBpcyBhIHN0cmluZyksIHdlIHJldXNlIHRoZVxuLy8gc2FtZSBzdHJpbmcgYnVmZmVyIGV2ZXJ5IHRpbWUgYXMgbG9uZyBhcyB0aGUgc3RyaW5nIGlzXG4vLyBhdCBtb3N0IDhLQi4gIFRoaXMgYXZvaWRzIHRvbnMgb2YgbWFsbG9jcywgZnJlZXMsIHNhdmVzXG4vLyBtZW1vcnksIGFuZCBnaXZlcyBhbiBvcmRlciBvZiBtYWduaXR1ZGUgc3BlZWR1cC5cbmNvbnN0IFNNQUxMX1NUUklOR19TSVpFID0gMTAyNCAqIDg7XG5jbGFzcyBXYXNtSW5zdGFuY2VTeW5jIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcihpbnN0YW5jZSwgbWVtb3J5LCBmcywgdGFibGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVzdWx0RXhjZXB0aW9uID0gZmFsc2U7XG4gICAgICAgIC8vIGZ1bmN0aW9ucyBuZXZlciBnbyBhd2F5IGFuZCBnZXRGdW5jdGlvbiBpcyBleHBlbnNpdmUgaWZcbiAgICAgICAgLy8gaXQgaGFzIHRvIHVzZSB0aGUgdGFibGUsIGFuZCBzYW1lIGZ1bmN0aW9uIGdldHMgY2FsbGVkIG9mdGVuLFxuICAgICAgICAvLyBzbyB0aGlzIGlzIHdlbGwgd29ydGggZG9pbmcuXG4gICAgICAgIHRoaXMuX2dldEZ1bmN0aW9uQ2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5leHBvcnRzID0gaW5zdGFuY2UuZXhwb3J0cztcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB0aGlzLm1lbW9yeSA9IG1lbW9yeTtcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICAgICAgICB0aGlzLmZzID0gZnM7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgICAgICBtZW1vcnk6IHRoaXMubWVtb3J5LFxuICAgICAgICAgICAgY2FsbEZ1bmN0aW9uOiAobmFtZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGYgPSB0aGlzLmdldEZ1bmN0aW9uKG5hbWUpO1xuICAgICAgICAgICAgICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGVycm9yIC0gJHtuYW1lfSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZiguLi5hcmdzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsV2l0aFN0cmluZzogdGhpcy5jYWxsV2l0aFN0cmluZy5iaW5kKHRoaXMpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlbmQgPSBuZXcgc2VuZF90b193YXNtXzEuZGVmYXVsdChvcHRzKTtcbiAgICAgICAgdGhpcy5yZWN2ID0gbmV3IHJlY3ZfZnJvbV93YXNtXzEuZGVmYXVsdChvcHRzKTtcbiAgICB9XG4gICAgdGVybWluYXRlKCkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGRvLCBzaW5jZSBub3RoaW5nIGNhbiBwb3NzaWJseSBiZSAqcnVubmluZyogd2hlbiB0aGlzIGlzIGNhbGxlZC5cbiAgICB9XG4gICAgZXhlYyhhcmd2ID0gW1wiY29tbWFuZFwiXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsV2l0aFN0cmluZyhcImNvd2FzbV9leGVjXCIsIGFyZ3YpO1xuICAgIH1cbiAgICB3cml0ZVRvU3RkaW4oX2RhdGEpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuICAgIC8vIFdoZW4geW91IHBhc3Mgc3RyIG9mIHR5cGUgc3RyW10gaXQgY2FsbHMgbmFtZSB3aXRoIChsZW4oc3RyKSwgY2hhcioqLCAuLi4pLlxuICAgIC8vIGkuZS4sIGl0J3MgdGhlIG1haW4gY2FsbCBzaWduYXR1cmUgdGhhbiB0aGFuIG51bGwgdGVybWluYXRlIGNoYXIqKiBsaWtlIHNvbWVcbiAgICAvLyBDIGxpYnJhcnkgY29kZS5cbiAgICBjYWxsV2l0aFN0cmluZyhmdW5jLCBzdHIsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IGYgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBmID0gdGhpcy5nZXRGdW5jdGlvbihmdW5jKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZnVuYyA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBmID0gdGhpcy5nZXRGdW5jdGlvbihmdW5jLm5hbWUsIGZ1bmMuZGxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGYgPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBubyBmdW5jdGlvbiBcIiR7dHlwZW9mIGZ1bmMgPT0gXCJvYmplY3RcIiA/IEpTT04uc3RyaW5naWZ5KGZ1bmMpIDogZnVuY31cIiBkZWZpbmVkIGluIHdhc20gbW9kdWxlYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVzdWx0RXhjZXB0aW9uID0gZmFsc2U7XG4gICAgICAgIGxldCByO1xuICAgICAgICBpZiAoc3RyID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGp1c3QgY2FsbGluZyBpdC5cbiAgICAgICAgICAgIHIgPSBmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHN0ciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJBc0FycmF5ID0gZW5jb2Rlci5lbmNvZGUoc3RyKTtcbiAgICAgICAgICAgIGlmIChzdHJBc0FycmF5Lmxlbmd0aCA8IFNNQUxMX1NUUklOR19TSVpFKSB7XG4gICAgICAgICAgICAgICAgciA9IHRoaXMuY2FsbFdpdGhTbWFsbFN0cmluZyhmLCBzdHJBc0FycmF5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQgPz8gcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuc2VuZC5lbmNvZGVkU3RyaW5nKHN0ckFzQXJyYXkpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgciA9IGYocHRyLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydHMuY19mcmVlKHB0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBzb2x2ZSBwcm9ibGVtIGluIG1vcmUgZ2VuZXJhbGl0eSwgb2J2aW91c2x5IVxuICAgICAgICAgICAgLy8gQ29udmVydCBhcnJheSBvZiBzdHJpbmdzIHRvIGNoYXIqKiBvZiBudWxsIHRlcm1pbmF0ZWRcbiAgICAgICAgICAgIC8vIHN0cmluZ3MsIHdpdGggYSBudWxsIGNoYXIqIGF0IHRoZSBlbmQgYXMgd2VsbCAoY29tbW9uIGZvciBjbGliIGZ1bmN0aW9ucylcbiAgICAgICAgICAgIGNvbnN0IHB0cnMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcyBvZiBzdHIpIHtcbiAgICAgICAgICAgICAgICBwdHJzLnB1c2godGhpcy5zZW5kLnN0cmluZyhzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBwdHJzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuZXhwb3J0cy5jX21hbGxvYygobGVuICsgMSkgKiA0KTsgLy8gc2l6ZW9mKGNoYXIqKSA9IDQgaW4gV0FTTS5cbiAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gbmV3IEludDMyQXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBwdHIsIGxlbiArIDEpO1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHB0cnMpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IHA7XG4gICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyYXlbbGVuXSA9IDA7IC8vIGZpbmFsIG51bGwgcG9pbnRlci5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIHIgPSBmKGxlbiwgcHRyLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICB0aGlzLmV4cG9ydHMuY19mcmVlKHB0cik7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwIG9mIHB0cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBvcnRzLmNfZnJlZShwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVzdWx0RXhjZXB0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIlJ1bnRpbWVFcnJvclwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQgPz8gcjtcbiAgICB9XG4gICAgZ2V0U21hbGxTdHJpbmdQdHIoKSB7XG4gICAgICAgIGlmICh0aGlzLnNtYWxsU3RyaW5nUHRyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc21hbGxTdHJpbmdQdHIgPSB0aGlzLmV4cG9ydHMuY19tYWxsb2MoU01BTExfU1RSSU5HX1NJWkUpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNtYWxsU3RyaW5nUHRyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJNZW1vcnlFcnJvciAtLSBvdXQgb2YgbWVtb3J5IGFsbG9jYXRpbmcgc21hbGwgc3RyaW5nIGJ1ZmZlclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zbWFsbFN0cmluZ1B0cjtcbiAgICB9XG4gICAgY2FsbFdpdGhTbWFsbFN0cmluZyhmLCBzdHJBc0FycmF5LCAuLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuZ2V0U21hbGxTdHJpbmdQdHIoKTtcbiAgICAgICAgY29uc3QgbGVuID0gc3RyQXNBcnJheS5sZW5ndGggKyAxO1xuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBJbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBwdHIsIGxlbik7XG4gICAgICAgIGFycmF5LnNldChzdHJBc0FycmF5KTtcbiAgICAgICAgYXJyYXlbbGVuIC0gMV0gPSAwO1xuICAgICAgICByZXR1cm4gZihwdHIsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICAvLyAtIElmIGRsbCBpcyBub3QgZ2l2ZW4gZ2V0cyBhIGZ1bmN0aW9uIGZyb20gdGhlIG1haW4gaW5zdGFuY2VcbiAgICAvLyAgIG9yIHVuZGVmaW5lZCBpZiB0aGUgZnVuY3Rpb24gaXMgbm90IGRlZmluZWQuIFJlc3VsdCBpcyBjYWNoZWQuXG4gICAgLy8gLSBJZiBkbGwgaXMgZ2l2ZW4sIGxvYWRzIHRoZSBnaXZlbiBkeW5hbWljIGxpYnJhcnkgKGlmIGl0IGlzbid0XG4gICAgLy8gICBhbHJlYWR5IGxvYWRlZCksIHRoZW4gZ2V0cyB0aGUgbmFtZWQgZnVuY3Rpb24gZnJvbSB0aGVyZS4gIEluIHRoZVxuICAgIC8vICAgZGxsIGNhc2UgdGhyb3dzIGFuIGVycm9yIGV4cGxhaW5pbmcgd2hhdCB3ZW50IHdyb25nIGlmIGFueXRoaW5nXG4gICAgLy8gICBnb2VzIHdyb25nLCByYXRoZXIgdGhhbiB1bmRlZmluZWQgKHNpbmNlIGEgbG90IGNhbiBnbyB3cm9uZykuXG4gICAgLy8gICBUT0RPOiBtYXliZSBnZXRGdW5jdGlvbiBzaG91bGQgdGhyb3cgaW5zdGVhZCBvZiByZXR1cm5pbmcgdW5kZWZpbmVkXG4gICAgLy8gICBpbiBhbGwgY2FzZXM/ICBSZXN1bHQgaXMgTk9UIGNhY2hlZCwgc2luY2UgZGxjbG9zZStjYWNoZSA9IGNyYXNoLlxuICAgIGdldEZ1bmN0aW9uKG5hbWUsIGRsbCkge1xuICAgICAgICBpZiAoZGxsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEZ1bmN0aW9uVXNpbmdEbG9wZW4obmFtZSwgZGxsKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmID0gdGhpcy5fZ2V0RnVuY3Rpb25DYWNoZVtuYW1lXTtcbiAgICAgICAgaWYgKGYgIT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICBpZiAodGhpcy50YWJsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCB0cnkgcG9pbnRlcjpcbiAgICAgICAgICAgIGNvbnN0IGdldFB0ciA9IHRoaXMuZXhwb3J0c1tgX19XQVNNX0VYUE9SVF9fJHtuYW1lfWBdO1xuICAgICAgICAgICAgaWYgKGdldFB0ciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZiA9IHRoaXMudGFibGUuZ2V0KGdldFB0cigpKTtcbiAgICAgICAgICAgICAgICBpZiAoZiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEZ1bmN0aW9uQ2FjaGVbbmFtZV0gPSBmO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbGl0dGxlIGFkdmFudGFnZSB0byBjYWNoaW5nIHRoaXM6XG4gICAgICAgIHJldHVybiB0aGlzLmV4cG9ydHNbbmFtZV0gPz8gdGhpcy5pbnN0YW5jZS5lbnZbbmFtZV07XG4gICAgfVxuICAgIC8vIE9wZW5zIGR5bmFtaWMgbGlicmFyeSBpZiBub3QgYWxyZWFkeSBvcGVuLCB0aGVuIGdldHMgdGhlIGZ1bmN0aW9uLlxuICAgIC8vIFRocm93cyBlcnJvcnMgaWYgYW55dGhpbmcgZG9lc24ndCBleGlzdCBvciB3b3JrLlxuICAgIGdldEZ1bmN0aW9uVXNpbmdEbG9wZW4obmFtZSwgcGF0aCkge1xuICAgICAgICBjb25zdCBoYW5kbGUgPSB0aGlzLmNhbGxXaXRoU3RyaW5nKFwiZGxvcGVuXCIsIHBhdGgpO1xuICAgICAgICBjb25zdCBkbHN5bSA9IHRoaXMuZ2V0RnVuY3Rpb24oXCJkbHN5bVwiKTtcbiAgICAgICAgaWYgKGRsc3ltID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiZGxzeW0gbXVzdCBiZSBkZWZpbmVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMuZ2V0U21hbGxTdHJpbmdQdHIoKTtcbiAgICAgICAgdGhpcy5zZW5kLnN0cmluZyhuYW1lLCB7IHB0ciwgbGVuOiBTTUFMTF9TVFJJTkdfU0laRSB9KTtcbiAgICAgICAgY29uc3QgZlB0ciA9IGRsc3ltKGhhbmRsZSwgcHRyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFibGU/LmdldChmUHRyKTtcbiAgICB9XG4gICAgY2xvc2VEeW5hbWljTGlicmFyeShwYXRoKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuY2FsbFdpdGhTdHJpbmcoXCJkbG9wZW5cIiwgcGF0aCk7XG4gICAgICAgIGlmIChoYW5kbGUgIT0gMCkge1xuICAgICAgICAgICAgY29uc3QgZGxjbG9zZSA9IHRoaXMuZ2V0RnVuY3Rpb24oXCJkbGNsb3NlXCIpO1xuICAgICAgICAgICAgaWYgKGRsY2xvc2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBkZWZpbml0ZWx5IG5ldmVyIGhhcHBlblxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiZGxjbG9zZSBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRsY2xvc2UoaGFuZGxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgaW4gdGhlIFdBU00gaW5zdGFuY2UuXG4gICAgLy8gVGhlIG1vdGl2YXRpb24gZm9yIGltcGxlbWVudGluZyB0aGlzIGFuZCBlbnN1cmluZyBpdCBpcyBmYXN0XG4gICAgLy8gaXMgdGhhdCB3ZSBuZWVkIGl0IHdoZW4gY2FsbGluZyB0aGluZ3MgbGlrZSBleGVjIGluIG91clxuICAgIC8vIHBvc2l4IGNvbXBhdCBsYXllciwgc2luY2Ugd2UgbXVzdCBlbnN1cmUgdGhlIGhvc3QgcnVudGltZVxuICAgIC8vIGhhcyB0aGUgc2FtZSB3b3JraW5nIGRpcmVjdG9yeSBiZWZvcmUgYW55IHBvc2l4IGNhbGwgdGhhdFxuICAgIC8vIHVzZXMgdGhlIGhvc3QuXG4gICAgZ2V0Y3dkKCkge1xuICAgICAgICBjb25zdCBnZXRjd2QgPSB0aGlzLmdldEZ1bmN0aW9uKFwiZ2V0Y3dkXCIpO1xuICAgICAgICBpZiAoZ2V0Y3dkID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgc2hvdWxkIGJlIGVuZm9yY2VkIGJ5IGR5bGluayBhbmQgbGliYy5cbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQyBsaWJyYXJ5IGZ1bmN0aW9uIGdldGN3ZCBtdXN0IGJlIGV4cG9ydGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlY3Yuc3RyaW5nKGdldGN3ZCh0aGlzLmdldFNtYWxsU3RyaW5nUHRyKCksIFNNQUxMX1NUUklOR19TSVpFKSk7XG4gICAgfVxuICAgIGFzeW5jIHdhaXRVbnRpbEZzTG9hZGVkKCkge1xuICAgICAgICBpZiAodGhpcy5mcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcImZzIG11c3QgYmUgZGVmaW5lZFwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpdCBtaWdodCBub3QgYmUgZGVmaW5lZCwgZS5nLiwgaWYgbm90IHVzaW5nIHVuaW9uZnMgYXQgYWxsXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmZzLndhaXRVbnRpbExvYWRlZD8uKCk7XG4gICAgfVxuICAgIHNpZ25hbChfc2lnKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cbiAgICBhc3luYyBmZXRjaCh1cmwsIHBhdGgsIG1vZGUpIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBjYW4ndCB3b3JrIGluIG9sZGVyIHZlcnNpb25zIG9mIG5vZGUuLi4gYnV0IGFsc28gd2Ugc2hvdWxkIHByb2JhYmx5IG9ubHlcbiAgICAgICAgLy8gdXNlIGZldGNoIGluIHRoZSBicm93c2VyLiAgQ291bGQgcmVxdWlyZSBjbGFyaWZpY2F0aW9uIG9yIHRoZSBub2RlLWZldGNoIG1vZHVsZS5cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IChhd2FpdCBmZXRjaCh1cmwpKS5hcnJheUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCB7IGZzIH0gPSB0aGlzO1xuICAgICAgICBpZiAoZnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJmcyBtdXN0IGJlIGRlZmluZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlyID0gKDAsIHBhdGhfMS5kaXJuYW1lKShwYXRoKTtcbiAgICAgICAgYXdhaXQgKDAsIGF3YWl0aW5nXzEuY2FsbGJhY2spKChjYikgPT4ge1xuICAgICAgICAgICAgZnMubWtkaXIoZGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9LCBjYik7XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCAoMCwgYXdhaXRpbmdfMS5jYWxsYmFjaykoKGNiKSA9PiB7XG4gICAgICAgICAgICBmcy53cml0ZUZpbGUocGF0aCwgQnVmZmVyLmZyb20oZGF0YSksIGNiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChtb2RlKSB7XG4gICAgICAgICAgICAvLyBzZXQgZmlsZSBtb2RlLCB0eXBpY2FsbHkgZm9yIGV4ZWN1dGFibGVzXG4gICAgICAgICAgICBhd2FpdCAoMCwgYXdhaXRpbmdfMS5jYWxsYmFjaykoKGNiKSA9PiB7XG4gICAgICAgICAgICAgICAgZnMuY2htb2QocGF0aCwgbW9kZSwgY2IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBXYXNtSW5zdGFuY2VTeW5jO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zdGFuY2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBsb2cgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcIndhc206d29ya2VyOmlvLXVzaW5nLWF0b21pY3NcIik7XG5jbGFzcyBJT0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgbG9nKFwiY3JlYXRpbmcgaW9IYW5kbGVyXCIpO1xuICAgICAgICBpZiAob3B0cy5zdGRpbkxlbmd0aEJ1ZmZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm11c3QgZGVmaW5lIHN0ZGluTGVuZ3RoQnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnN0ZGluQnVmZmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibXVzdCBkZWZpbmUgc3RkaW5CdWZmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMub3V0cHV0TGVuZ3RoQnVmZmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibXVzdCBkZWZpbmUgb3V0cHV0TGVuZ3RoQnVmZmVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLm91dHB1dEJ1ZmZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIm11c3QgZGVmaW5lIG91dHB1dEJ1ZmZlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy5zaWduYWxCdWZmZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJtdXN0IGRlZmluZSBzaWduYWxCdWZmZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGRpbkJ1ZmZlciA9IEJ1ZmZlci5mcm9tKG9wdHMuc3RkaW5CdWZmZXIpO1xuICAgICAgICB0aGlzLnN0ZGluTGVuZ3RoID0gbmV3IEludDMyQXJyYXkob3B0cy5zdGRpbkxlbmd0aEJ1ZmZlcik7XG4gICAgICAgIHRoaXMub3V0cHV0QnVmZmVyID0gQnVmZmVyLmZyb20ob3B0cy5vdXRwdXRCdWZmZXIpO1xuICAgICAgICB0aGlzLm91dHB1dExlbmd0aCA9IG5ldyBJbnQzMkFycmF5KG9wdHMub3V0cHV0TGVuZ3RoQnVmZmVyKTtcbiAgICAgICAgdGhpcy5zaWduYWxTdGF0ZSA9IG5ldyBJbnQzMkFycmF5KG9wdHMuc2lnbmFsQnVmZmVyKTtcbiAgICAgICAgdGhpcy5zbGVlcEFycmF5ID0gbmV3IEludDMyQXJyYXkobmV3IFNoYXJlZEFycmF5QnVmZmVyKDQpKTtcbiAgICB9XG4gICAgc2xlZXAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIGxvZyhcInNsZWVwIHN0YXJ0aW5nLCBtaWxsaXNlY29uZHM9XCIsIG1pbGxpc2Vjb25kcyk7XG4gICAgICAgIC8vIHdhaXQgZm9yIHNsZWVwQXJyYXlbMF0gdG8gY2hhbmdlIGZyb20gMCwgd2hpY2hcbiAgICAgICAgLy8gd2lsbCBuZXZlciBoYXBwZW4uICBUaGUgb25seSBoaXRjaCBpcyB3ZSBuZWVkIHRvIHBlcmlvZGljYWxseVxuICAgICAgICAvLyBjaGVjayBmb3Igc2lnbmFscy5cbiAgICAgICAgd2hpbGUgKG1pbGxpc2Vjb25kcyA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbihtaWxsaXNlY29uZHMsIDUwMCk7XG4gICAgICAgICAgICBBdG9taWNzLndhaXQodGhpcy5zbGVlcEFycmF5LCAwLCAwLCB0KTtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyAtPSB0O1xuICAgICAgICAgICAgaWYgKEF0b21pY3MubG9hZCh0aGlzLnNpZ25hbFN0YXRlLCAwKSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZXJlJ3MgYSBzaWduYWwgd2FpdGluZ1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoZXJlIGNvdWxkIGJlIHNpZ25hbHMgdGhhdCBtYXliZSBkb24ndCBpbnRlcnJ1cHQgc2xlZXA/XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE5PVEU6IHdlIHN1cHBvcnQgYSBtaWxsaXNlY29uZHMgdGltZW91dCwgYnV0IHdlIGRvbid0IGFjdHVhbGx5IHVzZSBpdFxuICAgIC8vIGFueXdoZXJlIChhdCBsZWFzdCB3aGVuIEkgd3JvdGUgdGhpcykuXG4gICAgZ2V0U3RkaW4obWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIC8vIHdhaXQgdG8gY2hhbmdlIHRvIGEgcG9zaXRpdmUgdmFsdWUsIGkuZS4sIHNvbWUgaW5wdXQgdG8gYXJyaXZlXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbWlsbGlzZWNvbmRzICE9IG51bGwgPyBuZXcgRGF0ZSgpLnZhbHVlT2YoKSA6IDA7XG4gICAgICAgIHdoaWxlICh0aGlzLnN0ZGluTGVuZ3RoWzBdID09IDApIHtcbiAgICAgICAgICAgIC8vIHdhaXQgd2l0aCBhIHRpbWVvdXQgb2YgMXMgZm9yIGl0IHRvIGNoYW5nZS5cbiAgICAgICAgICAgIGxvZyhcImdldFN0ZGluOiB3YWl0aW5nIGZvciBzb21lIG5ldyBzdGRpblwiKTtcbiAgICAgICAgICAgIEF0b21pY3Mud2FpdCh0aGlzLnN0ZGluTGVuZ3RoLCAwLCAwLCBtaWxsaXNlY29uZHMgPz8gMTAwMCk7XG4gICAgICAgICAgICBpZiAoQXRvbWljcy5sb2FkKHRoaXMuc2lnbmFsU3RhdGUsIDApKSB7XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGFueSBzaWduYWxzXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGhlcmUgY291bGQgYmUgc2lnbmFscyB0aGF0IG1heWJlIGRvbid0IGludGVycnVwdCBpbnB1dD9cbiAgICAgICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWlsbGlzZWNvbmRzICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZGluTGVuZ3RoWzBdID09IDAgJiZcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHN0YXJ0ID4gbWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vdyB0aGVyZSBpcyBzdGRpbiB3YWl0aW5nIGZvciB1czogIGhvdyBtdWNoP1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLnN0ZGluTGVuZ3RoWzBdO1xuICAgICAgICBsb2coXCJnZXRTdGRpbjogaGF2ZSBzdGRpbiwgcHJvY2Vzc2luZyBcIiwgbGVuLCBcIiBieXRlc1wiKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IEJ1ZmZlci5hbGxvYyhsZW4pO1xuICAgICAgICB0aGlzLnN0ZGluQnVmZmVyLmNvcHkoZGF0YSwgMCwgMCwgbGVuKTtcbiAgICAgICAgLy8gUmVzZXQgdGhlIGJ1ZmZlcjpcbiAgICAgICAgQXRvbWljcy5zdG9yZSh0aGlzLnN0ZGluTGVuZ3RoLCAwLCAwKTtcbiAgICAgICAgQXRvbWljcy5ub3RpZnkodGhpcy5zdGRpbkxlbmd0aCwgMCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBzZW5kT3V0cHV0KHN0cmVhbSwgZGF0YSkge1xuICAgICAgICBpZiAobG9nLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGxvZyhcInNlbmRPdXRwdXRcIiwgc3RyZWFtLCBkYXRhLCB7IGxlbjogdGhpcy5vdXRwdXRMZW5ndGhbMF0gfSwgbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwbGFjZSB0aGUgbmV3IGRhdGEgaW4gdGhlIG91dHB1dEJ1ZmZlciwgc28gdGhhdCB0aGUgbWFpbiB0aHJlYWQgY2FuIHJlY2VpdmUgaXQuXG4gICAgICAgIC8vIFRoZSBmb3JtYXQgaXM6XG4gICAgICAgIC8vICAgWzF8Ml1bYWxsIG9mIHRoZSBhY3R1YWwgZGF0YV1cbiAgICAgICAgLy8gd2hlcmUgMSA9IHN0ZG91dCBhbmQgMiA9IHN0ZGVyci4gIFB1dHRpbmcgYm90aCBzdGRvdXQgYW5kIHN0ZGVyciBpbiB0aGUgc2FtZVxuICAgICAgICAvLyBidWZmZXIgbWVhbnMgb25lIGxlc3MgYnVmZmVyIHRvIGRlYWwgd2l0aCwgKmFuZCogaXMgYSB2ZXJ5IHNpbXBsZSB3YXkgdG8gYXZvaWRcbiAgICAgICAgLy8gYW55IGlzc3VlcyB3aXRoIG1peGluZyB1cCB0aGUgb3JkZXJpbmcgb2Ygb3V0cHV0LlxuICAgICAgICAvLyBUaGF0IHNhaWQsIGlmIHRoZXJlIGlzIHN0ZG91dCBpbiB0aGUgYnVmZmVyIGFuZCB5b3Ugd3JpdGUgc3RkZXJyLCB3ZSBtdXN0IGZpcnN0XG4gICAgICAgIC8vIHdhaXQgdW50aWwgdGhlIG1haW4gdGhyZWFkIGVtcHRpZXMgdGhlIGJ1ZmZlciBmaXJzdCwgc2luY2Ugb3VyIGRhdGEgc3RydWN0dXJlXG4gICAgICAgIC8vIGlzIHNvIHNpbXBsZSB0aGF0IHdlIGNhbid0IHN0b3JlIGJvdGggc3Rkb3V0IGFuZCBzdGRlcnIgaW4gdGhlIGJ1ZmZlciBhdCB0aGVcbiAgICAgICAgLy8gc2FtZSB0aW1lLlxuICAgICAgICB3aGlsZSAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3aGlsZSAoKHRoaXMub3V0cHV0TGVuZ3RoWzBdID4gMCAmJiB0aGlzLm91dHB1dEJ1ZmZlclswXSAhPSBzdHJlYW0pIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRwdXRMZW5ndGhbMF0gPT0gdGhpcy5vdXRwdXRCdWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgbWFpbiB0aHJlYWQgdG8gcmVhZCwgYmVjYXVzZSBvdXIgYnVmZmVyIG9ubHkgaG9sZHMgb25lXG4gICAgICAgICAgICAgICAgLy8gdHlwZSBvZiBzdHJlYW0gYXQgYSB0aW1lLCBmb3Igc2ltcGxpY2l0eS5cbiAgICAgICAgICAgICAgICAvLyBPciwgd2UgaGF2ZSBubyBtb3JlIHNwYWNlLlxuICAgICAgICAgICAgICAgIEF0b21pY3Mud2FpdCh0aGlzLm91dHB1dExlbmd0aCwgMCwgdGhpcy5vdXRwdXRMZW5ndGhbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3V0cHV0TGVuZ3RoWzBdID09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHN0cmVhbSB0eXBlIGZpZWxkLlxuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0QnVmZmVyWzBdID0gc3RyZWFtO1xuICAgICAgICAgICAgICAgIHRoaXMub3V0cHV0TGVuZ3RoWzBdID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgYXMgbXVjaCBkYXRhIGFzIHdlIGNhbi5cbiAgICAgICAgICAgIGNvbnN0IGNvcGllZCA9IGRhdGEuY29weSh0aGlzLm91dHB1dEJ1ZmZlciwgdGhpcy5vdXRwdXRMZW5ndGhbMF0pO1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEuc3ViYXJyYXkoY29waWVkKTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBjb3BpZWQgKyB0aGlzLm91dHB1dExlbmd0aFswXTtcbiAgICAgICAgICAgIGxvZyhcInNldHRpbmcgb3V0cHV0IGJ1ZmZlciBzaXplIHRvIFwiLCBuKTtcbiAgICAgICAgICAgIEF0b21pY3Muc3RvcmUodGhpcy5vdXRwdXRMZW5ndGgsIDAsIG4pO1xuICAgICAgICAgICAgQXRvbWljcy5ub3RpZnkodGhpcy5vdXRwdXRMZW5ndGgsIDApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRPRE86IGluIGdlbmVyYWwgdGhlcmUgY291bGQgYmUgbW9yZSB0aGFuIG9uZSBzaWduYWwgYXQgb25jZS4uLiBvZiBjb3Vyc2UsIHJpZ2h0IG5vdyB3ZSBvbmx5IHN1cHBvcnQgc2lnaW50ID0gMi5cbiAgICBnZXRTaWduYWxTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgc2lnbmFsID0gQXRvbWljcy5sb2FkKHRoaXMuc2lnbmFsU3RhdGUsIDApO1xuICAgICAgICBpZiAoc2lnbmFsKSB7XG4gICAgICAgICAgICBsb2coXCJzaWduYWxTdGF0ZVwiLCB0aGlzLnNpZ25hbFN0YXRlWzBdKTtcbiAgICAgICAgICAgIC8vIGNsZWFyIHNpZ25hbCBzdGF0ZSBzbyB3ZSBjYW4gZ2V0IGEgbmV3IHNpZ25hbFxuICAgICAgICAgICAgQXRvbWljcy5zdG9yZSh0aGlzLnNpZ25hbFN0YXRlLCAwLCAwKTtcbiAgICAgICAgICAgIC8vIHRlbGwgQyBwcm9ncmFtIGFib3V0IHRoZSBzaWduYWwgd2UgZm91bmQuXG4gICAgICAgICAgICByZXR1cm4gc2lnbmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IElPSGFuZGxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlvLXVzaW5nLWF0b21pY3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBsb2cgPSAoMCwgZGVidWdfMS5kZWZhdWx0KShcIndhc206d29ya2VyOmlvLXVzaW5nLWF0b21pY3NcIik7XG5jb25zdCBTSUdOQUxfQ0hFQ0tfTVMgPSA1MDA7XG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5jbGFzcyBJT0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMsIHNlcnZpY2VXb3JrZXJCcm9rZW4pIHtcbiAgICAgICAgdGhpcy5sYXN0U2lnbmFsQ2hlY2sgPSAwO1xuICAgICAgICBsb2cob3B0cyk7XG4gICAgICAgIHRoaXMuaWQgPSBvcHRzLmlkO1xuICAgICAgICB0aGlzLnNlcnZpY2VXb3JrZXJCcm9rZW4gPSBzZXJ2aWNlV29ya2VyQnJva2VuO1xuICAgICAgICBpZiAodGhpcy5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLmlkfSBtdXN0IGJlIGEgdjQgdXVpZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3QodXJsLCBib2R5ID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICByZXF1ZXN0Lm9wZW4oXCJQT1NUXCIsIGAvcHl0aG9uLXdhc20tc3cvJHt1cmx9YCwgZmFsc2UpOyAvLyBmYWxzZSA9IHN5bmNocm9ub3VzXG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcImNhY2hlLWNvbnRyb2xcIiwgXCJuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MFwiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZChKU09OLnN0cmluZ2lmeShib2R5KSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlV29ya2VyQnJva2VuKCk7XG4gICAgICAgICAgICB3YXJuQnJva2VuKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPSAzMDQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VydmljZVdvcmtlckJyb2tlbigpO1xuICAgICAgICAgICAgd2FybkJyb2tlbihgaW52YWxpZCBzdGF0dXM9JHtyZXF1ZXN0LnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG4gICAgc2xlZXAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIGxvZyhcInNsZWVwIFwiLCBtaWxsaXNlY29uZHMpO1xuICAgICAgICBjb25zdCBzdGFydCA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICB3aGlsZSAobmV3IERhdGUoKS52YWx1ZU9mKCkgLSBzdGFydCA8PSBtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgc2xlZXAgdGhlIGVudGlyZSwgYmVjYXVzZSAoMSkgd2Ugd2FudCB0byBjaGVjayBmb3Igc2lnbmFscyBwZXJpb2RpY2FsbHksXG4gICAgICAgICAgICAgICAgLy8gYW5kICgyKSBsb25nIHN5bmNocm9ub3VzIHJlcXVlc3RzIENSQVNIIHRoZSBzZXJ2aWNlIHdvcmtlciEgIE9uIFNhZmFyaSwgaXQgd2lsbCBraWxsXG4gICAgICAgICAgICAgICAgLy8gdGhlIHdvcmtlciBhbmQgYmFuIGl0LiAgU28gZG8gTk9UIGRvIHRoYXQuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0KFwic2xlZXBcIiwgeyBtczogTWF0aC5taW4obWlsbGlzZWNvbmRzLCA1MDApIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvZyhcInNsZWVwIGVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0U2lnbmFsKGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoZXJlIGNvdWxkIGJlIHNpZ25hbHMgdGhhdCBtYXliZSBkb24ndCBpbnRlcnJ1cHQgc2xlZXA/XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldFN0ZGluKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAvLyBEZXNwaXRlIGJsb2NraW5nIHdoZW4gbWlsbGlzZWNvbmRzIGlzIG5vdCBzZXQsIHRoaXMgZG9lc24ndCBibG9ja1xuICAgICAgICAvLyBjb250cm9sK2Mgc2lnbmFsIGJlY2F1c2Ugd2Ugc2VuZCBcIl5DXCIgdG8gc3RkaW4gd2hlbiBnZXR0aW5nIHRoYXQgc2lnbmFsLlxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0KFwicmVhZC1zdGRpblwiLCB7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIG1zOiBtaWxsaXNlY29uZHMgPz8gMzAwMCxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShyZXF1ZXN0LnJlc3BvbnNlVGV4dCA/PyBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRJTUVPVVQgLS0gIHdpbGwgdHJ5IGFnYWluIHNvb24uXG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSB0cnkgZm9yIGEgZmV3IHNlY29uZHMgdG8gZ2V0IG91dHB1dCwgdGhlbiBmYWlsIGFuZCBsZXQgY2xpZW50IGNhbGxcbiAgICAgICAgICAgIC8vIHRoaXMgYWdhaW4uICBJdCAqKmRvZXMgbm90IHdvcmsqKiB0byBqdXN0IGFsbG93IGZvciBhIHZlcnkgbG9uZyBzeW5jaHJvbm91c1xuICAgICAgICAgICAgLy8gcmVxdWVzdCBhbmQgbG9uZyByZXNwb25zZSBpbiB0aGUgc2VydmljZSB3b3JrZXIuXG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oXCJcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0U2lnbmFsKGNsZWFyKSB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLnJlcXVlc3QoXCJyZWFkLXNpZ25hbFwiLCB7IGNsZWFyLCBpZDogdGhpcy5pZCB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHJlcXVlc3QucmVzcG9uc2VUZXh0KSA/PyAwO1xuICAgIH1cbiAgICBzZW5kT3V0cHV0KHN0cmVhbSwgZGF0YSkge1xuICAgICAgICBsZXQgc3RyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RyID0gZGVjb2Rlci5kZWNvZGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgZGF0YSB3ZSBjYW4ndCBkZWNvZGUuIFdvbid0IGJlIGFibGUgdG8gZGlzcGxheSBhbnl3YXlzLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZyhcInNlbmRPdXRwdXRcIiwgc3RyKTtcbiAgICAgICAgLy8gc2VuZCBuZXcgZGF0YSB0byB0aGUgc2VydmljZSB3b3JrZXIsIHNvIHRoYXQgdGhlIG1haW4gdGhyZWFkIGNhbiByZWNlaXZlIGl0LlxuICAgICAgICB0aGlzLnJlcXVlc3QoXCJ3cml0ZS1vdXRwdXRcIiwge1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBzdHJlYW06IGAke3N0cmVhbX1gLFxuICAgICAgICAgICAgZGF0YTogc3RyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gUHl0aG9uIGtlcm5lbCB3aWxsIGNhbGwgdGhpcyBWRVJZIGZyZXF1ZW50bHksIHdoaWNoIGlzIGZpbmUgZm9yXG4gICAgLy8gY2hlY2tpbmcgYW4gYXRvbWljLCBidXQgTk9UIGZvciB1c2luZyB4bWxodHRwcmVxdWVzdC5cbiAgICBnZXRTaWduYWxTdGF0ZSgpIHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RTaWduYWxDaGVjayA8IFNJR05BTF9DSEVDS19NUykge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXN0U2lnbmFsQ2hlY2sgPSBub3c7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNpZ25hbCh0cnVlKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBJT0hhbmRsZXI7XG5mdW5jdGlvbiB3YXJuQnJva2VuKGVyciwgbWlsbGlzZWNvbmRzID0gMzAwMCkge1xuICAgIC8vIFNvbWV0aGluZyBzdHJvbmdseSBzdWdnZXN0cyB0aGUgc2VydmljZSB3b3JrZXIgaXNuJ3Qgd29ya2luZywgZS5nLiwgd2hpY2ggd291bGQgaGFwcGVuIG92ZXJcbiAgICAvLyBub24gaHR0cHMgbm9uIGxvY2FsaG9zdCAob3IgZXZlbiBmaXJlZm94IGluY29nbml0byBpbiBhbGwgY2FzZXMpLlxuICAgIC8vIElmIHdlIGp1c3Qgc2lsZW50bHkgaWdub3JlIHRoaXMsIHRoZW4gd2UnbGwgbGlrZWx5IERPUyBvdXIgc2VydmVyLCBzbyBpbnN0ZWFkIHdlIGRvIGEgQ1BVXG4gICAgLy8gY29uc3VtaW5nIGxvY2sgZm9yIGEgd2hpbGUsIHNpbmNlIEkgZG9uJ3Qga25vdyB3aGF0IGVsc2UgdG8gZG8uICBUaGlzIGJ1cm5zIENQVSwgYnV0IHN0b3BzIERPUy5cbiAgICAvLyBPSywgdXBvbiBleHBlcmltZW50aW5nLCBpdCB0dXJucyBvdXQgdGhpcyBzb3J0IG9mIHRoaW5nIGhhcHBlbnMgZXZlcnkgb25jZSBpbiBhIHdoaWxlLlxuICAgIC8vIEluIHNvbWUgY2FzZXMsIGl0IGNhbiBoYXBwZW4gY29uc3RhbnRseSwgZS5nLiwgRmlyZWZveCBvdmVyIGh0dHAsIHNvIHdlIGRvIGd1YXJkIGFnYWluc3QgaXQuXG4gICAgY29uc29sZS53YXJuKFwic2VydmljZSB3b3JrZXIgbm90IHdvcmtpbmcsIHNvIGJ1cm5pbmcgQ1BVIHRvIGF2b2lkIERPUydpbmcgdGhlIHNlcnZlciAtLSBcIiwgZXJyKTtcbiAgICBjb25zdCB0MCA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgIHdoaWxlIChuZXcgRGF0ZSgpLnZhbHVlT2YoKSAtIHQwIDw9IG1pbGxpc2Vjb25kcykgeyB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pby11c2luZy1zZXJ2aWNlLXdvcmtlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIENyZWF0ZSBhIHNpbXVsYXRlZCBwb3NpeCBlbnZpcm9ubWVudCBmb3IgdGhlIGJyb3dzZXIuXG4vLyBXZSB3aWxsIHdhbnQgdG8gbW92ZSB0aGlzIHRvIGl0cyBvd24gcGFja2FnZS5cbi8vIEl0IG1ha2VzIG1vcmUgc2Vuc2UgdGhvdWdoIHRvIHB1dCBhbGwgdGhlIGFzc3VtcHRpb25zIGFib3V0IHdoYXQgXCJwb3NpeCBpbiB0aGUgYnJvd3NlclwiIGlzIGluXG4vLyBpdHMgb3duIG1vZHVsZSwgcmF0aGVyIHRoYW4gcmFuZG9tbHkgaW4gdGhlIGZpbGVzIGluICBzcmMvd2FzbS9wb3NpeC5cbi8vIEFsc28sIHdlIGNhbiBlbnN1cmUgdGhpcyBoYXMgdGhlIHNhbWUgaW50ZXJmYWNlIGFzIHBvc2l4LW5vZGUgcHJvdmlkZXMuXG4vLyBUT0RPOiBNYXliZSB0aGlzIGdvZXMgaW4gcG9zaXgtbm9kZSBhcyB0aGUgZmFsbGJhY2sgaW4gY2FzZSB3ZSdyZSBvbiBXaW5kb3dzIChzYXkpLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcG9zaXggPSB7XG4gICAgZ2V0cGlkOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLnBpZDtcbiAgICB9LFxuICAgIGdldHBwaWQ6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBvc2l4LmdldHBpZD8uKCkgPz8gMTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zaXgtYnJvd3Nlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHBvc2l4XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3Bvc2l4XCIpKTtcbmNvbnN0IHNlbmRfdG9fd2FzbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3NlbmQtdG8td2FzbVwiKSk7XG5jb25zdCByZWN2X2Zyb21fd2FzbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3JlY3YtZnJvbS13YXNtXCIpKTtcbmNvbnN0IGxvZGFzaF8xID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwia2VybmVsOnBvc2l4LWNvbnRleHRcIik7XG5jbGFzcyBQb3NpeENvbnRleHQge1xuICAgIGNvbnN0cnVjdG9yKHsgd2FzaUNvbmZpZywgbWVtb3J5LCB3YXNpIH0pIHtcbiAgICAgICAgdGhpcy5tZW1vcnkgPSBtZW1vcnk7XG4gICAgICAgIHRoaXMud2FzaSA9IHdhc2k7XG4gICAgICAgIHRoaXMud2FzaUNvbmZpZyA9IHdhc2lDb25maWc7XG4gICAgICAgIGNvbnN0IHsgYmluZGluZ3MsIHNsZWVwIH0gPSB3YXNpQ29uZmlnO1xuICAgICAgICBjb25zdCBjYWxsRnVuY3Rpb24gPSB0aGlzLmNhbGxGdW5jdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICBjb25zdCBjYWxsV2l0aFN0cmluZyA9IHRoaXMuY2FsbFdpdGhTdHJpbmcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5wb3NpeEVudiA9IHRoaXMuY3JlYXRlUG9zaXhFbnYoe1xuICAgICAgICAgICAgbWVtb3J5LFxuICAgICAgICAgICAgd2FzaSxcbiAgICAgICAgICAgIGJpbmRpbmdzLFxuICAgICAgICAgICAgY2FsbEZ1bmN0aW9uLFxuICAgICAgICAgICAgY2FsbFdpdGhTdHJpbmcsXG4gICAgICAgICAgICBzbGVlcCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNyZWF0ZVBvc2l4RW52KHsgYmluZGluZ3MsIG1lbW9yeSwgd2FzaSwgY2FsbEZ1bmN0aW9uLCBjYWxsV2l0aFN0cmluZywgc2xlZXAsIH0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0ge1xuICAgICAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICAgICAgZnM6IGJpbmRpbmdzLmZzLFxuICAgICAgICAgICAgc2VuZDogbmV3IHNlbmRfdG9fd2FzbV8xLmRlZmF1bHQoeyBtZW1vcnksIGNhbGxGdW5jdGlvbiB9KSxcbiAgICAgICAgICAgIHJlY3Y6IG5ldyByZWN2X2Zyb21fd2FzbV8xLmRlZmF1bHQoeyBtZW1vcnksIGNhbGxGdW5jdGlvbiB9KSxcbiAgICAgICAgICAgIHdhc2ksXG4gICAgICAgICAgICBydW46IHRoaXMucnVuLmJpbmQodGhpcyksXG4gICAgICAgICAgICBwcm9jZXNzLFxuICAgICAgICAgICAgb3M6IGJpbmRpbmdzLm9zID8/IHt9LFxuICAgICAgICAgICAgcG9zaXg6IGJpbmRpbmdzLnBvc2l4ID8/IHt9LFxuICAgICAgICAgICAgY2hpbGRfcHJvY2VzczogYmluZGluZ3MuY2hpbGRfcHJvY2VzcyA/PyB7fSxcbiAgICAgICAgICAgIG1lbW9yeSxcbiAgICAgICAgICAgIGNhbGxGdW5jdGlvbixcbiAgICAgICAgICAgIGNhbGxXaXRoU3RyaW5nLFxuICAgICAgICAgICAgZ2V0Y3dkOiB0aGlzLmdldGN3ZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZnJlZTogdGhpcy5mcmVlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBzbGVlcCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuICgwLCBwb3NpeF8xLmRlZmF1bHQpKHRoaXMuY29udGV4dCk7XG4gICAgfVxuICAgIGluaXQod2FzbSkge1xuICAgICAgICB0aGlzLndhc20gPSB3YXNtO1xuICAgICAgICB0aGlzLnBvc2l4RW52LmluaXQoKTtcbiAgICB9XG4gICAgLy8gc2V0IGFsbCB0aGUgcG9zaXggZnVuY3Rpb25zIGluIGVudiwgYnV0IGRvIE5PVCBvdmVyd3JpdGVcbiAgICAvLyBhbnl0aGluZyB0aGF0IGlzIGFscmVhZHkgc2V0LlxuICAgIGluamVjdEZ1bmN0aW9ucyhlbnYpIHtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMucG9zaXhFbnYpIHtcbiAgICAgICAgICAgIGlmIChlbnZbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVudltuYW1lXSA9IHRoaXMucG9zaXhFbnZbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsbFdpdGhTdHJpbmcoZnVuYywgc3RyLCAuLi5hcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLndhc20gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ3YXNtIG11c3QgYmUgZGVmaW5lXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndhc20uY2FsbFdpdGhTdHJpbmcoZnVuYywgc3RyLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgY2FsbEZ1bmN0aW9uKG5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMud2FzbSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIndhc20gbXVzdCBiZSBkZWZpbmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZiA9IHRoaXMud2FzbS5nZXRGdW5jdGlvbihuYW1lKTtcbiAgICAgICAgaWYgKGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGVycm9yIC0gJHtuYW1lfSBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBnZXRjd2QoKSB7XG4gICAgICAgIGlmICh0aGlzLndhc20gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJ3YXNtIG11c3QgYmUgZGVmaW5lXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndhc20uZ2V0Y3dkID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBlcnJvciAtIGdldGN3ZCBpcyBub3QgZGVmaW5lZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndhc20uZ2V0Y3dkKCk7XG4gICAgfVxuICAgIGZyZWUocHRyKSB7XG4gICAgICAgIHRoaXMud2FzbT8uZXhwb3J0cy5jX2ZyZWUocHRyKTtcbiAgICB9XG4gICAgcnVuKGFyZ3MpIHtcbiAgICAgICAgbG9nKFwicnVuXCIsIGFyZ3MpO1xuICAgICAgICBjb25zdCB7IHdhc20gfSA9IHRoaXM7XG4gICAgICAgIGlmICh3YXNtID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwid2FzbSBtdXN0IGJlIGRlZmluZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gYXJnc1swXTtcbiAgICAgICAgaWYgKHBhdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJhcmdzIG11c3QgaGF2ZSBsZW5ndGggYXQgbGVhc3QgMVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzYXZlIG1lbW9yeSBhbmQgZnVuY3Rpb24gY2FjaGluZyBjb250ZXh0XG4gICAgICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgICAgICAgbWVtb3J5OiBuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIpLnNsaWNlKCksXG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQuc3RhdGUsXG4gICAgICAgICAgICB3YXNpOiB0aGlzLndhc2kuZ2V0U3RhdGUoKSxcbiAgICAgICAgICAgIGV4aXQ6IHRoaXMud2FzaUNvbmZpZy5iaW5kaW5ncy5leGl0LFxuICAgICAgICAgICAgZGxvcGVuOiB3YXNtLmluc3RhbmNlLmdldERsb3BlblN0YXRlKCksXG4gICAgICAgIH07XG4gICAgICAgIC8vIEkgd29uZGVyIGlmIEkgY291bGQgdXNlIGltbWVyLmpzIGluc3RlYWQgZm9yIGFueSBvZiB0aGlzPyAgSXQgbWlnaHQgYmUgc2xvd2VyLlxuICAgICAgICB0aGlzLmNvbnRleHQuc3RhdGUgPSAoMCwgbG9kYXNoXzEuY2xvbmVEZWVwKShzdGF0ZS5jb250ZXh0KTtcbiAgICAgICAgY29uc3Qgd2FzaV9zdGF0ZSA9ICgwLCBsb2Rhc2hfMS5jbG9uZURlZXApKHN0YXRlLndhc2kpO1xuICAgICAgICBsZXQgcmV0dXJuX2NvZGUgPSAtMTsgLy8gbm90IHNldCA9PT4gc29tZXRoaW5nIHdlbnQgd3Jvbmcgc2luY2UgZXhpdCBuZXZlciBjYWxsZWQuXG4gICAgICAgIHdhc2lfc3RhdGUuYmluZGluZ3MuZXhpdCA9IChjb2RlKSA9PiB7XG4gICAgICAgICAgICAvLyB1bmNvbW1lbnQgdGhpcyBmb3IgZGVidWdnaW5nIG9ubHlcbiAgICAgICAgICAgIC8vIGNvbnNvbGUudHJhY2UoYGV4aXQoJHtjb2RlfSkgY2FsbGVkYCk7XG4gICAgICAgICAgICByZXR1cm5fY29kZSA9IGNvZGU7XG4gICAgICAgICAgICAvLyBhZnRlciB0aGlzLCB0aGUgbWFpbiBjYWxsIGJlbG93IHRocm93cyBhbiBleGNlcHRpb25cbiAgICAgICAgICAgIC8vIHRoZW4gdGhlIHJldHVybl9jb2RlIGdldHMgcmV0dXJuZWQgcmlnaHQgYWZ0ZXIgdGhlXG4gICAgICAgICAgICAvLyBmaW5hbGx5IGNsZWFuc3RoaW5ncyB1cC5cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud2FzaS5zZXRTdGF0ZSh3YXNpX3N0YXRlKTtcbiAgICAgICAgICAgIGxldCBtYWluO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGRvZXMgZGxvcGVuIG9mIGFyZ3NbMF06XG4gICAgICAgICAgICAgICAgbWFpbiA9IHdhc20uZ2V0RnVuY3Rpb24oXCJfX21haW5fYXJnY19hcmd2XCIsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgIGlmIChtYWluID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJtYWluIGlzIG51bGxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBtYWluID0gd2FzbS5nZXRGdW5jdGlvbihcIm1haW5cIiwgYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYWluID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwibWFpbiBpcyBudWxsXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHthcmdzWzBdfTogJHtlcnJ9YCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxMjc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbihhcmdzLmxlbmd0aCwgd2FzbS5zZW5kLmFycmF5T2ZTdHJpbmdzKGFyZ3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0dXJuX2NvZGUgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29kZSBkaWQgbm90IGdldCBzZXQgLS0gc29tZXRoaW5nIGNyYXNoZWQgYmFkbHkuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYXJnc1swXSwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEzOTsgLy8gc2VnZmF1bHQgcmV0dXJuIGNvZGUuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJldHVybl9jb2RlID09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gY29kZSBkaWQgbm90IGdldCBzZXQgLS0gc29tZXRoaW5nIGJhZD9cbiAgICAgICAgICAgICAgICByZXR1cm4gMTM5OyAvLyBzZWdmYXVsdCByZXR1cm4gY29kZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5fY29kZTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIC8vIEZyZWUgdXAgdGFibGVzIGFsbG9jYXRlZCB0byB0aGUgZHluYW1pYyBsaWJyYXJ5IGluIEphdmFzY3JpcHQgbWVtb3J5LiBUaGVzZVxuICAgICAgICAgICAgLy8gd291bGQgcGVyc2lzdCBldmVuIGFmdGVyIHJlc2V0dGluZyBtZW1vcnkgYmVsb3csIHdoaWNoIHdvdWxkIGJyZWFrIGV2ZXJ5dGhpbmcuXG4gICAgICAgICAgICB3YXNtLmluc3RhbmNlLnNldERsb3BlblN0YXRlKHN0YXRlLmRsb3Blbik7XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG1lbW9yeSB0byBob3cgaXQgd2FzIGJlZm9yZSBydW5uaW5nIHRoZSBzdWJwcm9jZXNzLlxuICAgICAgICAgICAgLy8gVGhpcyBvZiBjb3Vyc2Ugc2FmZWx5IGZyZWVzIHVwIGFuZCB1bmRvZXMgYWxsIGNoYW5nZXMgbWFkZSB0b1xuICAgICAgICAgICAgLy8gdGhlIG1lbW9yeSB3aGVuIHJ1bm5pbmcgY29kZS5cbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlcikuc2V0KHN0YXRlLm1lbW9yeSk7XG4gICAgICAgICAgICAvLyBSZXN0b3JlIHBvc2l4IGNvbnRleHQgdG8gYmVmb3JlIHJ1bm5pbmcgdGhlIHN1YnByb2Nlc3MuXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuc3RhdGUgPSBzdGF0ZS5jb250ZXh0O1xuICAgICAgICAgICAgdGhpcy53YXNpLnNldFN0YXRlKHN0YXRlLndhc2kpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zaXhDb250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zaXgtY29udGV4dC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVjdkZyb21XYXNtQWJzdHJhY3RCYXNlID0gdm9pZCAwO1xuY29uc3QgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbi8vIHNpemUgb2YgYSBwb2ludGVyIGluIGJ5dGVzXG5jb25zdCBTSVpFT0ZfUE9JTlRFUiA9IDQ7XG5jbGFzcyBSZWN2RnJvbVdhc21BYnN0cmFjdEJhc2Uge1xuICAgIC8vIGFsd2F5cyBnZXQgdGhlIHZpZXcgYW55IHRpbWUgYWZ0ZXIgYSBtYWxsb2MgbWF5IGhhdmUgaGFwcGVuZWQhXG4gICAgdmlldygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyh0aGlzLm1lbW9yeS5idWZmZXIpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBudW1iZXIgb2YgKmJ5dGVzKiBpbiBhIGNoYXIqLlxuICAgIHN0cmxlbihjaGFyUHRyKSB7XG4gICAgICAgIC8vIFRPRE86IGJlbmNobWFyayB0aGUgSlMgdnMgd2FzbSBpbXBsZW1lbnRhdGlvbiFcbiAgICAgICAgLy8gcmV0dXJuIHRoaXMuY2FsbEZ1bmN0aW9uKFwic3RyaW5nTGVuZ3RoXCIsIGNoYXJQdHIpO1xuICAgICAgICBjb25zdCBtZW0gPSBuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIpO1xuICAgICAgICBsZXQgaSA9IGNoYXJQdHI7XG4gICAgICAgIHdoaWxlIChtZW1baV0pIHtcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaSAtIGNoYXJQdHI7XG4gICAgfVxuICAgIHBvaW50ZXIocHRyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcoKS5nZXRVaW50MzIocHRyLCB0cnVlKTtcbiAgICB9XG4gICAgdTMyKHB0cikge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3KCkuZ2V0VWludDMyKHB0ciwgdHJ1ZSk7XG4gICAgfVxuICAgIGkzMihwdHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldygpLmdldEludDMyKHB0ciwgdHJ1ZSk7XG4gICAgfVxuICAgIHBvaW50ZXIyKHB0cikge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlcilbcHRyXTtcbiAgICB9XG4gICAgLy8gbGVuIGlzIHRoZSBudW1iZXIgb2YgYnl0ZXMsIG5vdCB0aGUgbnVtYmVyIG9mIHV0Zi04IGNoYXJhY3RlcnMuXG4gICAgc3RyaW5nKHB0ciwgYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIG5vIGxlbiBpbiBieXRlcyBnaXZlbiwgc28gYXNzdW1lIGl0IGlzIGEgbnVsbCB0ZXJtaW5hdGVkIHN0cmluZy5cbiAgICAgICAgICAgIGJ5dGVzID0gdGhpcy5zdHJsZW4ocHRyKTtcbiAgICAgICAgICAgIGlmIChieXRlcyA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiYnVnXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNsaWNlID0gdGhpcy5tZW1vcnkuYnVmZmVyLnNsaWNlKHB0ciwgcHRyICsgYnl0ZXMpO1xuICAgICAgICByZXR1cm4gdGV4dERlY29kZXIuZGVjb2RlKHNsaWNlKTtcbiAgICB9XG4gICAgYnVmZmVyKHB0ciwgYnl0ZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5tZW1vcnkuYnVmZmVyLnNsaWNlKHB0ciwgcHRyICsgYnl0ZXMpKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlci5zbGljZShwdHIsIHB0ciArIGJ5dGVzKSk7XG4gICAgfVxuICAgIC8vIFJlY2VpdmUgYSBudWxsLXRlcm1pbmF0ZWQgYXJyYXkgb2Ygc3RyaW5ncy5cbiAgICBhcnJheU9mU3RyaW5ncyhwdHIpIHtcbiAgICAgICAgY29uc3QgdiA9IFtdO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMucG9pbnRlcihwdHIpO1xuICAgICAgICAgICAgaWYgKCFwKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgdi5wdXNoKHRoaXMuc3RyaW5nKHApKTtcbiAgICAgICAgICAgIHB0ciArPSBTSVpFT0ZfUE9JTlRFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG4gICAgLy8gUmVjZWl2ZSBhIG51bGwtdGVybWluYXRlZCBhcnJheSBvZiBpbnRzXG4gICAgYXJyYXlPZkkzMihwdHIpIHtcbiAgICAgICAgY29uc3QgdiA9IFtdO1xuICAgICAgICBpZiAocHRyID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5wb2ludGVyKHB0cik7XG4gICAgICAgICAgICBpZiAoIXApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB2LnB1c2godGhpcy5pMzIocCkpO1xuICAgICAgICAgICAgcHRyICs9IFNJWkVPRl9QT0lOVEVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVjdkZyb21XYXNtQWJzdHJhY3RCYXNlID0gUmVjdkZyb21XYXNtQWJzdHJhY3RCYXNlO1xuY2xhc3MgUmVjdkZyb21XYXNtIGV4dGVuZHMgUmVjdkZyb21XYXNtQWJzdHJhY3RCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lbW9yeSwgY2FsbEZ1bmN0aW9uIH0pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5tZW1vcnkgPSBtZW1vcnk7XG4gICAgICAgIHRoaXMuY2FsbEZ1bmN0aW9uID0gY2FsbEZ1bmN0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFJlY3ZGcm9tV2FzbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlY3YtZnJvbS13YXNtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkZ1bmN0aW9ucyBmb3Igc2VuZGluZyBvYmplY3RzIGZyb20gSmF2YXNjcmlwdCB0byBXQVNNLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VuZFRvV2FzbUFic3RyYWN0QmFzZSA9IHZvaWQgMDtcbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmNsYXNzIFNlbmRUb1dhc21BYnN0cmFjdEJhc2Uge1xuICAgIC8vIG1hbGxvYyBpcyBwdWJsaWMgaW4gU2VuZCBzaW5jZSBpdCdzIFwic2VuZGluZyByYW5kb20gYnl0ZXNcIi5cbiAgICBtYWxsb2MoYnl0ZXMpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5jYWxsRnVuY3Rpb24oXCJjX21hbGxvY1wiLCBieXRlcyk7XG4gICAgICAgIGlmICghcHRyKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk91dCBvZiBNZW1vcnlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHB0cjtcbiAgICB9XG4gICAgZnJlZShwdHIpIHtcbiAgICAgICAgdGhpcy5jYWxsRnVuY3Rpb24oXCJjX2ZyZWVcIiwgcHRyKTtcbiAgICB9XG4gICAgLy8gYWx3YXlzIGdldCB0aGUgdmlldyBhbnkgdGltZSBhZnRlciBhIG1hbGxvYyBtYXkgaGF2ZSBoYXBwZW5lZCFcbiAgICB2aWV3KCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGFWaWV3KHRoaXMubWVtb3J5LmJ1ZmZlcik7XG4gICAgfVxuICAgIHBvaW50ZXIoYWRkcmVzcywgcHRyKSB7XG4gICAgICAgIHRoaXMudmlldygpLnNldFVpbnQzMihhZGRyZXNzLCBwdHIsIHRydWUpOyAvLyB0cnVlID0gbGl0dGxlIGVuZGlhbiEhXG4gICAgfVxuICAgIGkzMihwdHIsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmlldygpLnNldEludDMyKHB0ciwgdmFsdWUsIHRydWUpO1xuICAgIH1cbiAgICBmNjQocHRyLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcoKS5zZXRGbG9hdDY0KHB0ciwgdmFsdWUsIHRydWUpO1xuICAgIH1cbiAgICBmMzIocHRyLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcoKS5zZXRGbG9hdDMyKHB0ciwgdmFsdWUsIHRydWUpO1xuICAgIH1cbiAgICB1MzIocHRyLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnZpZXcoKS5zZXRVaW50MzIocHRyLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIFdBUk5JTkc6IHRoaXMgcmV0dXJucyBhIHBvaW50ZXIgdG8gbWVtb3J5IHRoYXRcbiAgICAvLyB3YXMgbWFsbG9jZWQuICBEZXBlbmRpbmcgb24geW91ciB1c2UsIHlvdSBtaWdodFxuICAgIC8vIHdhbnQgdG8gZnJlZSBpdC5cbiAgICAvLyBJZiBkZXN0IGlzIGdpdmVuLCB0aGF0J3MgYSBwb2ludGVyIHRvIHdoZXJlIHRvIGNvcHlcbiAgICAvLyB0aGUgc3RyaW5nIChudWxsIHRlcm1pbmF0ZWQpLCB3aXRoIGEgYm91bmQgb2YgbGVuIGJ5dGVzXG4gICAgLy8gaW5jbHVkaW5nIGEgdGVybWluYXRpbmcgbnVsbCBieXRlLlxuICAgIC8vIENhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgZnJlZWluZyB0aGUgcmV0dXJuZWQgY2hhciogZnJvbSBzdHJpbmdUb1U4XG4gICAgLy8gdXNpbmcgdGhpcy5leHBvcnRzLmNfZnJlZSwgZS5nLiwgYXMgZG9uZSBpbiBjYWxsV2l0aFN0cmluZyBoZXJlLlxuICAgIC8vIElmIGRlc3QgYW5kIGxlbiBhcmUgZ2l2ZW4sIHN0cmluZyBpcyBjb3BpZWQgaW50byBtZW1vcnkgc3RhcnRpbmdcbiAgICAvLyBhdCBkZXN0IGluc3RlYWQsIGJ1dCB0cnVuY2F0ZWQgdG8gbGVuIChpbmNsdWRpbmcgdGhlIG51bGwgYnl0ZSkuXG4gICAgc3RyaW5nKHN0ciwgZGVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVkU3RyaW5nKGVuY29kZXIuZW5jb2RlKHN0ciksIGRlc3QpO1xuICAgIH1cbiAgICAvLyBzYW1lIGFzIHN0cmluZyBhYm92ZSwgYnV0IGlucHV0IGlzIGFscmVhZHkgZW5jb2RlZC5cbiAgICBlbmNvZGVkU3RyaW5nKHN0ckFzQXJyYXksIGRlc3QpIHtcbiAgICAgICAgaWYgKGRlc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFkZXN0Lmxlbikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcInNlbmQtdG8td2FzbTogZW5jb2RlZFN0cmluZyAtLSBzdXNwaWNpb3VzIGRlc3QubGVuID0gMCFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJBc0FycmF5ID0gc3RyQXNBcnJheS5zbGljZSgwLCBkZXN0LmxlbiAtIDEpOyAvLyBlbnN1cmUgaXQgd2lsbCBmaXRcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsZW4gPSBzdHJBc0FycmF5Lmxlbmd0aCArIDE7XG4gICAgICAgIGNvbnN0IHB0ciA9IGRlc3Q/LnB0ciA/PyB0aGlzLm1hbGxvYyhsZW4pO1xuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBJbnQ4QXJyYXkodGhpcy5tZW1vcnkuYnVmZmVyLCBwdHIsIGxlbik7XG4gICAgICAgIGFycmF5LnNldChzdHJBc0FycmF5KTtcbiAgICAgICAgYXJyYXlbbGVuIC0gMV0gPSAwO1xuICAgICAgICByZXR1cm4gcHRyO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIG51bGwgdGVybWluYXRlZCwgaS5lLiwgaXQncyAgXCIqY2hhcltdXCIsIHdoZXJlIHRoZSBsYXN0IGNoYXJbXSBpcyAwLFxuICAgIC8vIHdoaWNoIGlzIHdoYXQgYSBsb3Qgb2YgcG9zaXggZnVuY3Rpb25zIHdhbnQuXG4gICAgYXJyYXlPZlN0cmluZ3Modikge1xuICAgICAgICBjb25zdCBwdHIgPSB0aGlzLm1hbGxvYyg0ICogKHYubGVuZ3RoICsgMSkpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNQdHIgPSB0aGlzLnN0cmluZyh2W2ldKTtcbiAgICAgICAgICAgIHRoaXMucG9pbnRlcihwdHIgKyA0ICogaSwgc1B0cik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wb2ludGVyKHB0ciArIDQgKiB2Lmxlbmd0aCwgMCk7XG4gICAgICAgIHJldHVybiBwdHI7XG4gICAgfVxuICAgIGJ1ZmZlcihidWYpIHtcbiAgICAgICAgY29uc3QgcHRyID0gdGhpcy5tYWxsb2MoYnVmLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlcik7XG4gICAgICAgIGJ1Zi5jb3B5KGFycmF5LCBwdHIpO1xuICAgICAgICByZXR1cm4gcHRyO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VuZFRvV2FzbUFic3RyYWN0QmFzZSA9IFNlbmRUb1dhc21BYnN0cmFjdEJhc2U7XG5jbGFzcyBTZW5kVG9XYXNtIGV4dGVuZHMgU2VuZFRvV2FzbUFic3RyYWN0QmFzZSB7XG4gICAgY29uc3RydWN0b3IoeyBtZW1vcnksIGNhbGxGdW5jdGlvbiB9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWVtb3J5ID0gbWVtb3J5O1xuICAgICAgICB0aGlzLmNhbGxGdW5jdGlvbiA9IGNhbGxGdW5jdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTZW5kVG9XYXNtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VuZC10by13YXNtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyogUHl0aG9uIFRyYW1wb2xpbmUgQ2FsbHMgKi9cbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGxvZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwicHl0aG9uLXdhc20tdHJhbXBvbGluZVwiKTtcbmZ1bmN0aW9uIGluaXRQeXRob25UcmFtcG9saW5lQ2FsbHModGFibGUsIGVudikge1xuICAgIGVudltcIl9QeUltcG9ydF9Jbml0RnVuY19UcmFtcG9saW5lQ2FsbFwiXSA9IChwdHIpID0+IHtcbiAgICAgICAgY29uc3QgciA9IHRhYmxlLmdldChwdHIpKCk7XG4gICAgICAgIGxvZyhcIl9QeUltcG9ydF9Jbml0RnVuY19UcmFtcG9saW5lQ2FsbCAtIHB0cj1cIiwgcHRyLCBcIiByPVwiLCByKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfTtcbiAgICBlbnZbXCJfUHlDRnVuY3Rpb25XaXRoS2V5d29yZHNfVHJhbXBvbGluZUNhbGxcIl0gPSAocHRyLCBzZWxmLCBhcmdzLCBrd2RzKSA9PiB7XG4gICAgICAgIC8vIGxvZyhcIl9QeUNGdW5jdGlvbldpdGhLZXl3b3Jkc19UcmFtcG9saW5lQ2FsbCAtIHB0cj1cIiwgcHRyKTtcbiAgICAgICAgcmV0dXJuIHRhYmxlLmdldChwdHIpKHNlbGYsIGFyZ3MsIGt3ZHMpO1xuICAgIH07XG4gICAgZW52W1wiZGVzY3Jfc2V0X3RyYW1wb2xpbmVfY2FsbFwiXSA9IChzZXQsIG9iaiwgdmFsdWUsIGNsb3N1cmUpID0+IHtcbiAgICAgICAgLy8gbG9nKFwiZGVzY3Jfc2V0X3RyYW1wb2xpbmVfY2FsbFwiKTtcbiAgICAgICAgcmV0dXJuIHRhYmxlLmdldChzZXQpKG9iaiwgdmFsdWUsIGNsb3N1cmUpO1xuICAgIH07XG4gICAgZW52W1wiZGVzY3JfZ2V0X3RyYW1wb2xpbmVfY2FsbFwiXSA9IChnZXQsIG9iaiwgY2xvc3VyZSkgPT4ge1xuICAgICAgICAvLyBsb2coXCJkZXNjcl9nZXRfdHJhbXBvbGluZV9jYWxsXCIpO1xuICAgICAgICByZXR1cm4gdGFibGUuZ2V0KGdldCkob2JqLCBjbG9zdXJlKTtcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gaW5pdFB5dGhvblRyYW1wb2xpbmVDYWxscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW1wb2xpbmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmVhbSA9IHZvaWQgMDtcbnZhciBTdHJlYW07XG4oZnVuY3Rpb24gKFN0cmVhbSkge1xuICAgIFN0cmVhbVtTdHJlYW1bXCJTVERPVVRcIl0gPSAxXSA9IFwiU1RET1VUXCI7XG4gICAgU3RyZWFtW1N0cmVhbVtcIlNUREVSUlwiXSA9IDJdID0gXCJTVERFUlJcIjtcbn0pKFN0cmVhbSA9IGV4cG9ydHMuU3RyZWFtIHx8IChleHBvcnRzLlN0cmVhbSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qXG5UaGlzIGlzIGh0dHBzOi8vZ2l0aHViLmNvbS9jYWJpbmpzL2Jyb3dzZXItaHJ0aW1lL2Jsb2IvbWFzdGVyL3NyYy9pbmRleC50c1xuYnV0IG1vZGlmaWVkIHRvIG5vdCB1c2Ugd2luZG93LCBzaW5jZSBJIHdhbnQgdG8gdXNlIHRoaXMgaW4gYSBXZWJXb3JrZXIuXG5VcHN0cmVhbSBpcyBNSVQgbGljZW5zZS5cblxuVGhpcyBhbHNvIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWwgdmFyaWFibGVzLlxuKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IF9wZXJmb21hbmNlUG9seWZpbGwgPSAoKSA9PiB7XG4gICAgLy8gYmFzZWQgb24gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bGlyaXNoLzU0Mzg2NTAgY29weXJpZ2h0IFBhdWwgSXJpc2ggMjAxNS5cbiAgICBpZiAoIShcInBlcmZvcm1hbmNlXCIgaW4gc2VsZikpIHtcbiAgICAgICAgc2VsZi5wZXJmb3JtYW5jZSA9IHt9O1xuICAgIH1cbiAgICBEYXRlLm5vdyA9XG4gICAgICAgIERhdGUubm93IHx8XG4gICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHRoYW5rcyBJRThcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICB9KTtcbiAgICBpZiAoXCJub3dcIiBpbiBzZWxmLnBlcmZvcm1hbmNlID09PSBmYWxzZSkge1xuICAgICAgICBsZXQgbm93T2Zmc2V0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKHBlcmZvcm1hbmNlLnRpbWluZyAmJiBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICBub3dPZmZzZXQgPSBwZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHNlbGYucGVyZm9ybWFuY2Uubm93ID0gKCkgPT4gRGF0ZS5ub3coKSAtIG5vd09mZnNldDtcbiAgICB9XG59O1xuY29uc3QgX2hydGltZSA9IChwcmV2aW91c1RpbWVzdGFtcCkgPT4ge1xuICAgIF9wZXJmb21hbmNlUG9seWZpbGwoKTtcbiAgICBjb25zdCBiYXNlTm93ID0gTWF0aC5mbG9vcigoRGF0ZS5ub3coKSAtIHBlcmZvcm1hbmNlLm5vdygpKSAqIDFlLTMpO1xuICAgIGNvbnN0IGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpICogMWUtMztcbiAgICBsZXQgc2Vjb25kcyA9IE1hdGguZmxvb3IoY2xvY2t0aW1lKSArIGJhc2VOb3c7XG4gICAgbGV0IG5hbm9zZWNvbmRzID0gTWF0aC5mbG9vcigoY2xvY2t0aW1lICUgMSkgKiAxZTkpO1xuICAgIGlmIChwcmV2aW91c1RpbWVzdGFtcCkge1xuICAgICAgICBzZWNvbmRzID0gc2Vjb25kcyAtIHByZXZpb3VzVGltZXN0YW1wWzBdO1xuICAgICAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV07XG4gICAgICAgIGlmIChuYW5vc2Vjb25kcyA8IDApIHtcbiAgICAgICAgICAgIHNlY29uZHMtLTtcbiAgICAgICAgICAgIG5hbm9zZWNvbmRzICs9IDFlOTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW3NlY29uZHMsIG5hbm9zZWNvbmRzXTtcbn07XG5jb25zdCBOU19QRVJfU0VDID0gMWU5O1xuX2hydGltZS5iaWdpbnQgPSAodGltZSkgPT4ge1xuICAgIGNvbnN0IGRpZmYgPSBfaHJ0aW1lKHRpbWUpO1xuICAgIHJldHVybiAoZGlmZlswXSAqIE5TX1BFUl9TRUMgKyBkaWZmWzFdKTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBfaHJ0aW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci1ocnRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByYW5kb21maWxsXzEgPSByZXF1aXJlKFwicmFuZG9tZmlsbFwiKTtcbmNvbnN0IHBhdGhfYnJvd3NlcmlmeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoLWJyb3dzZXJpZnlcIikpO1xuY29uc3QgYnJvd3Nlcl9ocnRpbWVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9icm93c2VyLWhydGltZVwiKSk7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuY29uc3QgYmluZGluZ3MgPSB7XG4gICAgaHJ0aW1lOiBicm93c2VyX2hydGltZV8xLmRlZmF1bHQuYmlnaW50LFxuICAgIGV4aXQ6IChjb2RlKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLldBU0lFeGl0RXJyb3IoY29kZSk7XG4gICAgfSxcbiAgICBraWxsOiAoc2lnbmFsKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyB0eXBlc18xLldBU0lLaWxsRXJyb3Ioc2lnbmFsKTtcbiAgICB9LFxuICAgIHJhbmRvbUZpbGxTeW5jOiByYW5kb21maWxsXzEucmFuZG9tRmlsbFN5bmMsXG4gICAgaXNUVFk6ICgpID0+IHRydWUsXG4gICAgcGF0aDogcGF0aF9icm93c2VyaWZ5XzEuZGVmYXVsdCxcbiAgICAvLyBMZXQgdGhlIHVzZXIgYXR0YWNoIHRoZSBmcyBhdCBydW50aW1lXG4gICAgZnM6IG51bGwsXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gYmluZGluZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcblxuVGhpcyBwcm9qZWN0IGlzIGJhc2VkIGZyb20gdGhlIE5vZGUgaW1wbGVtZW50YXRpb24gbWFkZSBieSBHdXMgQ2FwbGFuXG5odHRwczovL2dpdGh1Yi5jb20vZGV2c25lay9ub2RlLXdhc2lcbkhvd2V2ZXIsIEphdmFTY3JpcHQgV0FTSSBpcyBmb2N1c2VkIG9uOlxuICogQnJpbmdpbmcgV0FTSSB0byB0aGUgQnJvd3NlcnNcbiAqIE1ha2UgZWFzeSB0byBwbHVnIGRpZmZlcmVudCBmaWxlc3lzdGVtc1xuICogUHJvdmlkZSBhIHR5cGUtc2FmZSBhcGkgdXNpbmcgVHlwZXNjcmlwdFxuXG5cbkNvcHlyaWdodCAyMDE5IEd1cyBDYXBsYW5cblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG9cbmRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG5yaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3JcbnNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HU1xuSU4gVEhFIFNPRlRXQVJFLlxuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV0FTSV9FTk9NU0cgPSBleHBvcnRzLldBU0lfRU5PTUVNID0gZXhwb3J0cy5XQVNJX0VOT0xJTksgPSBleHBvcnRzLldBU0lfRU5PTENLID0gZXhwb3J0cy5XQVNJX0VOT0VYRUMgPSBleHBvcnRzLldBU0lfRU5PRU5UID0gZXhwb3J0cy5XQVNJX0VOT0RFViA9IGV4cG9ydHMuV0FTSV9FTk9CVUZTID0gZXhwb3J0cy5XQVNJX0VORklMRSA9IGV4cG9ydHMuV0FTSV9FTkVUVU5SRUFDSCA9IGV4cG9ydHMuV0FTSV9FTkVUUkVTRVQgPSBleHBvcnRzLldBU0lfRU5FVERPV04gPSBleHBvcnRzLldBU0lfRU5BTUVUT09MT05HID0gZXhwb3J0cy5XQVNJX0VNVUxUSUhPUCA9IGV4cG9ydHMuV0FTSV9FTVNHU0laRSA9IGV4cG9ydHMuV0FTSV9FTUxJTksgPSBleHBvcnRzLldBU0lfRU1GSUxFID0gZXhwb3J0cy5XQVNJX0VMT09QID0gZXhwb3J0cy5XQVNJX0VJU0RJUiA9IGV4cG9ydHMuV0FTSV9FSVNDT05OID0gZXhwb3J0cy5XQVNJX0VJTyA9IGV4cG9ydHMuV0FTSV9FSU5WQUwgPSBleHBvcnRzLldBU0lfRUlOVFIgPSBleHBvcnRzLldBU0lfRUlOUFJPR1JFU1MgPSBleHBvcnRzLldBU0lfRUlMU0VRID0gZXhwb3J0cy5XQVNJX0VJRFJNID0gZXhwb3J0cy5XQVNJX0VIT1NUVU5SRUFDSCA9IGV4cG9ydHMuV0FTSV9FRkJJRyA9IGV4cG9ydHMuV0FTSV9FRkFVTFQgPSBleHBvcnRzLldBU0lfRUVYSVNUID0gZXhwb3J0cy5XQVNJX0VEUVVPVCA9IGV4cG9ydHMuV0FTSV9FRE9NID0gZXhwb3J0cy5XQVNJX0VERVNUQUREUlJFUSA9IGV4cG9ydHMuV0FTSV9FREVBRExLID0gZXhwb3J0cy5XQVNJX0VDT05OUkVTRVQgPSBleHBvcnRzLldBU0lfRUNPTk5SRUZVU0VEID0gZXhwb3J0cy5XQVNJX0VDT05OQUJPUlRFRCA9IGV4cG9ydHMuV0FTSV9FQ0hJTEQgPSBleHBvcnRzLldBU0lfRUNBTkNFTEVEID0gZXhwb3J0cy5XQVNJX0VCVVNZID0gZXhwb3J0cy5XQVNJX0VCQURNU0cgPSBleHBvcnRzLldBU0lfRUJBREYgPSBleHBvcnRzLldBU0lfRUFMUkVBRFkgPSBleHBvcnRzLldBU0lfRUFHQUlOID0gZXhwb3J0cy5XQVNJX0VBRk5PU1VQUE9SVCA9IGV4cG9ydHMuV0FTSV9FQUREUk5PVEFWQUlMID0gZXhwb3J0cy5XQVNJX0VBRERSSU5VU0UgPSBleHBvcnRzLldBU0lfRUFDQ0VTID0gZXhwb3J0cy5XQVNJX0UyQklHID0gZXhwb3J0cy5XQVNJX0VTVUNDRVNTID0gdm9pZCAwO1xuZXhwb3J0cy5XQVNJX1NJR1ZUQUxSTSA9IGV4cG9ydHMuV0FTSV9TSUdVU1IyID0gZXhwb3J0cy5XQVNJX1NJR1VTUjEgPSBleHBvcnRzLldBU0lfU0lHVVJHID0gZXhwb3J0cy5XQVNJX1NJR1RUT1UgPSBleHBvcnRzLldBU0lfU0lHVFRJTiA9IGV4cG9ydHMuV0FTSV9TSUdUU1RQID0gZXhwb3J0cy5XQVNJX1NJR1RSQVAgPSBleHBvcnRzLldBU0lfU0lHVEVSTSA9IGV4cG9ydHMuV0FTSV9TSUdTVE9QID0gZXhwb3J0cy5XQVNJX1NJR1NFR1YgPSBleHBvcnRzLldBU0lfU0lHUVVJVCA9IGV4cG9ydHMuV0FTSV9TSUdQSVBFID0gZXhwb3J0cy5XQVNJX1NJR0tJTEwgPSBleHBvcnRzLldBU0lfU0lHSU5UID0gZXhwb3J0cy5XQVNJX1NJR0lMTCA9IGV4cG9ydHMuV0FTSV9TSUdIVVAgPSBleHBvcnRzLldBU0lfU0lHRlBFID0gZXhwb3J0cy5XQVNJX1NJR0NPTlQgPSBleHBvcnRzLldBU0lfU0lHQ0hMRCA9IGV4cG9ydHMuV0FTSV9TSUdCVVMgPSBleHBvcnRzLldBU0lfU0lHQUxSTSA9IGV4cG9ydHMuV0FTSV9TSUdBQlJUID0gZXhwb3J0cy5XQVNJX0VOT1RDQVBBQkxFID0gZXhwb3J0cy5XQVNJX0VYREVWID0gZXhwb3J0cy5XQVNJX0VUWFRCU1kgPSBleHBvcnRzLldBU0lfRVRJTUVET1VUID0gZXhwb3J0cy5XQVNJX0VTVEFMRSA9IGV4cG9ydHMuV0FTSV9FU1JDSCA9IGV4cG9ydHMuV0FTSV9FU1BJUEUgPSBleHBvcnRzLldBU0lfRVJPRlMgPSBleHBvcnRzLldBU0lfRVJBTkdFID0gZXhwb3J0cy5XQVNJX0VQUk9UT1RZUEUgPSBleHBvcnRzLldBU0lfRVBST1RPTk9TVVBQT1JUID0gZXhwb3J0cy5XQVNJX0VQUk9UTyA9IGV4cG9ydHMuV0FTSV9FUElQRSA9IGV4cG9ydHMuV0FTSV9FUEVSTSA9IGV4cG9ydHMuV0FTSV9FT1dORVJERUFEID0gZXhwb3J0cy5XQVNJX0VPVkVSRkxPVyA9IGV4cG9ydHMuV0FTSV9FTlhJTyA9IGV4cG9ydHMuV0FTSV9FTk9UVFkgPSBleHBvcnRzLldBU0lfRU5PVFNVUCA9IGV4cG9ydHMuV0FTSV9FTk9UU09DSyA9IGV4cG9ydHMuV0FTSV9FTk9UUkVDT1ZFUkFCTEUgPSBleHBvcnRzLldBU0lfRU5PVEVNUFRZID0gZXhwb3J0cy5XQVNJX0VOT1RESVIgPSBleHBvcnRzLldBU0lfRU5PVENPTk4gPSBleHBvcnRzLldBU0lfRU5PU1lTID0gZXhwb3J0cy5XQVNJX0VOT1NQQyA9IGV4cG9ydHMuV0FTSV9FTk9QUk9UT09QVCA9IHZvaWQgMDtcbmV4cG9ydHMuUklHSFRTX1JFR1VMQVJfRklMRV9CQVNFID0gZXhwb3J0cy5SSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9JTkhFUklUSU5HID0gZXhwb3J0cy5SSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9CQVNFID0gZXhwb3J0cy5SSUdIVFNfQkxPQ0tfREVWSUNFX0lOSEVSSVRJTkcgPSBleHBvcnRzLlJJR0hUU19CTE9DS19ERVZJQ0VfQkFTRSA9IGV4cG9ydHMuUklHSFRTX0FMTCA9IGV4cG9ydHMuV0FTSV9SSUdIVF9TT0NLX1NIVVRET1dOID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BPTExfRkRfUkVBRFdSSVRFID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfVU5MSU5LX0ZJTEUgPSBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU1PVkVfRElSRUNUT1JZID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfU1lNTElOSyA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfVElNRVMgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfRklMRVNUQVRfU0VUX1NJWkUgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfRklMRVNUQVRfR0VUID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfRklMRVNUQVRfU0VUX1RJTUVTID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfRklMRVNUQVRfU0VUX1NJWkUgPSBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9HRVQgPSBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfVEFSR0VUID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfUkVOQU1FX1NPVVJDRSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1JFQURMSU5LID0gZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQURESVIgPSBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9PUEVOID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfTElOS19UQVJHRVQgPSBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9MSU5LX1NPVVJDRSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0NSRUFURV9GSUxFID0gZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0RJUkVDVE9SWSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BTExPQ0FURSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BRFZJU0UgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfV1JJVEUgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfVEVMTCA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9TWU5DID0gZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0ZEU1RBVF9TRVRfRkxBR1MgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfU0VFSyA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9SRUFEID0gZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0RBVEFTWU5DID0gZXhwb3J0cy5XQVNJX0ZERkxBR19TWU5DID0gZXhwb3J0cy5XQVNJX0ZERkxBR19SU1lOQyA9IGV4cG9ydHMuV0FTSV9GREZMQUdfTk9OQkxPQ0sgPSBleHBvcnRzLldBU0lfRkRGTEFHX0RTWU5DID0gZXhwb3J0cy5XQVNJX0ZERkxBR19BUFBFTkQgPSBleHBvcnRzLldBU0lfRklMRVRZUEVfU1lNQk9MSUNfTElOSyA9IGV4cG9ydHMuV0FTSV9GSUxFVFlQRV9TT0NLRVRfU1RSRUFNID0gZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX1NPQ0tFVF9ER1JBTSA9IGV4cG9ydHMuV0FTSV9GSUxFVFlQRV9SRUdVTEFSX0ZJTEUgPSBleHBvcnRzLldBU0lfRklMRVRZUEVfRElSRUNUT1JZID0gZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX0NIQVJBQ1RFUl9ERVZJQ0UgPSBleHBvcnRzLldBU0lfRklMRVRZUEVfQkxPQ0tfREVWSUNFID0gZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX1VOS05PV04gPSBleHBvcnRzLldBU0lfU0lHWEZTWiA9IGV4cG9ydHMuV0FTSV9TSUdYQ1BVID0gdm9pZCAwO1xuZXhwb3J0cy5TSUdOQUxfTUFQID0gZXhwb3J0cy5FUlJPUl9NQVAgPSBleHBvcnRzLldBU0lfV0hFTkNFX0VORCA9IGV4cG9ydHMuV0FTSV9XSEVOQ0VfQ1VSID0gZXhwb3J0cy5XQVNJX1dIRU5DRV9TRVQgPSBleHBvcnRzLldBU0lfU1RERVJSX0ZJTEVOTyA9IGV4cG9ydHMuV0FTSV9TVERPVVRfRklMRU5PID0gZXhwb3J0cy5XQVNJX1NURElOX0ZJTEVOTyA9IGV4cG9ydHMuV0FTSV9ESVJDT09LSUVfU1RBUlQgPSBleHBvcnRzLldBU0lfUFJFT1BFTlRZUEVfRElSID0gZXhwb3J0cy5XQVNJX09fVFJVTkMgPSBleHBvcnRzLldBU0lfT19FWENMID0gZXhwb3J0cy5XQVNJX09fRElSRUNUT1JZID0gZXhwb3J0cy5XQVNJX09fQ1JFQVQgPSBleHBvcnRzLldBU0lfRklMRVNUQVRfU0VUX01USU1fTk9XID0gZXhwb3J0cy5XQVNJX0ZJTEVTVEFUX1NFVF9NVElNID0gZXhwb3J0cy5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNX05PVyA9IGV4cG9ydHMuV0FTSV9GSUxFU1RBVF9TRVRfQVRJTSA9IGV4cG9ydHMuV0FTSV9FVkVOVFRZUEVfRkRfV1JJVEUgPSBleHBvcnRzLldBU0lfRVZFTlRUWVBFX0ZEX1JFQUQgPSBleHBvcnRzLldBU0lfRVZFTlRUWVBFX0NMT0NLID0gZXhwb3J0cy5XQVNJX0NMT0NLX1RIUkVBRF9DUFVUSU1FX0lEID0gZXhwb3J0cy5XQVNJX0NMT0NLX1BST0NFU1NfQ1BVVElNRV9JRCA9IGV4cG9ydHMuV0FTSV9DTE9DS19NT05PVE9OSUMgPSBleHBvcnRzLldBU0lfQ0xPQ0tfUkVBTFRJTUUgPSBleHBvcnRzLlJJR0hUU19UVFlfSU5IRVJJVElORyA9IGV4cG9ydHMuUklHSFRTX1RUWV9CQVNFID0gZXhwb3J0cy5SSUdIVFNfU09DS0VUX0lOSEVSSVRJTkcgPSBleHBvcnRzLlJJR0hUU19TT0NLRVRfQkFTRSA9IGV4cG9ydHMuUklHSFRTX0RJUkVDVE9SWV9JTkhFUklUSU5HID0gZXhwb3J0cy5SSUdIVFNfRElSRUNUT1JZX0JBU0UgPSBleHBvcnRzLlJJR0hUU19SRUdVTEFSX0ZJTEVfSU5IRVJJVElORyA9IHZvaWQgMDtcbmV4cG9ydHMuV0FTSV9FU1VDQ0VTUyA9IDA7XG5leHBvcnRzLldBU0lfRTJCSUcgPSAxO1xuZXhwb3J0cy5XQVNJX0VBQ0NFUyA9IDI7XG5leHBvcnRzLldBU0lfRUFERFJJTlVTRSA9IDM7XG5leHBvcnRzLldBU0lfRUFERFJOT1RBVkFJTCA9IDQ7XG5leHBvcnRzLldBU0lfRUFGTk9TVVBQT1JUID0gNTtcbmV4cG9ydHMuV0FTSV9FQUdBSU4gPSA2O1xuZXhwb3J0cy5XQVNJX0VBTFJFQURZID0gNztcbmV4cG9ydHMuV0FTSV9FQkFERiA9IDg7XG5leHBvcnRzLldBU0lfRUJBRE1TRyA9IDk7XG5leHBvcnRzLldBU0lfRUJVU1kgPSAxMDtcbmV4cG9ydHMuV0FTSV9FQ0FOQ0VMRUQgPSAxMTtcbmV4cG9ydHMuV0FTSV9FQ0hJTEQgPSAxMjtcbmV4cG9ydHMuV0FTSV9FQ09OTkFCT1JURUQgPSAxMztcbmV4cG9ydHMuV0FTSV9FQ09OTlJFRlVTRUQgPSAxNDtcbmV4cG9ydHMuV0FTSV9FQ09OTlJFU0VUID0gMTU7XG5leHBvcnRzLldBU0lfRURFQURMSyA9IDE2O1xuZXhwb3J0cy5XQVNJX0VERVNUQUREUlJFUSA9IDE3O1xuZXhwb3J0cy5XQVNJX0VET00gPSAxODtcbmV4cG9ydHMuV0FTSV9FRFFVT1QgPSAxOTtcbmV4cG9ydHMuV0FTSV9FRVhJU1QgPSAyMDtcbmV4cG9ydHMuV0FTSV9FRkFVTFQgPSAyMTtcbmV4cG9ydHMuV0FTSV9FRkJJRyA9IDIyO1xuZXhwb3J0cy5XQVNJX0VIT1NUVU5SRUFDSCA9IDIzO1xuZXhwb3J0cy5XQVNJX0VJRFJNID0gMjQ7XG5leHBvcnRzLldBU0lfRUlMU0VRID0gMjU7XG5leHBvcnRzLldBU0lfRUlOUFJPR1JFU1MgPSAyNjtcbmV4cG9ydHMuV0FTSV9FSU5UUiA9IDI3O1xuZXhwb3J0cy5XQVNJX0VJTlZBTCA9IDI4O1xuZXhwb3J0cy5XQVNJX0VJTyA9IDI5O1xuZXhwb3J0cy5XQVNJX0VJU0NPTk4gPSAzMDtcbmV4cG9ydHMuV0FTSV9FSVNESVIgPSAzMTtcbmV4cG9ydHMuV0FTSV9FTE9PUCA9IDMyO1xuZXhwb3J0cy5XQVNJX0VNRklMRSA9IDMzO1xuZXhwb3J0cy5XQVNJX0VNTElOSyA9IDM0O1xuZXhwb3J0cy5XQVNJX0VNU0dTSVpFID0gMzU7XG5leHBvcnRzLldBU0lfRU1VTFRJSE9QID0gMzY7XG5leHBvcnRzLldBU0lfRU5BTUVUT09MT05HID0gMzc7XG5leHBvcnRzLldBU0lfRU5FVERPV04gPSAzODtcbmV4cG9ydHMuV0FTSV9FTkVUUkVTRVQgPSAzOTtcbmV4cG9ydHMuV0FTSV9FTkVUVU5SRUFDSCA9IDQwO1xuZXhwb3J0cy5XQVNJX0VORklMRSA9IDQxO1xuZXhwb3J0cy5XQVNJX0VOT0JVRlMgPSA0MjtcbmV4cG9ydHMuV0FTSV9FTk9ERVYgPSA0MztcbmV4cG9ydHMuV0FTSV9FTk9FTlQgPSA0NDtcbmV4cG9ydHMuV0FTSV9FTk9FWEVDID0gNDU7XG5leHBvcnRzLldBU0lfRU5PTENLID0gNDY7XG5leHBvcnRzLldBU0lfRU5PTElOSyA9IDQ3O1xuZXhwb3J0cy5XQVNJX0VOT01FTSA9IDQ4O1xuZXhwb3J0cy5XQVNJX0VOT01TRyA9IDQ5O1xuZXhwb3J0cy5XQVNJX0VOT1BST1RPT1BUID0gNTA7XG5leHBvcnRzLldBU0lfRU5PU1BDID0gNTE7XG5leHBvcnRzLldBU0lfRU5PU1lTID0gNTI7XG5leHBvcnRzLldBU0lfRU5PVENPTk4gPSA1MztcbmV4cG9ydHMuV0FTSV9FTk9URElSID0gNTQ7XG5leHBvcnRzLldBU0lfRU5PVEVNUFRZID0gNTU7XG5leHBvcnRzLldBU0lfRU5PVFJFQ09WRVJBQkxFID0gNTY7XG5leHBvcnRzLldBU0lfRU5PVFNPQ0sgPSA1NztcbmV4cG9ydHMuV0FTSV9FTk9UU1VQID0gNTg7XG5leHBvcnRzLldBU0lfRU5PVFRZID0gNTk7XG5leHBvcnRzLldBU0lfRU5YSU8gPSA2MDtcbmV4cG9ydHMuV0FTSV9FT1ZFUkZMT1cgPSA2MTtcbmV4cG9ydHMuV0FTSV9FT1dORVJERUFEID0gNjI7XG5leHBvcnRzLldBU0lfRVBFUk0gPSA2MztcbmV4cG9ydHMuV0FTSV9FUElQRSA9IDY0O1xuZXhwb3J0cy5XQVNJX0VQUk9UTyA9IDY1O1xuZXhwb3J0cy5XQVNJX0VQUk9UT05PU1VQUE9SVCA9IDY2O1xuZXhwb3J0cy5XQVNJX0VQUk9UT1RZUEUgPSA2NztcbmV4cG9ydHMuV0FTSV9FUkFOR0UgPSA2ODtcbmV4cG9ydHMuV0FTSV9FUk9GUyA9IDY5O1xuZXhwb3J0cy5XQVNJX0VTUElQRSA9IDcwO1xuZXhwb3J0cy5XQVNJX0VTUkNIID0gNzE7XG5leHBvcnRzLldBU0lfRVNUQUxFID0gNzI7XG5leHBvcnRzLldBU0lfRVRJTUVET1VUID0gNzM7XG5leHBvcnRzLldBU0lfRVRYVEJTWSA9IDc0O1xuZXhwb3J0cy5XQVNJX0VYREVWID0gNzU7XG5leHBvcnRzLldBU0lfRU5PVENBUEFCTEUgPSA3NjtcbmV4cG9ydHMuV0FTSV9TSUdBQlJUID0gMDtcbmV4cG9ydHMuV0FTSV9TSUdBTFJNID0gMTtcbmV4cG9ydHMuV0FTSV9TSUdCVVMgPSAyO1xuZXhwb3J0cy5XQVNJX1NJR0NITEQgPSAzO1xuZXhwb3J0cy5XQVNJX1NJR0NPTlQgPSA0O1xuZXhwb3J0cy5XQVNJX1NJR0ZQRSA9IDU7XG5leHBvcnRzLldBU0lfU0lHSFVQID0gNjtcbmV4cG9ydHMuV0FTSV9TSUdJTEwgPSA3O1xuZXhwb3J0cy5XQVNJX1NJR0lOVCA9IDg7XG5leHBvcnRzLldBU0lfU0lHS0lMTCA9IDk7XG5leHBvcnRzLldBU0lfU0lHUElQRSA9IDEwO1xuZXhwb3J0cy5XQVNJX1NJR1FVSVQgPSAxMTtcbmV4cG9ydHMuV0FTSV9TSUdTRUdWID0gMTI7XG5leHBvcnRzLldBU0lfU0lHU1RPUCA9IDEzO1xuZXhwb3J0cy5XQVNJX1NJR1RFUk0gPSAxNDtcbmV4cG9ydHMuV0FTSV9TSUdUUkFQID0gMTU7XG5leHBvcnRzLldBU0lfU0lHVFNUUCA9IDE2O1xuZXhwb3J0cy5XQVNJX1NJR1RUSU4gPSAxNztcbmV4cG9ydHMuV0FTSV9TSUdUVE9VID0gMTg7XG5leHBvcnRzLldBU0lfU0lHVVJHID0gMTk7XG5leHBvcnRzLldBU0lfU0lHVVNSMSA9IDIwO1xuZXhwb3J0cy5XQVNJX1NJR1VTUjIgPSAyMTtcbmV4cG9ydHMuV0FTSV9TSUdWVEFMUk0gPSAyMjtcbmV4cG9ydHMuV0FTSV9TSUdYQ1BVID0gMjM7XG5leHBvcnRzLldBU0lfU0lHWEZTWiA9IDI0O1xuZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX1VOS05PV04gPSAwO1xuZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX0JMT0NLX0RFVklDRSA9IDE7XG5leHBvcnRzLldBU0lfRklMRVRZUEVfQ0hBUkFDVEVSX0RFVklDRSA9IDI7XG5leHBvcnRzLldBU0lfRklMRVRZUEVfRElSRUNUT1JZID0gMztcbmV4cG9ydHMuV0FTSV9GSUxFVFlQRV9SRUdVTEFSX0ZJTEUgPSA0O1xuZXhwb3J0cy5XQVNJX0ZJTEVUWVBFX1NPQ0tFVF9ER1JBTSA9IDU7XG5leHBvcnRzLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSA9IDY7XG5leHBvcnRzLldBU0lfRklMRVRZUEVfU1lNQk9MSUNfTElOSyA9IDc7XG5leHBvcnRzLldBU0lfRkRGTEFHX0FQUEVORCA9IDB4MDAwMTtcbmV4cG9ydHMuV0FTSV9GREZMQUdfRFNZTkMgPSAweDAwMDI7XG5leHBvcnRzLldBU0lfRkRGTEFHX05PTkJMT0NLID0gMHgwMDA0O1xuZXhwb3J0cy5XQVNJX0ZERkxBR19SU1lOQyA9IDB4MDAwODtcbmV4cG9ydHMuV0FTSV9GREZMQUdfU1lOQyA9IDB4MDAxMDtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9EQVRBU1lOQyA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDAwMDEpO1xuZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQUQgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDAwMDAyKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9TRUVLID0gQmlnSW50KDB4MDAwMDAwMDAwMDAwMDAwNCk7XG5leHBvcnRzLldBU0lfUklHSFRfRkRfRkRTVEFUX1NFVF9GTEFHUyA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDAwMDgpO1xuZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1NZTkMgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDAwMDEwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9URUxMID0gQmlnSW50KDB4MDAwMDAwMDAwMDAwMDAyMCk7XG5leHBvcnRzLldBU0lfUklHSFRfRkRfV1JJVEUgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDAwMDQwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BRFZJU0UgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDAwMDgwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BTExPQ0FURSA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDAxMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0RJUkVDVE9SWSA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDAyMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0ZJTEUgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDAwNDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0xJTktfU09VUkNFID0gQmlnSW50KDB4MDAwMDAwMDAwMDAwMDgwMCk7XG5leHBvcnRzLldBU0lfUklHSFRfUEFUSF9MSU5LX1RBUkdFVCA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDEwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfT1BFTiA9IEJpZ0ludCgweDAwMDAwMDAwMDAwMDIwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQURESVIgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDA0MDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1JFQURMSU5LID0gQmlnSW50KDB4MDAwMDAwMDAwMDAwODAwMCk7XG5leHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfU09VUkNFID0gQmlnSW50KDB4MDAwMDAwMDAwMDAxMDAwMCk7XG5leHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfVEFSR0VUID0gQmlnSW50KDB4MDAwMDAwMDAwMDAyMDAwMCk7XG5leHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9HRVQgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMDQwMDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0ZJTEVTVEFUX1NFVF9TSVpFID0gQmlnSW50KDB4MDAwMDAwMDAwMDA4MDAwMCk7XG5leHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9TRVRfVElNRVMgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMTAwMDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQgPSBCaWdJbnQoMHgwMDAwMDAwMDAwMjAwMDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfU0laRSA9IEJpZ0ludCgweDAwMDAwMDAwMDA0MDAwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0ZJTEVTVEFUX1NFVF9USU1FUyA9IEJpZ0ludCgweDAwMDAwMDAwMDA4MDAwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfU1lNTElOSyA9IEJpZ0ludCgweDAwMDAwMDAwMDEwMDAwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfUkVNT1ZFX0RJUkVDVE9SWSA9IEJpZ0ludCgweDAwMDAwMDAwMDIwMDAwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfVU5MSU5LX0ZJTEUgPSBCaWdJbnQoMHgwMDAwMDAwMDA0MDAwMDAwKTtcbmV4cG9ydHMuV0FTSV9SSUdIVF9QT0xMX0ZEX1JFQURXUklURSA9IEJpZ0ludCgweDAwMDAwMDAwMDgwMDAwMDApO1xuZXhwb3J0cy5XQVNJX1JJR0hUX1NPQ0tfU0hVVERPV04gPSBCaWdJbnQoMHgwMDAwMDAwMDEwMDAwMDAwKTtcbmV4cG9ydHMuUklHSFRTX0FMTCA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9EQVRBU1lOQyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQUQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9TRUVLIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfRkRTVEFUX1NFVF9GTEFHUyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1NZTkMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9URUxMIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfV1JJVEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BRFZJU0UgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9BTExPQ0FURSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0RJUkVDVE9SWSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0ZJTEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0xJTktfU09VUkNFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9MSU5LX1RBUkdFVCB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfT1BFTiB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQURESVIgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1JFQURMSU5LIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfU09VUkNFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfVEFSR0VUIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9HRVQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0ZJTEVTVEFUX1NFVF9TSVpFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9TRVRfVElNRVMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfVElNRVMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfU0laRSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfU1lNTElOSyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfVU5MSU5LX0ZJTEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1JFTU9WRV9ESVJFQ1RPUlkgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QT0xMX0ZEX1JFQURXUklURSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1NPQ0tfU0hVVERPV047XG5leHBvcnRzLlJJR0hUU19CTE9DS19ERVZJQ0VfQkFTRSA9IGV4cG9ydHMuUklHSFRTX0FMTDtcbmV4cG9ydHMuUklHSFRTX0JMT0NLX0RFVklDRV9JTkhFUklUSU5HID0gZXhwb3J0cy5SSUdIVFNfQUxMO1xuZXhwb3J0cy5SSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9CQVNFID0gZXhwb3J0cy5SSUdIVFNfQUxMO1xuZXhwb3J0cy5SSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9JTkhFUklUSU5HID0gZXhwb3J0cy5SSUdIVFNfQUxMO1xuZXhwb3J0cy5SSUdIVFNfUkVHVUxBUl9GSUxFX0JBU0UgPSBleHBvcnRzLldBU0lfUklHSFRfRkRfREFUQVNZTkMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9SRUFEIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfU0VFSyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0ZEU1RBVF9TRVRfRkxBR1MgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9TWU5DIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfVEVMTCB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1dSSVRFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfQURWSVNFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfQUxMT0NBVEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfU0laRSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0ZJTEVTVEFUX1NFVF9USU1FUyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BPTExfRkRfUkVBRFdSSVRFO1xuZXhwb3J0cy5SSUdIVFNfUkVHVUxBUl9GSUxFX0lOSEVSSVRJTkcgPSBCaWdJbnQoMCk7XG5leHBvcnRzLlJJR0hUU19ESVJFQ1RPUllfQkFTRSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GRFNUQVRfU0VUX0ZMQUdTIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfU1lOQyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX0FEVklTRSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0RJUkVDVE9SWSB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfQ1JFQVRFX0ZJTEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0xJTktfU09VUkNFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9MSU5LX1RBUkdFVCB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX1BBVEhfT1BFTiB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1JFQURESVIgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1JFQURMSU5LIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfU09VUkNFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU5BTUVfVEFSR0VUIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9HRVQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX0ZJTEVTVEFUX1NFVF9TSVpFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9TRVRfVElNRVMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfVElNRVMgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1NZTUxJTksgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9QQVRIX1VOTElOS19GSUxFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUEFUSF9SRU1PVkVfRElSRUNUT1JZIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUE9MTF9GRF9SRUFEV1JJVEU7XG5leHBvcnRzLlJJR0hUU19ESVJFQ1RPUllfSU5IRVJJVElORyA9IGV4cG9ydHMuUklHSFRTX0RJUkVDVE9SWV9CQVNFIHwgZXhwb3J0cy5SSUdIVFNfUkVHVUxBUl9GSUxFX0JBU0U7XG5leHBvcnRzLlJJR0hUU19TT0NLRVRfQkFTRSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9SRUFEIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfRkRTVEFUX1NFVF9GTEFHUyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1dSSVRFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfRklMRVNUQVRfR0VUIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUE9MTF9GRF9SRUFEV1JJVEUgfFxuICAgIGV4cG9ydHMuV0FTSV9SSUdIVF9TT0NLX1NIVVRET1dOO1xuZXhwb3J0cy5SSUdIVFNfU09DS0VUX0lOSEVSSVRJTkcgPSBleHBvcnRzLlJJR0hUU19BTEw7XG5leHBvcnRzLlJJR0hUU19UVFlfQkFTRSA9IGV4cG9ydHMuV0FTSV9SSUdIVF9GRF9SRUFEIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfRkRTVEFUX1NFVF9GTEFHUyB8XG4gICAgZXhwb3J0cy5XQVNJX1JJR0hUX0ZEX1dSSVRFIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfRkRfRklMRVNUQVRfR0VUIHxcbiAgICBleHBvcnRzLldBU0lfUklHSFRfUE9MTF9GRF9SRUFEV1JJVEU7XG5leHBvcnRzLlJJR0hUU19UVFlfSU5IRVJJVElORyA9IEJpZ0ludCgwKTtcbmV4cG9ydHMuV0FTSV9DTE9DS19SRUFMVElNRSA9IDA7XG5leHBvcnRzLldBU0lfQ0xPQ0tfTU9OT1RPTklDID0gMTtcbmV4cG9ydHMuV0FTSV9DTE9DS19QUk9DRVNTX0NQVVRJTUVfSUQgPSAyO1xuZXhwb3J0cy5XQVNJX0NMT0NLX1RIUkVBRF9DUFVUSU1FX0lEID0gMztcbmV4cG9ydHMuV0FTSV9FVkVOVFRZUEVfQ0xPQ0sgPSAwO1xuZXhwb3J0cy5XQVNJX0VWRU5UVFlQRV9GRF9SRUFEID0gMTtcbmV4cG9ydHMuV0FTSV9FVkVOVFRZUEVfRkRfV1JJVEUgPSAyO1xuZXhwb3J0cy5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNID0gMSA8PCAwO1xuZXhwb3J0cy5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNX05PVyA9IDEgPDwgMTtcbmV4cG9ydHMuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTSA9IDEgPDwgMjtcbmV4cG9ydHMuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTV9OT1cgPSAxIDw8IDM7XG5leHBvcnRzLldBU0lfT19DUkVBVCA9IDEgPDwgMDtcbmV4cG9ydHMuV0FTSV9PX0RJUkVDVE9SWSA9IDEgPDwgMTtcbmV4cG9ydHMuV0FTSV9PX0VYQ0wgPSAxIDw8IDI7XG5leHBvcnRzLldBU0lfT19UUlVOQyA9IDEgPDwgMztcbmV4cG9ydHMuV0FTSV9QUkVPUEVOVFlQRV9ESVIgPSAwO1xuZXhwb3J0cy5XQVNJX0RJUkNPT0tJRV9TVEFSVCA9IDA7XG5leHBvcnRzLldBU0lfU1RESU5fRklMRU5PID0gMDtcbmV4cG9ydHMuV0FTSV9TVERPVVRfRklMRU5PID0gMTtcbmV4cG9ydHMuV0FTSV9TVERFUlJfRklMRU5PID0gMjtcbmV4cG9ydHMuV0FTSV9XSEVOQ0VfU0VUID0gMDtcbmV4cG9ydHMuV0FTSV9XSEVOQ0VfQ1VSID0gMTtcbmV4cG9ydHMuV0FTSV9XSEVOQ0VfRU5EID0gMjtcbi8vIGh0dHA6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuMy9lcnJuby4zLmh0bWxcbmV4cG9ydHMuRVJST1JfTUFQID0ge1xuICAgIEUyQklHOiBleHBvcnRzLldBU0lfRTJCSUcsXG4gICAgRUFDQ0VTOiBleHBvcnRzLldBU0lfRUFDQ0VTLFxuICAgIEVBRERSSU5VU0U6IGV4cG9ydHMuV0FTSV9FQUREUklOVVNFLFxuICAgIEVBRERSTk9UQVZBSUw6IGV4cG9ydHMuV0FTSV9FQUREUk5PVEFWQUlMLFxuICAgIEVBRk5PU1VQUE9SVDogZXhwb3J0cy5XQVNJX0VBRk5PU1VQUE9SVCxcbiAgICBFQUxSRUFEWTogZXhwb3J0cy5XQVNJX0VBTFJFQURZLFxuICAgIEVBR0FJTjogZXhwb3J0cy5XQVNJX0VBR0FJTixcbiAgICAvLyBFQkFERTogV0FTSV9FQkFERSxcbiAgICBFQkFERjogZXhwb3J0cy5XQVNJX0VCQURGLFxuICAgIC8vIEVCQURGRDogV0FTSV9FQkFERkQsXG4gICAgRUJBRE1TRzogZXhwb3J0cy5XQVNJX0VCQURNU0csXG4gICAgLy8gRUJBRFI6IFdBU0lfRUJBRFIsXG4gICAgLy8gRUJBRFJRQzogV0FTSV9FQkFEUlFDLFxuICAgIC8vIEVCQURTTFQ6IFdBU0lfRUJBRFNMVCxcbiAgICBFQlVTWTogZXhwb3J0cy5XQVNJX0VCVVNZLFxuICAgIEVDQU5DRUxFRDogZXhwb3J0cy5XQVNJX0VDQU5DRUxFRCxcbiAgICBFQ0hJTEQ6IGV4cG9ydHMuV0FTSV9FQ0hJTEQsXG4gICAgLy8gRUNIUk5HOiBXQVNJX0VDSFJORyxcbiAgICAvLyBFQ09NTTogV0FTSV9FQ09NTSxcbiAgICBFQ09OTkFCT1JURUQ6IGV4cG9ydHMuV0FTSV9FQ09OTkFCT1JURUQsXG4gICAgRUNPTk5SRUZVU0VEOiBleHBvcnRzLldBU0lfRUNPTk5SRUZVU0VELFxuICAgIEVDT05OUkVTRVQ6IGV4cG9ydHMuV0FTSV9FQ09OTlJFU0VULFxuICAgIEVERUFETE9DSzogZXhwb3J0cy5XQVNJX0VERUFETEssXG4gICAgRURFU1RBRERSUkVROiBleHBvcnRzLldBU0lfRURFU1RBRERSUkVRLFxuICAgIEVET006IGV4cG9ydHMuV0FTSV9FRE9NLFxuICAgIEVEUVVPVDogZXhwb3J0cy5XQVNJX0VEUVVPVCxcbiAgICBFRVhJU1Q6IGV4cG9ydHMuV0FTSV9FRVhJU1QsXG4gICAgRUZBVUxUOiBleHBvcnRzLldBU0lfRUZBVUxULFxuICAgIEVGQklHOiBleHBvcnRzLldBU0lfRUZCSUcsXG4gICAgRUhPU1RET1dOOiBleHBvcnRzLldBU0lfRUhPU1RVTlJFQUNILFxuICAgIEVIT1NUVU5SRUFDSDogZXhwb3J0cy5XQVNJX0VIT1NUVU5SRUFDSCxcbiAgICAvLyBFSFdQT0lTT046IFdBU0lfRUhXUE9JU09OLFxuICAgIEVJRFJNOiBleHBvcnRzLldBU0lfRUlEUk0sXG4gICAgRUlMU0VROiBleHBvcnRzLldBU0lfRUlMU0VRLFxuICAgIEVJTlBST0dSRVNTOiBleHBvcnRzLldBU0lfRUlOUFJPR1JFU1MsXG4gICAgRUlOVFI6IGV4cG9ydHMuV0FTSV9FSU5UUixcbiAgICBFSU5WQUw6IGV4cG9ydHMuV0FTSV9FSU5WQUwsXG4gICAgRUlPOiBleHBvcnRzLldBU0lfRUlPLFxuICAgIEVJU0NPTk46IGV4cG9ydHMuV0FTSV9FSVNDT05OLFxuICAgIEVJU0RJUjogZXhwb3J0cy5XQVNJX0VJU0RJUixcbiAgICBFTE9PUDogZXhwb3J0cy5XQVNJX0VMT09QLFxuICAgIEVNRklMRTogZXhwb3J0cy5XQVNJX0VNRklMRSxcbiAgICBFTUxJTks6IGV4cG9ydHMuV0FTSV9FTUxJTkssXG4gICAgRU1TR1NJWkU6IGV4cG9ydHMuV0FTSV9FTVNHU0laRSxcbiAgICBFTVVMVElIT1A6IGV4cG9ydHMuV0FTSV9FTVVMVElIT1AsXG4gICAgRU5BTUVUT09MT05HOiBleHBvcnRzLldBU0lfRU5BTUVUT09MT05HLFxuICAgIEVORVRET1dOOiBleHBvcnRzLldBU0lfRU5FVERPV04sXG4gICAgRU5FVFJFU0VUOiBleHBvcnRzLldBU0lfRU5FVFJFU0VULFxuICAgIEVORVRVTlJFQUNIOiBleHBvcnRzLldBU0lfRU5FVFVOUkVBQ0gsXG4gICAgRU5GSUxFOiBleHBvcnRzLldBU0lfRU5GSUxFLFxuICAgIEVOT0JVRlM6IGV4cG9ydHMuV0FTSV9FTk9CVUZTLFxuICAgIEVOT0RFVjogZXhwb3J0cy5XQVNJX0VOT0RFVixcbiAgICBFTk9FTlQ6IGV4cG9ydHMuV0FTSV9FTk9FTlQsXG4gICAgRU5PRVhFQzogZXhwb3J0cy5XQVNJX0VOT0VYRUMsXG4gICAgRU5PTENLOiBleHBvcnRzLldBU0lfRU5PTENLLFxuICAgIEVOT0xJTks6IGV4cG9ydHMuV0FTSV9FTk9MSU5LLFxuICAgIEVOT01FTTogZXhwb3J0cy5XQVNJX0VOT01FTSxcbiAgICBFTk9NU0c6IGV4cG9ydHMuV0FTSV9FTk9NU0csXG4gICAgRU5PUFJPVE9PUFQ6IGV4cG9ydHMuV0FTSV9FTk9QUk9UT09QVCxcbiAgICBFTk9TUEM6IGV4cG9ydHMuV0FTSV9FTk9TUEMsXG4gICAgRU5PU1lTOiBleHBvcnRzLldBU0lfRU5PU1lTLFxuICAgIEVOT1RDT05OOiBleHBvcnRzLldBU0lfRU5PVENPTk4sXG4gICAgRU5PVERJUjogZXhwb3J0cy5XQVNJX0VOT1RESVIsXG4gICAgRU5PVEVNUFRZOiBleHBvcnRzLldBU0lfRU5PVEVNUFRZLFxuICAgIEVOT1RSRUNPVkVSQUJMRTogZXhwb3J0cy5XQVNJX0VOT1RSRUNPVkVSQUJMRSxcbiAgICBFTk9UU09DSzogZXhwb3J0cy5XQVNJX0VOT1RTT0NLLFxuICAgIEVOT1RUWTogZXhwb3J0cy5XQVNJX0VOT1RUWSxcbiAgICBFTlhJTzogZXhwb3J0cy5XQVNJX0VOWElPLFxuICAgIEVPVkVSRkxPVzogZXhwb3J0cy5XQVNJX0VPVkVSRkxPVyxcbiAgICBFT1dORVJERUFEOiBleHBvcnRzLldBU0lfRU9XTkVSREVBRCxcbiAgICBFUEVSTTogZXhwb3J0cy5XQVNJX0VQRVJNLFxuICAgIEVQSVBFOiBleHBvcnRzLldBU0lfRVBJUEUsXG4gICAgRVBST1RPOiBleHBvcnRzLldBU0lfRVBST1RPLFxuICAgIEVQUk9UT05PU1VQUE9SVDogZXhwb3J0cy5XQVNJX0VQUk9UT05PU1VQUE9SVCxcbiAgICBFUFJPVE9UWVBFOiBleHBvcnRzLldBU0lfRVBST1RPVFlQRSxcbiAgICBFUkFOR0U6IGV4cG9ydHMuV0FTSV9FUkFOR0UsXG4gICAgRVJPRlM6IGV4cG9ydHMuV0FTSV9FUk9GUyxcbiAgICBFU1BJUEU6IGV4cG9ydHMuV0FTSV9FU1BJUEUsXG4gICAgRVNSQ0g6IGV4cG9ydHMuV0FTSV9FU1JDSCxcbiAgICBFU1RBTEU6IGV4cG9ydHMuV0FTSV9FU1RBTEUsXG4gICAgRVRJTUVET1VUOiBleHBvcnRzLldBU0lfRVRJTUVET1VULFxuICAgIEVUWFRCU1k6IGV4cG9ydHMuV0FTSV9FVFhUQlNZLFxuICAgIEVYREVWOiBleHBvcnRzLldBU0lfRVhERVZcbn07XG5leHBvcnRzLlNJR05BTF9NQVAgPSB7XG4gICAgW2V4cG9ydHMuV0FTSV9TSUdIVVBdOiBcIlNJR0hVUFwiLFxuICAgIFtleHBvcnRzLldBU0lfU0lHSU5UXTogXCJTSUdJTlRcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1FVSVRdOiBcIlNJR1FVSVRcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR0lMTF06IFwiU0lHSUxMXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdUUkFQXTogXCJTSUdUUkFQXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdBQlJUXTogXCJTSUdBQlJUXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdCVVNdOiBcIlNJR0JVU1wiLFxuICAgIFtleHBvcnRzLldBU0lfU0lHRlBFXTogXCJTSUdGUEVcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR0tJTExdOiBcIlNJR0tJTExcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1VTUjFdOiBcIlNJR1VTUjFcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1NFR1ZdOiBcIlNJR1NFR1ZcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1VTUjJdOiBcIlNJR1VTUjJcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1BJUEVdOiBcIlNJR1BJUEVcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR0FMUk1dOiBcIlNJR0FMUk1cIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1RFUk1dOiBcIlNJR1RFUk1cIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR0NITERdOiBcIlNJR0NITERcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR0NPTlRdOiBcIlNJR0NPTlRcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1NUT1BdOiBcIlNJR1NUT1BcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1RTVFBdOiBcIlNJR1RTVFBcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1RUSU5dOiBcIlNJR1RUSU5cIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1RUT1VdOiBcIlNJR1RUT1VcIixcbiAgICBbZXhwb3J0cy5XQVNJX1NJR1VSR106IFwiU0lHVVJHXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdYQ1BVXTogXCJTSUdYQ1BVXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdYRlNaXTogXCJTSUdYRlNaXCIsXG4gICAgW2V4cG9ydHMuV0FTSV9TSUdWVEFMUk1dOiBcIlNJR1ZUQUxSTVwiXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLypcbkNyZWF0ZSBhIHVuaW9uIGZpbGVzeXN0ZW0gYXMgZGVzY3JpYmVkIGJ5IGEgRmlsZVN5c3RlbVNwZWNbXS5cblxuVGhpcyBjb2RlIHNob3VsZCBub3QgZGVwZW5kIG9uIGFueXRoaW5nIHRoYXQgbXVzdCBydW4gaW4gbm9kZS5qcy5cblxuTm90ZSB0aGF0IHRoaXMgaXMgZW50aXJlbHkgc3luY2hyb25vdXMgY29kZSwgZS5nLiwgdGhlIHVuemlwIGNvZGUsXG5hbmQgdGhhdCdzIGp1c3RpZmllZCBiZWNhdXNlIG91ciBXQVNNIGludGVycHJldGVyIHdpbGwgbGlrZWx5IGdldFxucnVuIGluIGEgZGlmZmVyZW50IHRocmVhZCAoYSB3ZWJ3b3JrZXIpIHRoYW4gdGhlIG1haW4gdGhyZWFkLCBhbmRcbnRoaXMgY29kZSBpcyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBpdCBiZWZvcmUgYW55dGhpbmcgZWxzZSBjYW4gaGFwcGVuLlxuKi9cbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbSA9IHZvaWQgMDtcbmNvbnN0IHVuemlwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdW56aXBcIikpO1xuY29uc3QgbWVtZnNfMSA9IHJlcXVpcmUoXCJAY293YXNtL21lbWZzXCIpO1xuY29uc3QgdW5pb25mc18xID0gcmVxdWlyZShcIkB3YXB5dGhvbi91bmlvbmZzXCIpO1xuZnVuY3Rpb24gY3JlYXRlRmlsZVN5c3RlbShzcGVjcywgbmF0aXZlRnMpIHtcbiAgICBpZiAoc3BlY3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgcmV0dXJuIG1lbUZzKCk7IC8vIGVtcHR5IG1lbWZzXG4gICAgfVxuICAgIGlmIChzcGVjcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAvLyBkb24ndCB1c2UgdW5pb25mczpcbiAgICAgICAgcmV0dXJuIHNwZWNUb0ZzKHNwZWNzWzBdLCBuYXRpdmVGcykgPz8gbWVtRnMoKTtcbiAgICB9XG4gICAgY29uc3QgdWZzID0gbmV3IHVuaW9uZnNfMS5VbmlvbigpO1xuICAgIGNvbnN0IHYgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNwZWMgb2Ygc3BlY3MpIHtcbiAgICAgICAgY29uc3QgZnMgPSBzcGVjVG9GcyhzcGVjLCBuYXRpdmVGcyk7XG4gICAgICAgIGlmIChmcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBlLmcuLCBuYXRpdmUgYmluZGluZ3MgbWF5IGJlIG51bGwuXG4gICAgICAgICAgICB1ZnMudXNlKGZzKTtcbiAgICAgICAgICAgIGlmIChmcy53YWl0VW50aWxMb2FkZWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHYucHVzaChmcy53YWl0VW50aWxMb2FkZWQuYmluZChmcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHdhaXRVbnRpbExvYWRlZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCB3YWl0IG9mIHYpIHtcbiAgICAgICAgICAgIGF3YWl0IHdhaXQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHsgLi4udWZzLCBjb25zdGFudHM6IG1lbWZzXzEuZnMuY29uc3RhbnRzLCB3YWl0VW50aWxMb2FkZWQgfTtcbn1cbmV4cG9ydHMuY3JlYXRlRmlsZVN5c3RlbSA9IGNyZWF0ZUZpbGVTeXN0ZW07XG5mdW5jdGlvbiBzcGVjVG9GcyhzcGVjLCBuYXRpdmVGcykge1xuICAgIC8vIEFsbCB0aGVzZSBcImFzIGFueVwiIGFyZSBiZWNhdXNlIHJlYWxseSBub3RoaW5nIHF1aXRlIGltcGxlbWVudHMgRmlsZVN5c3RlbSB5ZXQhXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdHJlYW1pY2gvbWVtZnMvaXNzdWVzLzczNVxuICAgIGlmIChzcGVjLnR5cGUgPT0gXCJ6aXBcIikge1xuICAgICAgICByZXR1cm4gemlwRnMoc3BlYy5kYXRhLCBzcGVjLm1vdW50cG9pbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzcGVjLnR5cGUgPT0gXCJ6aXAtYXN5bmNcIikge1xuICAgICAgICByZXR1cm4gemlwRnNBc3luYyhzcGVjLmdldERhdGEsIHNwZWMubW91bnRwb2ludCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNwZWMudHlwZSA9PSBcInppcGZpbGVcIikge1xuICAgICAgICB0aHJvdyBFcnJvcihgeW91IG11c3QgY29udmVydCB6aXBmaWxlIC0tIHJlYWQgJHtzcGVjLnppcGZpbGV9IGludG8gbWVtb3J5YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNwZWMudHlwZSA9PSBcInppcHVybFwiKSB7XG4gICAgICAgIHRocm93IEVycm9yKGB5b3UgbXVzdCBjb252ZXJ0IHppcHVybCAtLSByZWFkICR7c3BlYy56aXB1cmx9IGludG8gbWVtb3J5YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNwZWMudHlwZSA9PSBcIm5hdGl2ZVwiKSB7XG4gICAgICAgIC8vIG5hdGl2ZSA9IHdoYXRldmVyIGlzIGluIGJpbmRpbmdzLlxuICAgICAgICByZXR1cm4gbmF0aXZlRnMgPT0gbnVsbCA/IG5hdGl2ZUZzIDogbWFwRmxhZ3MobmF0aXZlRnMpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzcGVjLnR5cGUgPT0gXCJtZW1cIikge1xuICAgICAgICByZXR1cm4gbWVtRnMoc3BlYy5jb250ZW50cyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNwZWMudHlwZSA9PSBcImRldlwiKSB7XG4gICAgICAgIHJldHVybiBkZXZGcygpO1xuICAgIH1cbiAgICB0aHJvdyBFcnJvcihgdW5rbm93biBzcGVjIHR5cGUgLSAke0pTT04uc3RyaW5naWZ5KHNwZWMpfWApO1xufVxuLy8gdGhpcyBpcyBnZW5lcmljIGFuZCB3b3VsZCB3b3JrIGluIGEgYnJvd3NlcjpcbmZ1bmN0aW9uIGRldkZzKCkge1xuICAgIGNvbnN0IHZvbCA9IG1lbWZzXzEuVm9sdW1lLmZyb21KU09OKHtcbiAgICAgICAgXCIvZGV2L3N0ZGluXCI6IFwiXCIsXG4gICAgICAgIFwiL2Rldi9zdGRvdXRcIjogXCJcIixcbiAgICAgICAgXCIvZGV2L3N0ZGVyclwiOiBcIlwiLFxuICAgIH0pO1xuICAgIHZvbC5yZWxlYXNlZEZkcyA9IFswLCAxLCAyXTtcbiAgICBjb25zdCBmZEVyciA9IHZvbC5vcGVuU3luYyhcIi9kZXYvc3RkZXJyXCIsIFwid1wiKTtcbiAgICBjb25zdCBmZE91dCA9IHZvbC5vcGVuU3luYyhcIi9kZXYvc3Rkb3V0XCIsIFwid1wiKTtcbiAgICBjb25zdCBmZEluID0gdm9sLm9wZW5TeW5jKFwiL2Rldi9zdGRpblwiLCBcInJcIik7XG4gICAgaWYgKGZkRXJyICE9IDIpXG4gICAgICAgIHRocm93IEVycm9yKGBpbnZhbGlkIGhhbmRsZSBmb3Igc3RkZXJyOiAke2ZkRXJyfWApO1xuICAgIGlmIChmZE91dCAhPSAxKVxuICAgICAgICB0aHJvdyBFcnJvcihgaW52YWxpZCBoYW5kbGUgZm9yIHN0ZG91dDogJHtmZE91dH1gKTtcbiAgICBpZiAoZmRJbiAhPSAwKVxuICAgICAgICB0aHJvdyBFcnJvcihgaW52YWxpZCBoYW5kbGUgZm9yIHN0ZGluOiAke2ZkSW59YCk7XG4gICAgcmV0dXJuICgwLCBtZW1mc18xLmNyZWF0ZUZzRnJvbVZvbHVtZSkodm9sKTtcbn1cbmZ1bmN0aW9uIHppcEZzKGRhdGEsIGRpcmVjdG9yeSA9IFwiL1wiKSB7XG4gICAgY29uc3QgZnMgPSAoMCwgbWVtZnNfMS5jcmVhdGVGc0Zyb21Wb2x1bWUpKG5ldyBtZW1mc18xLlZvbHVtZSgpKTtcbiAgICBmcy5ta2RpclN5bmMoZGlyZWN0b3J5LCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAoMCwgdW56aXBfMS5kZWZhdWx0KSh7IGRhdGEsIGZzLCBkaXJlY3RvcnkgfSk7XG4gICAgcmV0dXJuIGZzO1xufVxuZnVuY3Rpb24gemlwRnNBc3luYyhnZXREYXRhLCBkaXJlY3RvcnkgPSBcIi9cIikge1xuICAgIGNvbnN0IGZzID0gKDAsIG1lbWZzXzEuY3JlYXRlRnNGcm9tVm9sdW1lKShuZXcgbWVtZnNfMS5Wb2x1bWUoKSk7XG4gICAgY29uc3QgbG9hZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkYXRhID0gYXdhaXQgZ2V0RGF0YSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRkFJTEVEIHRvIGxvYWQgYXN5bmMgZmlsZXN5c3RlbSBmb3IgJyR7ZGlyZWN0b3J5fScgLSAke2Vycn1gKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICAvLyBOT1RFOiB0aGVyZSBpcyBhbiBhc3luYyB2ZXJzaW9uIG9mIHRoaXMsIGJ1dCBpdCBydW5zIGluIGFub3RoZXJcbiAgICAgICAgLy8gd2Vid29ya2VyIGFuZCBjb3N0cyBzaWduaWZpY2FudCBvdmVyaGVhZCwgc28gbm90IHdvcnRoIGl0LlxuICAgICAgICAoMCwgdW56aXBfMS5kZWZhdWx0KSh7IGRhdGEsIGZzLCBkaXJlY3RvcnkgfSk7XG4gICAgfTtcbiAgICBjb25zdCBsb2FkaW5nUHJvbWlzZSA9IGxvYWQoKTtcbiAgICBmcy53YWl0VW50aWxMb2FkZWQgPSAoKSA9PiBsb2FkaW5nUHJvbWlzZTtcbiAgICByZXR1cm4gZnM7XG59XG5mdW5jdGlvbiBtZW1Gcyhjb250ZW50cykge1xuICAgIGNvbnN0IHZvbCA9IGNvbnRlbnRzICE9IG51bGwgPyBtZW1mc18xLlZvbHVtZS5mcm9tSlNPTihjb250ZW50cykgOiBuZXcgbWVtZnNfMS5Wb2x1bWUoKTtcbiAgICByZXR1cm4gKDAsIG1lbWZzXzEuY3JlYXRlRnNGcm9tVm9sdW1lKSh2b2wpO1xufVxuZnVuY3Rpb24gbWFwRmxhZ3MobmF0aXZlRnMpIHtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUoZmxhZ3MpIHtcbiAgICAgICAgLy8gV2UgaGF2ZSB0byB0cmFuc2xhdGUgdGhlIGZsYWdzIGZyb20gV0FTTS9tZW1mcy9tdXNsIHRvIG5hdGl2ZSBmb3IgdGhpcyBvcGVyYXRpbmcgc3lzdGVtLlxuICAgICAgICAvLyBFLmcuLCBvbiBNYWNPUyBtYW55IGZsYWdzIGFyZSBjb21wbGV0ZWx5IGRpZmZlcmVudC4gIFNlZSBiaWcgY29tbWVudCBiZWxvdy5cbiAgICAgICAgbGV0IG5hdGl2ZUZsYWdzID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBmbGFnIGluIG1lbWZzXzEuZnMuY29uc3RhbnRzKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGZsYWdzIHN0YXJ0aW5nIHdpdGggT18gYXJlIHJlbGV2YW50IGZvciB0aGUgb3BlbiBzeXNjYWxsLlxuICAgICAgICAgICAgaWYgKGZsYWcuc3RhcnRzV2l0aChcIk9fXCIpICYmIGZsYWdzICYgbWVtZnNfMS5mcy5jb25zdGFudHNbZmxhZ10pIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVGbGFncyB8PSBuYXRpdmVGcy5jb25zdGFudHNbZmxhZ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hdGl2ZUZsYWdzO1xuICAgIH1cbiAgICAvLyBcImFueVwiIGJlY2F1c2UgdGhlcmUncyBzb21ldGhpbmcgd2VpcmQgaW52b2x2aW5nIGEgX19wcm9taXNlc19fIG5hbWVzcGFjZSB0aGF0IEkgZG9uJ3QgdW5kZXJzdGFuZC5cbiAgICBjb25zdCBvcGVuID0gYXN5bmMgKHBhdGgsIGZsYWdzLCBtb2RlKSA9PiB7XG4gICAgICAgIHJldHVybiBhd2FpdCBuYXRpdmVGcy5vcGVuKHBhdGgsIHRyYW5zbGF0ZShmbGFncyksIG1vZGUpO1xuICAgIH07XG4gICAgY29uc3Qgb3BlblN5bmMgPSAocGF0aCwgZmxhZ3MsIG1vZGUpID0+IHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUZzLm9wZW5TeW5jKHBhdGgsIHRyYW5zbGF0ZShmbGFncyksIG1vZGUpO1xuICAgIH07XG4gICAgY29uc3QgcHJvbWlzZXMgPSB7XG4gICAgICAgIC4uLm5hdGl2ZUZzLnByb21pc2VzLFxuICAgICAgICBvcGVuOiBhc3luYyAocGF0aCwgZmxhZ3MsIG1vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBuYXRpdmVGcy5wcm9taXNlcy5vcGVuKHBhdGgsIGZsYWdzLCBtb2RlKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnsgLi4ubmF0aXZlRnMsIHByb21pc2VzIH0sXG4gICAgICAgIG9wZW4sXG4gICAgICAgIG9wZW5TeW5jLFxuICAgICAgICBjb25zdGFudHM6IG1lbWZzXzEuZnMuY29uc3RhbnRzLCAvLyBjcml0aWNhbCB0byBBTFdBWVMgdXNlIG1lbWZzIGNvbnN0YW50cyBmb3IgYW55IGZpbGVzeXN0ZW0uXG4gICAgfTtcbn1cbi8qXG5Db21tZW50IGFib3V0IGZsYWdzOlxuXG5BIG1ham9yIHN1YnRsZSBpc3N1ZSBJIGhpdCBpcyB0aGF0IHVuaW9uZnMgY29tYmluZXMgZmlsZXN5c3RlbXMsIGFuZFxuZWFjaCBmaWxlc3lzdGVtIGNhbiBkZWZpbmUgZnMuY29uc3RhbnRzIGRpZmZlcmVudGx5ISBJbiBwYXJ0aWN1bGFyLFxubWVtZnMgYWx3YXlzIGhhcmRjb2RlcyBjb25zdGFudHMuT19FWENMIHRvIGJlIDEyOC4gIEhvd2V2ZXIsIG9uXG5tYWNvcyBuYXRpdmUgZmlsZXN5c3RlbSBpdCBpcyAyMDQ4LCB3aGVyZWFzIG9uIExpbnV4IG5hdGl2ZSBmaWxlc3lzdGVtXG5pdCBpcyBhbHNvIDEyOC4gIFdlIGNvbWJpbmUgbWVtZnMgYW5kIG5hdGl2ZSBmb3IgcnVubmluZyBweXRob24td2FzbVxudW5kZXIgbm9kZWpzLCBzaW5jZSB3ZSB3YW50IHRvIHVzZSBvdXIgUHl0aG9uIGluc3RhbGwgKHRoYXQgaXMgaW5cbmRpc3QvcHl0aG9uL3B5dGhvbi56aXAgYW5kIG1vdW50ZWQgdXNpbmcgbWVtZnMpIGFsb25nIHdpdGggZnVsbCBhY2Nlc3NcbnRvIHRoZSBuYXRpdmUgZmlsZXN5c3RlbS5cblxuSSB0aGluayB0aGUgb25seSBnb29kIHNvbHV0aW9uIHRvIHRoaXMgaXMgdGhlIGZvbGxvd2luZzpcbi0gaWYgbmF0aXZlIGlzbid0IHBhcnQgb2YgdGhlIHVuaW9uZnMsIG5vdGhpbmcgdG8gZG8gKHNpbmNlIHdlIG9ubHkgY3VycmVudGx5IHVzZSBuYXRpdmUgYW5kIG1lbWZzKS5cbi0gZnMuY29uc3RhbnRzIHNob3VsZCBiZSBtZW1mcydzIGNvbnN0YW50cyBzaW5jZSBJIHRoaW5rIHRoZXkgbWF0Y2ggd2l0aCB3aGF0IFdlYkFzc2VtYmx5IGxpYmMgKHZpYSBtdXNsKVxuICBwcm92aWRlcy5cbi0gaW4gdGhlIG5vZGUgYXBpLCB0aGUgT05MWSBmdW5jdGlvbnMgdGhhdCB0YWtlIG51bWVyaWMgZmxhZ3MgYXJlIG9wZW4gYW5kIG9wZW5TeW5jLiAgVGhhdCdzIGNvbnZlbmllbnQhXG4tIHNvbWVob3cgZmlndXJlIG91dCB3aGljaCBmaWxlc3lzdGVtIChuYXRpdmUgb3IgbWVtZnMgZm9yIG5vdykgdGhhdCBhIGdpdmVuIG9wZW4gd2lsbCBnbyB0bywgYW5kXG4gIGNvbnZlcnQgdGhlIGZsYWdzIGlmIGdvaW5nIHRvIG1lbWZzLlxuXG5Qcm9iYWJseSB0aGUgZWFzaWVzdCB3YXkgdG8gYWNjb21wbGlzaCBhbGwgb2YgdGhlIGFib3ZlIGlzIGp1c3QgdXNlIGEgcHJveHkgYXJvdW5kIG5hdGl2ZSBmcydzXG5vcGVuKiBmdW5jdGlvbi5cbiovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25zdGFudHMgPSBleHBvcnRzLmNyZWF0ZUZpbGVTeXN0ZW0gPSB2b2lkIDA7XG5jb25zdCB3YXNpXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vd2FzaVwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB3YXNpXzEuZGVmYXVsdDtcbnZhciBmc18xID0gcmVxdWlyZShcIi4vZnNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVGaWxlU3lzdGVtXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmc18xLmNyZWF0ZUZpbGVTeXN0ZW07IH0gfSk7XG5jb25zdCBjb25zdGFudHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpKTtcbmV4cG9ydHMuY29uc3RhbnRzID0gY29uc3RhbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldBU0lLaWxsRXJyb3IgPSBleHBvcnRzLldBU0lFeGl0RXJyb3IgPSBleHBvcnRzLldBU0lFcnJvciA9IHZvaWQgMDtcbmNsYXNzIFdBU0lFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihlcnJubykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmVycm5vID0gZXJybm87XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBXQVNJRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLldBU0lFcnJvciA9IFdBU0lFcnJvcjtcbmNsYXNzIFdBU0lFeGl0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29kZSkge1xuICAgICAgICBzdXBlcihgV0FTSSBFeGl0IGVycm9yOiAke2NvZGV9YCk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBXQVNJRXhpdEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0cy5XQVNJRXhpdEVycm9yID0gV0FTSUV4aXRFcnJvcjtcbmNsYXNzIFdBU0lLaWxsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioc2lnbmFsKSB7XG4gICAgICAgIHN1cGVyKGBXQVNJIEtpbGwgc2lnbmFsOiAke3NpZ25hbH1gKTtcbiAgICAgICAgdGhpcy5zaWduYWwgPSBzaWduYWw7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBXQVNJS2lsbEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0cy5XQVNJS2lsbEVycm9yID0gV0FTSUtpbGxFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcGF0aF8xID0gcmVxdWlyZShcInBhdGhcIik7XG5jb25zdCBmZmxhdGVfMSA9IHJlcXVpcmUoXCJmZmxhdGVcIik7XG5mdW5jdGlvbiB1bnppcCh7IGRhdGEsIGZzLCBkaXJlY3RvcnkgfSkge1xuICAgIC8vIGNvbnN0IHQwID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgfVxuICAgIGlmICghKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImltcG9zc2libGVcIik7IC8vIHdhcyBjb252ZXJ0ZWQgYWJvdmUuIHRoaXMgaXMgZm9yIHR5cGVzY3JpcHQuXG4gICAgfVxuICAgIGNvbnN0IHogPSAoMCwgZmZsYXRlXzEudW56aXBTeW5jKShkYXRhKTtcbiAgICBmb3IgKGNvbnN0IFtyZWxhdGl2ZVBhdGgsIGNvbnRlbnRdIG9mIE9iamVjdC5lbnRyaWVzKHopKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dEZpbGVuYW1lID0gKDAsIHBhdGhfMS5qb2luKShkaXJlY3RvcnksIHJlbGF0aXZlUGF0aCk7XG4gICAgICAgIGZzLm1rZGlyU3luYygoMCwgcGF0aF8xLmRpcm5hbWUpKG91dHB1dEZpbGVuYW1lKSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICAgIGlmIChvdXRwdXRGaWxlbmFtZS5lbmRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICAvLyBpdCBpcyBhIGRpcmVjdG9yeSwgbm90IGEgZmlsZS5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0RmlsZW5hbWUsIGNvbnRlbnQpO1xuICAgICAgICBmcy5jaG1vZFN5bmMob3V0cHV0RmlsZW5hbWUsIDBvNzc3KTtcbiAgICB9XG4gICAgLy8gICBjb25zb2xlLmxvZyhcbiAgICAvLyAgICAgYGV4dHJhY3QgJHtkYXRhLmxlbmd0aCAvIDEwICoqIDZ9IE1CIGluICR7bmV3IERhdGUoKS52YWx1ZU9mKCkgLSB0MH1tc2BcbiAgICAvLyAgICk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSB1bnppcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuemlwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyogTUlUIGxpY2Vuc2VkLiAgU2VlIFJFQURNRS5tZCBmb3IgY29weXJpZ2h0IGFuZCBoaXN0b3J5IGluZm9ybWF0aW9uLiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgbG9nID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoXCJ3YXNpXCIpO1xuY29uc3QgbG9nT3BlbiA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwid2FzaTpvcGVuXCIpOyAvLyBqdXN0IGxvZyBvcGVuaW5nIGZpbGVzLCB3aGljaCBpcyB1c2VmdWxcbi8vIFNlZSB0aGUgY29tbWVudCBpbiBwYWNrYWdlcy9jcHl0aG9uL3NyYy9weWNvbmZpZy5oXG4vLyBJbiBwYXJ0aWN1bGFyLCB1bnRpbCB3ZSBwYXRjaCBjcHl0aG9uIGl0c2VsZiwgaXQncyByZWFsbHlcbi8vIG9ubHkgc2FmZSB0byBzZXQgdGhpcyB0byAyNTYuICBUT0RPOiB3ZSBwbGFuIHRvIHBhdGNoXG4vLyBldmVyeXRoaW5nIGluIGNweXRob24gdGhhdCBmYWxscyBiYWNrIHRvIDI1NiB0byBpbnN0ZWFkXG4vLyB1c2UgdGhlIHZhbHVlIDMyNzY4LlxuY29uc3QgU0NfT1BFTl9NQVggPSAzMjc2ODtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmNvbnN0IHR5cGVkYXJyYXlfdG9fYnVmZmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInR5cGVkYXJyYXktdG8tYnVmZmVyXCIpKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgU1RESU5fREVGQVVMVF9SSUdIVFMgPSBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0RBVEFTWU5DIHxcbiAgICBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX1JFQUQgfFxuICAgIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfU1lOQyB8XG4gICAgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9BRFZJU0UgfFxuICAgIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfRklMRVNUQVRfR0VUIHxcbiAgICBjb25zdGFudHNfMS5XQVNJX1JJR0hUX1BPTExfRkRfUkVBRFdSSVRFO1xuY29uc3QgU1RET1VUX0RFRkFVTFRfUklHSFRTID0gY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9EQVRBU1lOQyB8XG4gICAgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9XUklURSB8XG4gICAgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9TWU5DIHxcbiAgICBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0FEVklTRSB8XG4gICAgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQgfFxuICAgIGNvbnN0YW50c18xLldBU0lfUklHSFRfUE9MTF9GRF9SRUFEV1JJVEU7XG5jb25zdCBTVERFUlJfREVGQVVMVF9SSUdIVFMgPSBTVERPVVRfREVGQVVMVF9SSUdIVFM7XG5jb25zdCBtc1RvTnMgPSAobXMpID0+IHtcbiAgICBjb25zdCBtc0ludCA9IE1hdGgudHJ1bmMobXMpO1xuICAgIGNvbnN0IGRlY2ltYWwgPSBCaWdJbnQoTWF0aC5yb3VuZCgobXMgLSBtc0ludCkgKiAxMDAwMDAwKSk7XG4gICAgY29uc3QgbnMgPSBCaWdJbnQobXNJbnQpICogQmlnSW50KDEwMDAwMDApO1xuICAgIHJldHVybiBucyArIGRlY2ltYWw7XG59O1xuY29uc3QgbnNUb01zID0gKG5zKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBucyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBucyA9IE1hdGgudHJ1bmMobnMpO1xuICAgIH1cbiAgICBjb25zdCBuc0ludCA9IEJpZ0ludChucyk7XG4gICAgcmV0dXJuIE51bWJlcihuc0ludCAvIEJpZ0ludCgxMDAwMDAwKSk7XG59O1xuY29uc3Qgd3JhcCA9IChmKSA9PiAoLi4uYXJncykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGxvZyhcIldBU0kgZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgLy8gY29uc29sZS50cmFjZShlcnIpO1xuICAgICAgICBsZXQgZSA9IGVycjtcbiAgICAgICAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHVuaW9uZnMsIGUuZy4sIGluIGZkX3dyaXRlIGlmIGEgcGlwZVxuICAgICAgICAvLyBicmVha3MsIHRoZW4gdW5pb25mcyByYWlzZXMgXCJFcnJvcjogRUJBREY6IGJhZCBmaWxlIGRlc2NyaXB0b3IsIHdyaXRlXCIsXG4gICAgICAgIC8vIGJ1dCB0aGUgcmVsZXZhbnQgZXJyb3IgaXMgXCJwcmV2OiBFcnJvcjogRVBJUEU6IGJyb2tlbiBwaXBlLCB3cml0ZVwiLCB3aGljaCBpdCBzYXZlcy5cbiAgICAgICAgd2hpbGUgKGUucHJldiAhPSBudWxsKSB7XG4gICAgICAgICAgICBlID0gZS5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGl0J3MgYW4gZXJyb3IgZnJvbSB0aGUgZnNcbiAgICAgICAgaWYgKGU/LmNvZGUgJiYgdHlwZW9mIGU/LmNvZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5FUlJPUl9NQVBbZS5jb2RlXSB8fCBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBpdCdzIGEgV0FTSSBlcnJvciwgd2UgcmV0dXJuIGl0IGRpcmVjdGx5XG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgdHlwZXNfMS5XQVNJRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmVycm5vO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSB3ZSBsZXQgdGhlIGVycm9yIGJ1YmJsZSB1cFxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn07XG5jb25zdCBzdGF0ID0gKHdhc2ksIGZkKSA9PiB7XG4gICAgY29uc3QgZW50cnkgPSB3YXNpLkZEX01BUC5nZXQoZmQpO1xuICAgIC8vIGNvbnNvbGUubG9nKFwic3RhdFwiLCB7IGZkLCBlbnRyeSwgRkRfTUFQOiB3YXNpLkZEX01BUCB9KTtcbiAgICAvLyBsb2coXCJzdGF0XCIsIHsgZmQsIGVudHJ5LCBGRF9NQVA6IHdhc2kuRkRfTUFQIH0pO1xuICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuV0FTSUVycm9yKGNvbnN0YW50c18xLldBU0lfRUJBREYpO1xuICAgIH1cbiAgICBpZiAoZW50cnkuZmlsZXR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBzdGF0cyA9IHdhc2kuYmluZGluZ3MuZnMuZnN0YXRTeW5jKGVudHJ5LnJlYWwpO1xuICAgICAgICBjb25zdCB7IGZpbGV0eXBlLCByaWdodHNCYXNlLCByaWdodHNJbmhlcml0aW5nIH0gPSB0cmFuc2xhdGVGaWxlQXR0cmlidXRlcyh3YXNpLCBmZCwgc3RhdHMpO1xuICAgICAgICBlbnRyeS5maWxldHlwZSA9IGZpbGV0eXBlO1xuICAgICAgICBpZiAoIWVudHJ5LnJpZ2h0cykge1xuICAgICAgICAgICAgZW50cnkucmlnaHRzID0ge1xuICAgICAgICAgICAgICAgIGJhc2U6IHJpZ2h0c0Jhc2UsXG4gICAgICAgICAgICAgICAgaW5oZXJpdGluZzogcmlnaHRzSW5oZXJpdGluZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVudHJ5O1xufTtcbmNvbnN0IHRyYW5zbGF0ZUZpbGVBdHRyaWJ1dGVzID0gKHdhc2ksIGZkLCBzdGF0cykgPT4ge1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIHN0YXRzLmlzQmxvY2tEZXZpY2UoKTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfQkxPQ0tfREVWSUNFLFxuICAgICAgICAgICAgICAgIHJpZ2h0c0Jhc2U6IGNvbnN0YW50c18xLlJJR0hUU19CTE9DS19ERVZJQ0VfQkFTRSxcbiAgICAgICAgICAgICAgICByaWdodHNJbmhlcml0aW5nOiBjb25zdGFudHNfMS5SSUdIVFNfQkxPQ0tfREVWSUNFX0lOSEVSSVRJTkcsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIHN0YXRzLmlzQ2hhcmFjdGVyRGV2aWNlKCk6IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGV0eXBlID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFVFlQRV9DSEFSQUNURVJfREVWSUNFO1xuICAgICAgICAgICAgaWYgKGZkICE9PSB1bmRlZmluZWQgJiYgd2FzaS5iaW5kaW5ncy5pc1RUWShmZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmaWxldHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRzQmFzZTogY29uc3RhbnRzXzEuUklHSFRTX1RUWV9CQVNFLFxuICAgICAgICAgICAgICAgICAgICByaWdodHNJbmhlcml0aW5nOiBjb25zdGFudHNfMS5SSUdIVFNfVFRZX0lOSEVSSVRJTkcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGUsXG4gICAgICAgICAgICAgICAgcmlnaHRzQmFzZTogY29uc3RhbnRzXzEuUklHSFRTX0NIQVJBQ1RFUl9ERVZJQ0VfQkFTRSxcbiAgICAgICAgICAgICAgICByaWdodHNJbmhlcml0aW5nOiBjb25zdGFudHNfMS5SSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9JTkhFUklUSU5HLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHN0YXRzLmlzRGlyZWN0b3J5KCk6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX0RJUkVDVE9SWSxcbiAgICAgICAgICAgICAgICByaWdodHNCYXNlOiBjb25zdGFudHNfMS5SSUdIVFNfRElSRUNUT1JZX0JBU0UsXG4gICAgICAgICAgICAgICAgcmlnaHRzSW5oZXJpdGluZzogY29uc3RhbnRzXzEuUklHSFRTX0RJUkVDVE9SWV9JTkhFUklUSU5HLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBzdGF0cy5pc0ZJRk8oKTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSxcbiAgICAgICAgICAgICAgICByaWdodHNCYXNlOiBjb25zdGFudHNfMS5SSUdIVFNfU09DS0VUX0JBU0UsXG4gICAgICAgICAgICAgICAgcmlnaHRzSW5oZXJpdGluZzogY29uc3RhbnRzXzEuUklHSFRTX1NPQ0tFVF9JTkhFUklUSU5HLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBzdGF0cy5pc0ZpbGUoKTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfUkVHVUxBUl9GSUxFLFxuICAgICAgICAgICAgICAgIHJpZ2h0c0Jhc2U6IGNvbnN0YW50c18xLlJJR0hUU19SRUdVTEFSX0ZJTEVfQkFTRSxcbiAgICAgICAgICAgICAgICByaWdodHNJbmhlcml0aW5nOiBjb25zdGFudHNfMS5SSUdIVFNfUkVHVUxBUl9GSUxFX0lOSEVSSVRJTkcsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIHN0YXRzLmlzU29ja2V0KCk6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX1NPQ0tFVF9TVFJFQU0sXG4gICAgICAgICAgICAgICAgcmlnaHRzQmFzZTogY29uc3RhbnRzXzEuUklHSFRTX1NPQ0tFVF9CQVNFLFxuICAgICAgICAgICAgICAgIHJpZ2h0c0luaGVyaXRpbmc6IGNvbnN0YW50c18xLlJJR0hUU19TT0NLRVRfSU5IRVJJVElORyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2Ugc3RhdHMuaXNTeW1ib2xpY0xpbmsoKTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfU1lNQk9MSUNfTElOSyxcbiAgICAgICAgICAgICAgICByaWdodHNCYXNlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgcmlnaHRzSW5oZXJpdGluZzogQmlnSW50KDApLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfVU5LTk9XTixcbiAgICAgICAgICAgICAgICByaWdodHNCYXNlOiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgcmlnaHRzSW5oZXJpdGluZzogQmlnSW50KDApLFxuICAgICAgICAgICAgfTtcbiAgICB9XG59O1xuLy8gY29uc3QgbG9nVG9GaWxlID0gKC4uLmFyZ3MpID0+IHtcbi8vICAgcmVxdWlyZShcImZzXCIpLmFwcGVuZEZpbGVTeW5jKFxuLy8gICAgIFwiL3RtcC93YXNpLmxvZ1wiLFxuLy8gICAgIGFyZ3MubWFwKCh4KSA9PiBgJHt4fWApLmpvaW4oXCIgXCIpICsgXCJcXG5cIlxuLy8gICApO1xuLy8gfTtcbmxldCB3YXJuZWRBYm91dFNsZWVwID0gZmFsc2U7XG5jbGFzcyBXQVNJIHtcbiAgICBjb25zdHJ1Y3Rvcih3YXNpQ29uZmlnKSB7XG4gICAgICAgIHRoaXMubGFzdFN0ZGluID0gMDtcbiAgICAgICAgdGhpcy5lbnYgPSB7fTtcbiAgICAgICAgdGhpcy5zbGVlcCA9IHdhc2lDb25maWcuc2xlZXA7XG4gICAgICAgIHRoaXMuZ2V0U3RkaW4gPSB3YXNpQ29uZmlnLmdldFN0ZGluO1xuICAgICAgICB0aGlzLnNlbmRTdGRvdXQgPSB3YXNpQ29uZmlnLnNlbmRTdGRvdXQ7XG4gICAgICAgIHRoaXMuc2VuZFN0ZGVyciA9IHdhc2lDb25maWcuc2VuZFN0ZGVycjtcbiAgICAgICAgLy8gRGVzdHJ1Y3R1cmUgb3VyIHdhc2lDb25maWdcbiAgICAgICAgbGV0IHByZW9wZW5zID0ge307XG4gICAgICAgIGlmICh3YXNpQ29uZmlnLnByZW9wZW5zKSB7XG4gICAgICAgICAgICBwcmVvcGVucyA9IHdhc2lDb25maWcucHJlb3BlbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdhc2lDb25maWcgJiYgd2FzaUNvbmZpZy5lbnYpIHtcbiAgICAgICAgICAgIHRoaXMuZW52ID0gd2FzaUNvbmZpZy5lbnY7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyZ3MgPSBbXTtcbiAgICAgICAgaWYgKHdhc2lDb25maWcgJiYgd2FzaUNvbmZpZy5hcmdzKSB7XG4gICAgICAgICAgICBhcmdzID0gd2FzaUNvbmZpZy5hcmdzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy5tZW1vcnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGhpcy52aWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJpbmRpbmdzID0gd2FzaUNvbmZpZy5iaW5kaW5ncztcbiAgICAgICAgY29uc3QgZnMgPSB0aGlzLmJpbmRpbmdzLmZzO1xuICAgICAgICB0aGlzLkZEX01BUCA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfU1RESU5fRklMRU5PLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVhbDogMCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfQ0hBUkFDVEVSX0RFVklDRSxcbiAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0OiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogU1RESU5fREVGQVVMVF9SSUdIVFMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0aW5nOiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IFwiL2Rldi9zdGRpblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfU1RET1VUX0ZJTEVOTyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWw6IDEsXG4gICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX0NIQVJBQ1RFUl9ERVZJQ0UsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldDogQmlnSW50KDApLFxuICAgICAgICAgICAgICAgICAgICByaWdodHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IFNURE9VVF9ERUZBVUxUX1JJR0hUUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRpbmc6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogXCIvZGV2L3N0ZG91dFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfU1RERVJSX0ZJTEVOTyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWw6IDIsXG4gICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlOiBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX0NIQVJBQ1RFUl9ERVZJQ0UsXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mZnNldDogQmlnSW50KDApLFxuICAgICAgICAgICAgICAgICAgICByaWdodHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IFNUREVSUl9ERUZBVUxUX1JJR0hUUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRpbmc6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogXCIvZGV2L3N0ZGVyclwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYmluZGluZ3MucGF0aDtcbiAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMocHJlb3BlbnMpKSB7XG4gICAgICAgICAgICBjb25zdCByZWFsID0gZnMub3BlblN5bmModiwgZnMuY29uc3RhbnRzLk9fUkRPTkxZKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld2ZkID0gdGhpcy5nZXRVbnVzZWRGaWxlRGVzY3JpcHRvcigpO1xuICAgICAgICAgICAgdGhpcy5GRF9NQVAuc2V0KG5ld2ZkLCB7XG4gICAgICAgICAgICAgICAgcmVhbCxcbiAgICAgICAgICAgICAgICBmaWxldHlwZTogY29uc3RhbnRzXzEuV0FTSV9GSUxFVFlQRV9ESVJFQ1RPUlksXG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0OiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgcmlnaHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IGNvbnN0YW50c18xLlJJR0hUU19ESVJFQ1RPUllfQkFTRSxcbiAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGluZzogY29uc3RhbnRzXzEuUklHSFRTX0RJUkVDVE9SWV9JTkhFUklUSU5HLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmFrZVBhdGg6IGssXG4gICAgICAgICAgICAgICAgcGF0aDogdixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdldGlvdnMgPSAoaW92cywgaW92c0xlbikgPT4ge1xuICAgICAgICAgICAgLy8gaW92cyogLT4gW2lvdiwgaW92LCAuLi5dXG4gICAgICAgICAgICAvLyBfX3dhc2lfY2lvdmVjX3Qge1xuICAgICAgICAgICAgLy8gICB2b2lkKiBidWYsXG4gICAgICAgICAgICAvLyAgIHNpemVfdCBidWZfbGVuLFxuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXJzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogaW92c0xlbiB9LCAoXywgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHB0ciA9IGlvdnMgKyBpICogODtcbiAgICAgICAgICAgICAgICBjb25zdCBidWYgPSB0aGlzLnZpZXcuZ2V0VWludDMyKHB0ciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZkxlbiA9IHRoaXMudmlldy5nZXRVaW50MzIocHRyICsgNCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG1tYXAgc3R1ZmYgaW4gd2FzaSB0cmllcyB0byBtYWtlIHRoaXMgb3ZlcndyaXRlIGFsbFxuICAgICAgICAgICAgICAgIC8vIGFsbG9jYXRlZCBtZW1vcnksIHNvIHdlIGNhcCBpdCBvciB0aGluZ3MgY3Jhc2guXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogbWF5YmUgd2UgbmVlZCB0byBhbGxvY2F0ZSBtb3JlIG1lbW9yeT8gIEkgZG9uJ3Qga25vdyEhXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZkxlbiA+IHRoaXMubWVtb3J5LmJ1ZmZlci5ieXRlTGVuZ3RoIC0gYnVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZyhcImdldGlvdnM6IHdhcm5pbmcgLS0gdHJ1bmNhdGluZyBidWZmZXIgdG8gZml0IGluIG1lbW9yeVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnVmTGVuID0gTWF0aC5taW4oYnVmTGVuLCB0aGlzLm1lbW9yeS5idWZmZXIuYnl0ZUxlbmd0aCAtIGJ1Zik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHRoaXMubWVtb3J5LmJ1ZmZlciwgYnVmLCBidWZMZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgdHlwZWRhcnJheV90b19idWZmZXJfMS5kZWZhdWx0KShidWZmZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVycztcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgQ0hFQ0tfRkQgPSAoZmQsIHJpZ2h0cykgPT4ge1xuICAgICAgICAgICAgLy8gbG9nKFwiQ0hFQ0tfRkRcIiwgeyBmZCwgcmlnaHRzIH0pO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBzdGF0KHRoaXMsIGZkKTtcbiAgICAgICAgICAgIC8vIGxvZyhcIkNIRUNLX0ZEXCIsIHsgc3RhdHMgfSk7XG4gICAgICAgICAgICBpZiAocmlnaHRzICE9PSBCaWdJbnQoMCkgJiYgKHN0YXRzLnJpZ2h0cy5iYXNlICYgcmlnaHRzKSA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuV0FTSUVycm9yKGNvbnN0YW50c18xLldBU0lfRVBFUk0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRzO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBDUFVUSU1FX1NUQVJUID0gdGhpcy5iaW5kaW5ncy5ocnRpbWUoKTtcbiAgICAgICAgY29uc3Qgbm93ID0gKGNsb2NrSWQpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoY2xvY2tJZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuV0FTSV9DTE9DS19NT05PVE9OSUM6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJpbmRpbmdzLmhydGltZSgpO1xuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuV0FTSV9DTE9DS19SRUFMVElNRTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1zVG9OcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfQ0xPQ0tfUFJPQ0VTU19DUFVUSU1FX0lEOlxuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuV0FTSV9DTE9DS19USFJFQURfQ1BVVElNRV9JRDogLy8gVE9ETyAtLSB0aGlzIGFzc3VtZXMgMSB0aHJlYWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ3MuaHJ0aW1lKCkgLSBDUFVUSU1FX1NUQVJUO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndhc2lJbXBvcnQgPSB7XG4gICAgICAgICAgICBhcmdzX2dldDogKGFyZ3YsIGFyZ3ZCdWYpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBsZXQgY29mZnNldCA9IGFyZ3Y7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNldCA9IGFyZ3ZCdWY7XG4gICAgICAgICAgICAgICAgYXJncy5mb3JFYWNoKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoY29mZnNldCwgb2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gQnVmZmVyLmZyb20odGhpcy5tZW1vcnkuYnVmZmVyKS53cml0ZShgJHthfVxcMGAsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnc19zaXplc19nZXQ6IChhcmdjLCBhcmd2QnVmU2l6ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoYXJnYywgYXJncy5sZW5ndGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhKSA9PiBhY2MgKyBCdWZmZXIuYnl0ZUxlbmd0aChhKSArIDEsIDApO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoYXJndkJ1ZlNpemUsIHNpemUsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudmlyb25fZ2V0OiAoZW52aXJvbiwgZW52aXJvbkJ1ZikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGxldCBjb2Zmc2V0ID0gZW52aXJvbjtcbiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gZW52aXJvbkJ1ZjtcbiAgICAgICAgICAgICAgICBPYmplY3QuZW50cmllcyh0aGlzLmVudikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoY29mZnNldCwgb2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gQnVmZmVyLmZyb20odGhpcy5tZW1vcnkuYnVmZmVyKS53cml0ZShgJHtrZXl9PSR7dmFsdWV9XFwwYCwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnZpcm9uX3NpemVzX2dldDogKGVudmlyb25Db3VudCwgZW52aXJvbkJ1ZlNpemUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnZQcm9jZXNzZWQgPSBPYmplY3QuZW50cmllcyh0aGlzLmVudikubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke2tleX09JHt2YWx1ZX1cXDBgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplID0gZW52UHJvY2Vzc2VkLnJlZHVjZSgoYWNjLCBlKSA9PiBhY2MgKyBCdWZmZXIuYnl0ZUxlbmd0aChlKSwgMCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihlbnZpcm9uQ291bnQsIGVudlByb2Nlc3NlZC5sZW5ndGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoZW52aXJvbkJ1ZlNpemUsIHNpemUsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb2NrX3Jlc19nZXQ6IChjbG9ja0lkLCByZXNvbHV0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcztcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNsb2NrSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5XQVNJX0NMT0NLX01PTk9UT05JQzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5XQVNJX0NMT0NLX1BST0NFU1NfQ1BVVElNRV9JRDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25zdGFudHNfMS5XQVNJX0NMT0NLX1RIUkVBRF9DUFVUSU1FX0lEOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBCaWdJbnQoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfQ0xPQ0tfUkVBTFRJTUU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IEJpZ0ludCgxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBjbG9ja0lkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KHJlc29sdXRpb24sIHJlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvY2tfdGltZV9nZXQ6IChjbG9ja0lkLCBfcHJlY2lzaW9uLCB0aW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5vdyhjbG9ja0lkKTtcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQodGltZSwgQmlnSW50KG4pLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmZF9hZHZpc2U6IHdyYXAoKGZkLCBfb2Zmc2V0LCBfbGVuLCBfYWR2aWNlKSA9PiB7XG4gICAgICAgICAgICAgICAgQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfQURWSVNFKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FTk9TWVM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX2FsbG9jYXRlOiB3cmFwKChmZCwgX29mZnNldCwgX2xlbikgPT4ge1xuICAgICAgICAgICAgICAgIENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0FMTE9DQVRFKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FTk9TWVM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX2Nsb3NlOiB3cmFwKChmZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIEJpZ0ludCgwKSk7XG4gICAgICAgICAgICAgICAgZnMuY2xvc2VTeW5jKHN0YXRzLnJlYWwpO1xuICAgICAgICAgICAgICAgIHRoaXMuRkRfTUFQLmRlbGV0ZShmZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX2RhdGFzeW5jOiB3cmFwKChmZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfREFUQVNZTkMpO1xuICAgICAgICAgICAgICAgIGZzLmZkYXRhc3luY1N5bmMoc3RhdHMucmVhbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX2Zkc3RhdF9nZXQ6IHdyYXAoKGZkLCBidWZQdHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBCaWdJbnQoMCkpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmRfZmRzdGF0X2dldFwiLCBmZCwgc3RhdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0cy5maWxldHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwic3RhdHMuZmlsZXR5cGUgbXVzdCBiZSBzZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChidWZQdHIsIHN0YXRzLmZpbGV0eXBlKTsgLy8gRklMRVRZUEUgdThcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDE2KGJ1ZlB0ciArIDIsIDAsIHRydWUpOyAvLyBGREZMQUcgdTE2XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQxNihidWZQdHIgKyA0LCAwLCB0cnVlKTsgLy8gRkRGTEFHIHUxNlxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyICsgOCwgQmlnSW50KHN0YXRzLnJpZ2h0cy5iYXNlKSwgdHJ1ZSk7IC8vIHU2NFxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyICsgOCArIDgsIEJpZ0ludChzdGF0cy5yaWdodHMuaW5oZXJpdGluZyksIHRydWUpOyAvLyB1NjRcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfZmRzdGF0X3NldF9mbGFnczogd3JhcCgoZmQsIF9mbGFncykgPT4ge1xuICAgICAgICAgICAgICAgIENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0ZEU1RBVF9TRVRfRkxBR1MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VOT1NZUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfZmRzdGF0X3NldF9yaWdodHM6IHdyYXAoKGZkLCBmc1JpZ2h0c0Jhc2UsIGZzUmlnaHRzSW5oZXJpdGluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIEJpZ0ludCgwKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnJiID0gc3RhdHMucmlnaHRzLmJhc2UgfCBmc1JpZ2h0c0Jhc2U7XG4gICAgICAgICAgICAgICAgaWYgKG5yYiA+IHN0YXRzLnJpZ2h0cy5iYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VQRVJNO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBucmkgPSBzdGF0cy5yaWdodHMuaW5oZXJpdGluZyB8IGZzUmlnaHRzSW5oZXJpdGluZztcbiAgICAgICAgICAgICAgICBpZiAobnJpID4gc3RhdHMucmlnaHRzLmluaGVyaXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVBFUk07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXRzLnJpZ2h0cy5iYXNlID0gZnNSaWdodHNCYXNlO1xuICAgICAgICAgICAgICAgIHN0YXRzLnJpZ2h0cy5pbmhlcml0aW5nID0gZnNSaWdodHNJbmhlcml0aW5nO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmZF9maWxlc3RhdF9nZXQ6IHdyYXAoKGZkLCBidWZQdHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0ZJTEVTVEFUX0dFVCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcnN0YXRzID0gZnMuZnN0YXRTeW5jKHN0YXRzLnJlYWwpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLmRldiksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLmlubyksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIGlmIChzdGF0cy5maWxldHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwic3RhdHMuZmlsZXR5cGUgbXVzdCBiZSBzZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChidWZQdHIsIHN0YXRzLmZpbGV0eXBlKTtcbiAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KGJ1ZlB0ciwgQmlnSW50KHJzdGF0cy5ubGluayksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLnNpemUpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KGJ1ZlB0ciwgbXNUb05zKHJzdGF0cy5hdGltZU1zKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnVmUHRyICs9IDg7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEJpZ1VpbnQ2NChidWZQdHIsIG1zVG9Ocyhyc3RhdHMubXRpbWVNcyksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBtc1RvTnMocnN0YXRzLmN0aW1lTXMpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfZmlsZXN0YXRfc2V0X3NpemU6IHdyYXAoKGZkLCBzdFNpemUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0ZJTEVTVEFUX1NFVF9TSVpFKTtcbiAgICAgICAgICAgICAgICBmcy5mdHJ1bmNhdGVTeW5jKHN0YXRzLnJlYWwsIE51bWJlcihzdFNpemUpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfZmlsZXN0YXRfc2V0X3RpbWVzOiB3cmFwKChmZCwgc3RBdGltLCBzdE10aW0sIGZzdGZsYWdzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfVElNRVMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJzdGF0cyA9IGZzLmZzdGF0U3luYyhzdGF0cy5yZWFsKTtcbiAgICAgICAgICAgICAgICBsZXQgYXRpbSA9IHJzdGF0cy5hdGltZTtcbiAgICAgICAgICAgICAgICBsZXQgbXRpbSA9IHJzdGF0cy5tdGltZTtcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbnNUb01zKG5vdyhjb25zdGFudHNfMS5XQVNJX0NMT0NLX1JFQUxUSU1FKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXRpbWZsYWdzID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfQVRJTSB8IGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX0FUSU1fTk9XO1xuICAgICAgICAgICAgICAgIGlmICgoZnN0ZmxhZ3MgJiBhdGltZmxhZ3MpID09PSBhdGltZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRUlOVkFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtdGltZmxhZ3MgPSBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9NVElNIHwgY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTV9OT1c7XG4gICAgICAgICAgICAgICAgaWYgKChmc3RmbGFncyAmIG10aW1mbGFncykgPT09IG10aW1mbGFncykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoZnN0ZmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNKSA9PT0gY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfQVRJTSkge1xuICAgICAgICAgICAgICAgICAgICBhdGltID0gbnNUb01zKHN0QXRpbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmc3RmbGFncyAmIGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX0FUSU1fTk9XKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfQVRJTV9OT1cpIHtcbiAgICAgICAgICAgICAgICAgICAgYXRpbSA9IG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoZnN0ZmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9NVElNKSA9PT0gY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTSkge1xuICAgICAgICAgICAgICAgICAgICBtdGltID0gbnNUb01zKHN0TXRpbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmc3RmbGFncyAmIGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX01USU1fTk9XKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTV9OT1cpIHtcbiAgICAgICAgICAgICAgICAgICAgbXRpbSA9IG47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZzLmZ1dGltZXNTeW5jKHN0YXRzLnJlYWwsIG5ldyBEYXRlKGF0aW0pLCBuZXcgRGF0ZShtdGltKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX3ByZXN0YXRfZ2V0OiB3cmFwKChmZCwgYnVmUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgQmlnSW50KDApKTtcbiAgICAgICAgICAgICAgICAvLyBsb2coXCJmZF9wcmVzdGF0X2dldFwiLCB7IGZkLCBzdGF0cyB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDgoYnVmUHRyLCBjb25zdGFudHNfMS5XQVNJX1BSRU9QRU5UWVBFX0RJUik7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihidWZQdHIgKyA0LCBcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIGRlZmluaXRlbHkgY29tcGxldGVseSB3cm9uZyB1bmxlc3MgcHJlb3BlbnM9Ly5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3aGVuIGJvdGggcGF0aHMgYXJlIGJsYW5rLCB3ZSByZXR1cm4gXCJcIi4gIFRoaXMgaXMgdXNlZCBieVxuICAgICAgICAgICAgICAgIC8vIGNQeXRob24gb24gc29ja2V0cy4gICBJdCB1c2VkIHRvIHJhaXNlIGFuIGVycm9yIGhlcmUuXG4gICAgICAgICAgICAgICAgQnVmZmVyLmJ5dGVMZW5ndGgoc3RhdHMuZmFrZVBhdGggPz8gc3RhdHMucGF0aCA/PyBcIlwiKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX3ByZXN0YXRfZGlyX25hbWU6IHdyYXAoKGZkLCBwYXRoUHRyLCBwYXRoTGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgQmlnSW50KDApKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB3aGVuIGJvdGggcGF0aHMgYXJlIGJsYW5rLCB3ZSByZXR1cm4gXCJcIi4gIFRoaXMgaXMgdXNlZCBieVxuICAgICAgICAgICAgICAgIC8vIGNQeXRob24gb24gc29ja2V0cy4gIEl0IHVzZWQgdG8gcmFpc2UgYW4gZXJyb3IgaGVyZS5cbiAgICAgICAgICAgICAgICBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIpLndyaXRlKHN0YXRzLmZha2VQYXRoID8/IHN0YXRzLnBhdGggPz8gXCJcIiAvKiBUT0RPOiB3cm9uZyBpbiBnZW5lcmFsIT8gKi8sIHBhdGhQdHIsIHBhdGhMZW4sIFwidXRmOFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfcHdyaXRlOiB3cmFwKChmZCwgaW92cywgaW92c0xlbiwgb2Zmc2V0LCBud3JpdHRlbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfV1JJVEUgfCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX1NFRUspO1xuICAgICAgICAgICAgICAgIGxldCB3cml0dGVuID0gMDtcbiAgICAgICAgICAgICAgICBnZXRpb3ZzKGlvdnMsIGlvdnNMZW4pLmZvckVhY2goKGlvdikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh3IDwgaW92LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgKz0gZnMud3JpdGVTeW5jKHN0YXRzLnJlYWwsIGlvdiwgdywgaW92LmJ5dGVMZW5ndGggLSB3LCBOdW1iZXIob2Zmc2V0KSArIHdyaXR0ZW4gKyB3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3cml0dGVuICs9IHc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihud3JpdHRlbiwgd3JpdHRlbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX3dyaXRlOiB3cmFwKChmZCwgaW92cywgaW92c0xlbiwgbndyaXR0ZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX1dSSVRFKTtcbiAgICAgICAgICAgICAgICBjb25zdCBJU19TVERPVVQgPSBzdGF0cy5yZWFsID09IDE7XG4gICAgICAgICAgICAgICAgY29uc3QgSVNfU1RERVJSID0gc3RhdHMucmVhbCA9PSAyO1xuICAgICAgICAgICAgICAgIGxldCB3cml0dGVuID0gMDtcbiAgICAgICAgICAgICAgICBnZXRpb3ZzKGlvdnMsIGlvdnNMZW4pLmZvckVhY2goKGlvdikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiZmRfd3JpdGVcIiwgYFwiJHtuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoaW92KX1cImApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW92LmJ5dGVMZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgbG9nKFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgIGB3cml0aW5nIHRvIGZkPSR7ZmR9OiBgLFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShpb3YpKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShpb3YpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChJU19TVERPVVQgJiYgdGhpcy5zZW5kU3Rkb3V0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN0ZG91dChpb3YpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiArPSBpb3YuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChJU19TVERFUlIgJiYgdGhpcy5zZW5kU3RkZXJyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFN0ZGVycihpb3YpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiArPSBpb3YuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZWZ1bCB0byBiZSBhYnNvbHV0ZWx5IHN1cmUgaWYgd2FzaSBpcyB3cml0aW5nIHNvbWV0aGluZzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvZyhgd3JpdGUgXCIke25ldyBUZXh0RGVjb2RlcigpLmRlY29kZShpb3YpfVwiIHRvICR7ZmR9KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHcgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHcgPCBpb3YuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvZyhgd3JpdGUgJHtpb3YuYnl0ZUxlbmd0aH0gYnl0ZXMgdG8gZmQ9JHtzdGF0cy5yZWFsfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBmcy53cml0ZVN5bmMoc3RhdHMucmVhbCwgaW92LCB3LCBpb3YuYnl0ZUxlbmd0aCAtIHcsIHN0YXRzLm9mZnNldCA/IE51bWJlcihzdGF0cy5vZmZzZXQpIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbG9nKGBqdXN0IHdyb3RlIGk9JHtpfSBieXRlc2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0cy5vZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRzLm9mZnNldCArPSBCaWdJbnQoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyArPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcImZkX3dyaXRlXCIsIGZkLCBcIiAgd3JvdGUgXCIsIHcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiArPSB3O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihud3JpdHRlbiwgd3JpdHRlbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX3ByZWFkOiB3cmFwKChmZCwgaW92cywgaW92c0xlbiwgb2Zmc2V0LCBucmVhZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfUkVBRCB8IGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfU0VFSyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlYWQgPSAwO1xuICAgICAgICAgICAgICAgIG91dGVyOiBmb3IgKGNvbnN0IGlvdiBvZiBnZXRpb3ZzKGlvdnMsIGlvdnNMZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIgPCBpb3YuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gaW92LmJ5dGVMZW5ndGggLSByO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcnIgPSBmcy5yZWFkU3luYyhzdGF0cy5yZWFsLCBpb3YsIHIsIGlvdi5ieXRlTGVuZ3RoIC0gciwgTnVtYmVyKG9mZnNldCkgKyByZWFkICsgcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByICs9IHJyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZCArPSBycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGRvbid0IHJlYWQgYW55dGhpbmcsIG9yIHdlIHJlY2VpdmUgbGVzcyB0aGFuIHJlcXVlc3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJyID09PSAwIHx8IHJyIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVhZCArPSByO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKG5yZWFkLCByZWFkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfcmVhZDogd3JhcCgoZmQsIGlvdnMsIGlvdnNMZW4sIG5yZWFkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9SRUFEKTtcbiAgICAgICAgICAgICAgICBjb25zdCBJU19TVERJTiA9IHN0YXRzLnJlYWwgPT09IDA7XG4gICAgICAgICAgICAgICAgbGV0IHJlYWQgPSAwO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICBsb2dUb0ZpbGUoXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgYGZkX3JlYWQ6ICR7SVNfU1RESU59LCAke0pTT04uc3RyaW5naWZ5KHN0YXRzLCAoXywgdmFsdWUpID0+XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWVcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICApfSwgJHt0aGlzLnN0ZGluQnVmZmVyPy5sZW5ndGh9ICR7dGhpcy5zdGRpbkJ1ZmZlcj8udG9TdHJpbmcoKX1gXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJmZF9yZWFkXCIsIGZkLCBzdGF0cywgSVNfU1RESU4sIHRoaXMuZ2V0U3RkaW4gIT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgb3V0ZXI6IGZvciAoY29uc3QgaW92IG9mIGdldGlvdnMoaW92cywgaW92c0xlbikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAociA8IGlvdi5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gaW92LmJ5dGVMZW5ndGggLSByO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gSVNfU1RESU4gfHwgc3RhdHMub2Zmc2V0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE51bWJlcihzdGF0cy5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChJU19TVERJTikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldFN0ZGluICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RkaW5CdWZmZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGRpbkJ1ZmZlciA9IHRoaXMuZ2V0U3RkaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGRpbkJ1ZmZlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IGdvdCBzdGRpbiBhZnRlciB3YWl0aW5nIGZvciBpdCBpbiBwb2xsX29uZW9mZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogRG8gd2UgbmVlZCB0byBsaW1pdCBsZW5ndGggb3IgaW92IHdpbGwgb3ZlcmZsb3c/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICBPciB3aWxsIHRoZSBiZWxvdyBqdXN0IHdvcmsgZmluZT8gIEl0IG1pZ2h0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2Vjb25kIHJlbWFyayAtLSB3ZSBkbyBub3QgZG8gYW55dGhpbmcgc3BlY2lhbCBoZXJlIHRvIHRyeSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHNlZWluZyBFT0YgKGN0cmwrZCkgaW4gdGhlIHN0cmVhbS4gIE5vIG1hdHRlciB3aGF0IEkgdHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9pbmcgc29tZXRoaW5nIGhlcmUgKGUuZy4sIHJldHVybmluZyAwIGJ5dGVzIHJlYWQpIGRvZXNuJ3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3Blcmx5IHdvcmsgd2l0aCBsaWJlZGl0LiAgIFNvIHdlIGxlYXZlIGl0IGFsb25lIGFuZCBsZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91ciBzbGlnaHRseSBwYXRjaGVkIGxpYmVkaXQgaGFuZGxlIGNvbnRyb2wrZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIHBhcnRpY3VsYXIgbm90ZSB0byBzZWxmIC0tICoqaGFuZGxpbmcgb2YgY29udHJvbCtkIGlzIGRvbmUgaW4gbGliZWRpdCEqKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnIgPSB0aGlzLnN0ZGluQnVmZmVyLmNvcHkoaW92KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyciA9PSB0aGlzLnN0ZGluQnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RkaW5CdWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0ZGluQnVmZmVyID0gdGhpcy5zdGRpbkJ1ZmZlci5zbGljZShycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgcmVhZCBmcm9tIHN0ZGluLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFN0ZGluID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdBUk5JTkc6IG1pZ2h0IGhhdmUgdG8gZG8gc29tZXRoaW5nIHRoYXQgYnVybnMgMTAwJSBjcHUuLi4gOi0oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRob3VnaCB0aGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHNpdHVhdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNsZWVwID09IG51bGwgJiYgIXdhcm5lZEFib3V0U2xlZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5lZEFib3V0U2xlZXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIoY3B1IHdhaXRpbmcgZm9yIHN0ZGluOiBwbGVhc2UgZGVmaW5lIGEgd2F5IHRvIHNsZWVwISkgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2hpbGUgKHJyID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJyID0gZnMucmVhZFN5bmMoc3RhdHMucmVhbCwgLy8gZmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvdiwgLy8gYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLCAvLyBvZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCwgLy8gbGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiAvLyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoX2VycikgeyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyciA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3J0UGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFN0ZGluID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnIgPSBmcy5yZWFkU3luYyhzdGF0cy5yZWFsLCAvLyBmZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvdiwgLy8gYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciwgLy8gb2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoLCAvLyBsZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiAvLyBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBJJ20gbm90IHN1cmUgd2hpY2ggdHlwZSBvZiBmaWxlcyBzaG91bGQgaGF2ZSBhbiBvZmZzZXQgeWV0LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRS5nLiwgb2J2aW91c2x5IGEgcmVndWxhciBmaWxlIHNob3VsZCBhbmQgb2J2aW91c2x5IHN0ZGluIChhIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGV2aWNlKSBhbmQgYSBwaXBlICh3aGljaCBoYXMgdHlwZSBXQVNJX0ZJTEVUWVBFX1NPQ0tFVF9TVFJFQU0pIGRvZXMgbm90LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRzLmZpbGV0eXBlID09IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfUkVHVUxBUl9GSUxFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHMub2Zmc2V0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXRzLm9mZnNldCA/IHN0YXRzLm9mZnNldCA6IEJpZ0ludCgwKSkgKyBCaWdJbnQocnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgciArPSBycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWQgKz0gcnI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCByZWFkIGFueXRoaW5nLCBvciB3ZSByZWNlaXZlIGxlc3MgdGhhbiByZXF1ZXN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyciA9PT0gMCB8fCByciA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZmRfcmVhZDogbnJlYWQ9XCIsIHJlYWQpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIobnJlYWQsIHJlYWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmZF9yZWFkZGlyOiB3cmFwKChmZCwgYnVmUHRyLCBidWZMZW4sIGNvb2tpZSwgYnVmdXNlZFB0cikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfUkVBRERJUik7XG4gICAgICAgICAgICAgICAgLy8gbG9nKFwiZmRfcmVhZGRpciBnb3Qgc3RhdHMgPSBcIiwgc3RhdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBmcy5yZWFkZGlyU3luYyhzdGF0cy5wYXRoLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRQdHIgPSBidWZQdHI7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IE51bWJlcihjb29raWUpOyBpIDwgZW50cmllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoZW50cnkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZQdHIgLSBzdGFydFB0ciA+IGJ1Zkxlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEJpZ1VpbnQ2NChidWZQdHIsIEJpZ0ludChpICsgMSksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZlB0ciAtIHN0YXJ0UHRyID4gYnVmTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBXZSB1c2UgbHN0YXQgaW5zdGVhZCBvZiBzdGF0LCBzaW5jZSBzdGF0IGZhaWxzIG9uIGJyb2tlbiBsaW5rcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWxzbywgc3RhdCByZXNvbHZlcyB0aGUgbGluayBnaXZpbmcgdGhlIHdyb25nIGlub2RlISAgT24gdGhlIG90aGVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmQsIGxzdGF0IHdvcmtzIGZpbmUgb24gbm9uLWxpbmtzLiAgVGhpcyBpcyB3cm9uZyBpbiB1cHN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggYnJlYWtzIHRlc3RpbmcgdGVzdF9jb21waWxlYWxsLnB5ICBpbiB0aGUgcHl0aG9uIHRlc3Qgc3VpdGUsXG4gICAgICAgICAgICAgICAgICAgIC8vIGR1ZSB0byBkb2luZyBvcy5zY2FuZGlyIG9uIGEgZGlyZWN0b3J5IHRoYXQgY29udGFpbnMgYSBicm9rZW4gbGluay5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcnN0YXRzID0gZnMubHN0YXRTeW5jKHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBlbnRyeS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLmlubyksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZlB0ciAtIHN0YXJ0UHRyID4gYnVmTGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKGJ1ZlB0ciwgbmFtZUxlbmd0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmUHRyIC0gc3RhcnRQdHIgPiBidWZMZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxldHlwZTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHJzdGF0cy5pc0Jsb2NrRGV2aWNlKCk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGUgPSBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX0JMT0NLX0RFVklDRTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgcnN0YXRzLmlzQ2hhcmFjdGVyRGV2aWNlKCk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGUgPSBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX0NIQVJBQ1RFUl9ERVZJQ0U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHJzdGF0cy5pc0RpcmVjdG9yeSgpOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFVFlQRV9ESVJFQ1RPUlk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHJzdGF0cy5pc0ZJRk8oKTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZSA9IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgcnN0YXRzLmlzRmlsZSgpOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFVFlQRV9SRUdVTEFSX0ZJTEU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHJzdGF0cy5pc1NvY2tldCgpOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFVFlQRV9TT0NLRVRfU1RSRUFNO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSByc3RhdHMuaXNTeW1ib2xpY0xpbmsoKTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZSA9IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfU1lNQk9MSUNfTElOSztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGUgPSBjb25zdGFudHNfMS5XQVNJX0ZJTEVUWVBFX1VOS05PV047XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KGJ1ZlB0ciwgZmlsZXR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBidWZQdHIgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnVmUHRyICs9IDM7IC8vIHBhZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZlB0ciArIG5hbWVMZW5ndGggPj0gc3RhcnRQdHIgKyBidWZMZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0IGRvZXNuJ3QgZml0IGluIHRoZSBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZW1vcnlfYnVmZmVyID0gQnVmZmVyLmZyb20odGhpcy5tZW1vcnkuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgbWVtb3J5X2J1ZmZlci53cml0ZShlbnRyeS5uYW1lLCBidWZQdHIpO1xuICAgICAgICAgICAgICAgICAgICBidWZQdHIgKz0gbmFtZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmdXNlZCA9IGJ1ZlB0ciAtIHN0YXJ0UHRyO1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MzIoYnVmdXNlZFB0ciwgTWF0aC5taW4oYnVmdXNlZCwgYnVmTGVuKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZkX3JlbnVtYmVyOiB3cmFwKChmcm9tLCB0bykgPT4ge1xuICAgICAgICAgICAgICAgIENIRUNLX0ZEKGZyb20sIEJpZ0ludCgwKSk7XG4gICAgICAgICAgICAgICAgQ0hFQ0tfRkQodG8sIEJpZ0ludCgwKSk7XG4gICAgICAgICAgICAgICAgZnMuY2xvc2VTeW5jKHRoaXMuRkRfTUFQLmdldChmcm9tKS5yZWFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLkZEX01BUC5zZXQoZnJvbSwgdGhpcy5GRF9NQVAuZ2V0KHRvKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5GRF9NQVAuZGVsZXRlKHRvKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmRfc2Vlazogd3JhcCgoZmQsIG9mZnNldCwgd2hlbmNlLCBuZXdPZmZzZXRQdHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX1NFRUspO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAod2hlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuV0FTSV9XSEVOQ0VfQ1VSOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHMub2Zmc2V0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhdHMub2Zmc2V0ID8gc3RhdHMub2Zmc2V0IDogQmlnSW50KDApKSArIEJpZ0ludChvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzXzEuV0FTSV9XSEVOQ0VfRU5EOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzaXplIH0gPSBmcy5mc3RhdFN5bmMoc3RhdHMucmVhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0cy5vZmZzZXQgPSBCaWdJbnQoc2l6ZSkgKyBCaWdJbnQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfV0hFTkNFX1NFVDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRzLm9mZnNldCA9IEJpZ0ludChvZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGF0cy5vZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcInN0YXRzLm9mZnNldCBtdXN0IGJlIGRlZmluZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQobmV3T2Zmc2V0UHRyLCBzdGF0cy5vZmZzZXQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmZF90ZWxsOiB3cmFwKChmZCwgb2Zmc2V0UHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9URUxMKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRzLm9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0cy5vZmZzZXQgPSBCaWdJbnQoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQob2Zmc2V0UHRyLCBzdGF0cy5vZmZzZXQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBmZF9zeW5jOiB3cmFwKChmZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfU1lOQyk7XG4gICAgICAgICAgICAgICAgZnMuZnN5bmNTeW5jKHN0YXRzLnJlYWwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX2NyZWF0ZV9kaXJlY3Rvcnk6IHdyYXAoKGZkLCBwYXRoUHRyLCBwYXRoTGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX0NSRUFURV9ESVJFQ1RPUlkpO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdHMucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIHBhdGhQdHIsIHBhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZnMubWtkaXJTeW5jKHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBhdGhfZmlsZXN0YXRfZ2V0OiB3cmFwKChmZCwgZmxhZ3MsIHBhdGhQdHIsIHBhdGhMZW4sIGJ1ZlB0cikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9HRVQpO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdHMucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIHBhdGhQdHIsIHBhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInBhdGhfZmlsZXN0YXRfZ2V0XCIsIHApO1xuICAgICAgICAgICAgICAgIGxldCByc3RhdHM7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJzdGF0cyA9IGZzLnN0YXRTeW5jKHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBleGFjdGx5IG9uZSBmbGFnIGltcGxlbWVudGVkIGNhbGxlZCBcIl9fV0FTSV9MT09LVVBGTEFHU19TWU1MSU5LX0ZPTExPV1wiO1xuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIDEgYW5kIGlzIHVzZWQgdG8gZm9sbG93IGxpbmtzLCBpLmUuLFxuICAgICAgICAgICAgICAgICAgICAvLyBpbXBsZW1lbnQgbHN0YXQgLS0gdGhpcyBpcyBpZ25vcmVkIGluIHVwc3RyZWFtLlxuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgemlnL2xpYi9saWJjL3dhc2kvbGliYy1ib3R0b20taGFsZi9jbG91ZGxpYmMvc3JjL2xpYmMvc3lzL3N0YXQvZnN0YXRhdC5jXG4gICAgICAgICAgICAgICAgICAgIHJzdGF0cyA9IGZzLmxzdGF0U3luYyhwYXRoLnJlc29sdmUoc3RhdHMucGF0aCwgcCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicGF0aF9maWxlc3RhdF9nZXQgZ290XCIsIHJzdGF0cylcbiAgICAgICAgICAgICAgICAvLyBOT1RFOiB0aGUgb3V0cHV0IGlzIHRoZSBmaWxlc3RhdCBzdHJ1Y3QgYXMgZG9jdW1lbnRlZCBoZXJlXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYkFzc2VtYmx5L1dBU0kvYmxvYi9tYWluL3BoYXNlcy9zbmFwc2hvdC9kb2NzLm1kIy1maWxlc3RhdC1yZWNvcmRcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGRvZXMgTk9UIGV2ZW4gaGF2ZSBhIGZpZWxkIGZvciB0aGF0LiAgVGhpcyBpcyBjb25zaWRlcmVkIGFuIG9wZW4gYnVnIGluIFdBU0k6XG4gICAgICAgICAgICAgICAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vV2ViQXNzZW1ibHkvd2FzaS1maWxlc3lzdGVtL2lzc3Vlcy8zNFxuICAgICAgICAgICAgICAgIC8vIFRoYXQgc2FpZCwgd2FzaSBkb2VzIGVuZCB1cCBzZXR0aW5nIGVub3VnaCBvZiBzdF9tb2RlIHNvIGlzZGlyIHdvcmtzLlxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLmRldiksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBCaWdJbnQocnN0YXRzLmlubyksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50OChidWZQdHIsIHRyYW5zbGF0ZUZpbGVBdHRyaWJ1dGVzKHRoaXMsIHVuZGVmaW5lZCwgcnN0YXRzKS5maWxldHlwZSk7XG4gICAgICAgICAgICAgICAgYnVmUHRyICs9IDg7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEJpZ1VpbnQ2NChidWZQdHIsIEJpZ0ludChyc3RhdHMubmxpbmspLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KGJ1ZlB0ciwgQmlnSW50KHJzdGF0cy5zaXplKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnVmUHRyICs9IDg7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEJpZ1VpbnQ2NChidWZQdHIsIG1zVG9Ocyhyc3RhdHMuYXRpbWVNcyksIHRydWUpO1xuICAgICAgICAgICAgICAgIGJ1ZlB0ciArPSA4O1xuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoYnVmUHRyLCBtc1RvTnMocnN0YXRzLm10aW1lTXMpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBidWZQdHIgKz0gODtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0QmlnVWludDY0KGJ1ZlB0ciwgbXNUb05zKHJzdGF0cy5jdGltZU1zKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBhdGhfZmlsZXN0YXRfc2V0X3RpbWVzOiB3cmFwKChmZCwgX2RpcmZsYWdzLCBwYXRoUHRyLCBwYXRoTGVuLCBzdEF0aW0sIHN0TXRpbSwgZnN0ZmxhZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX1BBVEhfRklMRVNUQVRfU0VUX1RJTUVTKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRzLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRUlOVkFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByc3RhdHMgPSBmcy5mc3RhdFN5bmMoc3RhdHMucmVhbCk7XG4gICAgICAgICAgICAgICAgbGV0IGF0aW0gPSByc3RhdHMuYXRpbWU7XG4gICAgICAgICAgICAgICAgbGV0IG10aW0gPSByc3RhdHMubXRpbWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5zVG9Ncyhub3coY29uc3RhbnRzXzEuV0FTSV9DTE9DS19SRUFMVElNRSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0aW1mbGFncyA9IGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX0FUSU0gfCBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNX05PVztcbiAgICAgICAgICAgICAgICBpZiAoKGZzdGZsYWdzICYgYXRpbWZsYWdzKSA9PT0gYXRpbWZsYWdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgbXRpbWZsYWdzID0gY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTSB8IGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX01USU1fTk9XO1xuICAgICAgICAgICAgICAgIGlmICgoZnN0ZmxhZ3MgJiBtdGltZmxhZ3MpID09PSBtdGltZmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRUlOVkFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKGZzdGZsYWdzICYgY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfQVRJTSkgPT09IGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX0FUSU0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXRpbSA9IG5zVG9NcyhzdEF0aW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoZnN0ZmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9BVElNX05PVykgPT09XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX0FUSU1fTk9XKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0aW0gPSBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKGZzdGZsYWdzICYgY29uc3RhbnRzXzEuV0FTSV9GSUxFU1RBVF9TRVRfTVRJTSkgPT09IGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX01USU0pIHtcbiAgICAgICAgICAgICAgICAgICAgbXRpbSA9IG5zVG9NcyhzdE10aW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoZnN0ZmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZJTEVTVEFUX1NFVF9NVElNX05PVykgPT09XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfRklMRVNUQVRfU0VUX01USU1fTk9XKSB7XG4gICAgICAgICAgICAgICAgICAgIG10aW0gPSBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwID0gQnVmZmVyLmZyb20odGhpcy5tZW1vcnkuYnVmZmVyLCBwYXRoUHRyLCBwYXRoTGVuKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGZzLnV0aW1lc1N5bmMocGF0aC5yZXNvbHZlKHN0YXRzLnBhdGgsIHApLCBuZXcgRGF0ZShhdGltKSwgbmV3IERhdGUobXRpbSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX2xpbms6IHdyYXAoKG9sZEZkLCBfb2xkRmxhZ3MsIG9sZFBhdGgsIG9sZFBhdGhMZW4sIG5ld0ZkLCBuZXdQYXRoLCBuZXdQYXRoTGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3N0YXRzID0gQ0hFQ0tfRkQob2xkRmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfUEFUSF9MSU5LX1NPVVJDRSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnN0YXRzID0gQ0hFQ0tfRkQobmV3RmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfUEFUSF9MSU5LX1RBUkdFVCk7XG4gICAgICAgICAgICAgICAgaWYgKCFvc3RhdHMucGF0aCB8fCAhbnN0YXRzLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRUlOVkFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgb2xkUGF0aCwgb2xkUGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBucCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgbmV3UGF0aCwgbmV3UGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBmcy5saW5rU3luYyhwYXRoLnJlc29sdmUob3N0YXRzLnBhdGgsIG9wKSwgcGF0aC5yZXNvbHZlKG5zdGF0cy5wYXRoLCBucCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX29wZW46IHdyYXAoKGRpcmZkLCBfZGlyZmxhZ3MsIHBhdGhQdHIsIHBhdGhMZW4sIG9mbGFncywgZnNSaWdodHNCYXNlLCBmc1JpZ2h0c0luaGVyaXRpbmcsIGZzRmxhZ3MsIGZkUHRyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChkaXJmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX09QRU4pO1xuICAgICAgICAgICAgICAgIGZzUmlnaHRzQmFzZSA9IEJpZ0ludChmc1JpZ2h0c0Jhc2UpO1xuICAgICAgICAgICAgICAgIGZzUmlnaHRzSW5oZXJpdGluZyA9IEJpZ0ludChmc1JpZ2h0c0luaGVyaXRpbmcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWQgPSAoZnNSaWdodHNCYXNlICYgKGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfUkVBRCB8IGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfUkVBRERJUikpICE9PVxuICAgICAgICAgICAgICAgICAgICBCaWdJbnQoMCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd3JpdGUgPSAoZnNSaWdodHNCYXNlICZcbiAgICAgICAgICAgICAgICAgICAgKGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfREFUQVNZTkMgfFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9XUklURSB8XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdGFudHNfMS5XQVNJX1JJR0hUX0ZEX0FMTE9DQVRFIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfRklMRVNUQVRfU0VUX1NJWkUpKSAhPT1cbiAgICAgICAgICAgICAgICAgICAgQmlnSW50KDApO1xuICAgICAgICAgICAgICAgIGxldCBub2ZsYWdzO1xuICAgICAgICAgICAgICAgIGlmICh3cml0ZSAmJiByZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgPSBmcy5jb25zdGFudHMuT19SRFdSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWFkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgPSBmcy5jb25zdGFudHMuT19SRE9OTFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdyaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgPSBmcy5jb25zdGFudHMuT19XUk9OTFk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGZzUmlnaHRzQmFzZSBpcyBuZWVkZWQgaGVyZSBidXQgcGVyaGFwcyB3ZSBzaG91bGQgZG8gaXQgaW4gbmVlZGVkSW5oZXJpdGluZ1xuICAgICAgICAgICAgICAgIGxldCBuZWVkZWRCYXNlID0gZnNSaWdodHNCYXNlIHwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX09QRU47XG4gICAgICAgICAgICAgICAgbGV0IG5lZWRlZEluaGVyaXRpbmcgPSBmc1JpZ2h0c0Jhc2UgfCBmc1JpZ2h0c0luaGVyaXRpbmc7XG4gICAgICAgICAgICAgICAgaWYgKChvZmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX09fQ1JFQVQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgfD0gZnMuY29uc3RhbnRzLk9fQ1JFQVQ7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRlZEJhc2UgfD0gY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX0NSRUFURV9GSUxFO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKG9mbGFncyAmIGNvbnN0YW50c18xLldBU0lfT19ESVJFQ1RPUlkpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgfD0gZnMuY29uc3RhbnRzLk9fRElSRUNUT1JZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKG9mbGFncyAmIGNvbnN0YW50c18xLldBU0lfT19FWENMKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX0VYQ0w7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgob2ZsYWdzICYgY29uc3RhbnRzXzEuV0FTSV9PX1RSVU5DKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX1RSVU5DO1xuICAgICAgICAgICAgICAgICAgICBuZWVkZWRCYXNlIHw9IGNvbnN0YW50c18xLldBU0lfUklHSFRfUEFUSF9GSUxFU1RBVF9TRVRfU0laRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCBmaWxlIGRlc2NyaXB0b3IgZmxhZ3MuXG4gICAgICAgICAgICAgICAgaWYgKChmc0ZsYWdzICYgY29uc3RhbnRzXzEuV0FTSV9GREZMQUdfQVBQRU5EKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX0FQUEVORDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKChmc0ZsYWdzICYgY29uc3RhbnRzXzEuV0FTSV9GREZMQUdfRFNZTkMpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcy5jb25zdGFudHMuT19EU1lOQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9mbGFncyB8PSBmcy5jb25zdGFudHMuT19EU1lOQztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZmxhZ3MgfD0gZnMuY29uc3RhbnRzLk9fU1lOQztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZWVkZWRJbmhlcml0aW5nIHw9IGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfREFUQVNZTkM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoZnNGbGFncyAmIGNvbnN0YW50c18xLldBU0lfRkRGTEFHX05PTkJMT0NLKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX05PTkJMT0NLO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKGZzRmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZERkxBR19SU1lOQykgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZzLmNvbnN0YW50cy5PX1JTWU5DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX1JTWU5DO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9mbGFncyB8PSBmcy5jb25zdGFudHMuT19TWU5DO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5lZWRlZEluaGVyaXRpbmcgfD0gY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9TWU5DO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKGZzRmxhZ3MgJiBjb25zdGFudHNfMS5XQVNJX0ZERkxBR19TWU5DKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBub2ZsYWdzIHw9IGZzLmNvbnN0YW50cy5PX1NZTkM7XG4gICAgICAgICAgICAgICAgICAgIG5lZWRlZEluaGVyaXRpbmcgfD0gY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9GRF9TWU5DO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod3JpdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgKG5vZmxhZ3MgJiAoZnMuY29uc3RhbnRzLk9fQVBQRU5EIHwgZnMuY29uc3RhbnRzLk9fVFJVTkMpKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBuZWVkZWRJbmhlcml0aW5nIHw9IGNvbnN0YW50c18xLldBU0lfUklHSFRfRkRfU0VFSztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgcGF0aFB0ciwgcGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAocCA9PSBcImRldi90dHlcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IFwidGhlIHRlcm1pbmFsXCIuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdXNlZCwgZS5nLiwgaW4gdGhlIFwibGVzc1wiIHByb2dyYW0gaW4gb3Blbl90dHkgaW4gdHR5aW4uY1xuICAgICAgICAgICAgICAgICAgICAvLyBJdCB3aWxsIHdvcmsgdG8gbWFrZSBhIG5ldyB0dHkgaWYgdXNpbmcgdGhlIG5hdGl2ZSBvcywgYnV0IHdoZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gdXNpbmcgYSB3b3JrZXIgdGhyZWFkIG9yIGluIGJyb3dzZXIsIGl0J3MgbXVjaCBzaW1wbGVyIHRvIGp1c3RcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHN0ZGluLCB3aGljaCB3b3JrcyBmaW5lIChJIHRoaW5rKS5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihmZFB0ciwgY29uc3RhbnRzXzEuV0FTSV9TVERJTl9GSUxFTk8sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9nT3BlbihcInBhdGhfb3BlblwiLCBwKTtcbiAgICAgICAgICAgICAgICBpZiAocC5zdGFydHNXaXRoKFwicHJvYy9cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW1tZWRpYXRlIGVycm9yIC0tIG90aGVyd2lzZSBzdHVmZiB3aWxsIHRyeSB0byByZWFkIGZyb20gdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2gganVzdCBpc24ndCBpbXBsZW1lbnRlZCwgYW5kIHdpbGwgaGFuZyBmb3JldmVyLlxuICAgICAgICAgICAgICAgICAgICAvLyBFLmcuLCBjeXRob24gZG9lcy5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHR5cGVzXzEuV0FTSUVycm9yKGNvbnN0YW50c18xLldBU0lfRUJBREYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmdWxsVW5yZXNvbHZlZCA9IHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKTtcbiAgICAgICAgICAgICAgICAvLyBJIGRvbid0IGtub3cgd2h5IHRoZSBvcmlnaW5hbCBjb2RlIGJsb2NrZWQgLi4sIGJ1dCB0aGF0IGJyZWFrc1xuICAgICAgICAgICAgICAgIC8vIGFwcGxpY2F0aW9ucyAoZS5nLiwgdGFyKSwgYW5kIHRoaXMgc2VlbXMgbGlrZSB0aGUgd3JvbmcgbGF5ZXIgYXQgd2hpY2ggdG9cbiAgICAgICAgICAgICAgICAvLyBiZSBpbXBvc2luZyBzZWN1cml0eT9cbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgaWYgKHBhdGgucmVsYXRpdmUoc3RhdHMucGF0aCwgZnVsbFVucmVzb2x2ZWQpLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBXQVNJX0VOT1RDQVBBQkxFO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGZ1bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbCA9IGZzLnJlYWxwYXRoU3luYyhmdWxsVW5yZXNvbHZlZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGlmIChwYXRoLnJlbGF0aXZlKHN0YXRzLnBhdGgsIGZ1bGwpLnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgIHJldHVybiBXQVNJX0VOT1RDQVBBQkxFO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlPy5jb2RlID09PSBcIkVOT0VOVFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsID0gZnVsbFVucmVzb2x2ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2coXCIqKiBvcGVucGF0aCBGQUlMOiBwID0gXCIsIHAsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBjaGVjayBpZiB0aGUgZmlsZSBpcyBhIGRpcmVjdG9yeSAodW5sZXNzIG9wZW5pbmcgZm9yIHdyaXRlLFxuICAgICAgICAgICAgICAgICAqIGluIHdoaWNoIGNhc2UgdGhlIGZpbGUgbWF5IG5vdCBleGlzdCBhbmQgc2hvdWxkIGJlIGNyZWF0ZWQpICovXG4gICAgICAgICAgICAgICAgbGV0IGlzRGlyZWN0b3J5O1xuICAgICAgICAgICAgICAgIGlmICh3cml0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXJlY3RvcnkgPSBmcy5zdGF0U3luYyhmdWxsKS5pc0RpcmVjdG9yeSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKF9lcnIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJlYWxmZDtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlICYmIGlzRGlyZWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxmZCA9IGZzLm9wZW5TeW5jKGZ1bGwsIGZzLmNvbnN0YW50cy5PX1JET05MWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgZnMub3BlblN5bmMoXCIke2Z1bGx9XCIsICR7bm9mbGFnc30pYCk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxmZCA9IGZzLm9wZW5TeW5jKGZ1bGwsIG5vZmxhZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdmZCA9IHRoaXMuZ2V0VW51c2VkRmlsZURlc2NyaXB0b3IoKTtcbiAgICAgICAgICAgICAgICAvLyBsb2coYCoqIG9wZW5wYXRoIGdvdCBmZDogcD0nJHtwfScsIGZkPSR7bmV3ZmR9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5GRF9NQVAuc2V0KG5ld2ZkLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlYWw6IHJlYWxmZCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0OiBCaWdJbnQoMCksXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogbmVlZGVkQmFzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRpbmc6IG5lZWRlZEluaGVyaXRpbmcsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGZ1bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gY2FsbGluZyBzdGF0ZSBoZXJlIGRvZXMgc29tZSBjb25zaXN0ZW5jeSBjaGVja3NcbiAgICAgICAgICAgICAgICAvLyBhbmQgc2V0IHRoZSBmaWxldHlwZSBlbnRyeSBpbiB0aGUgcmVjb3JkIGNyZWF0ZWQgYWJvdmUuXG4gICAgICAgICAgICAgICAgc3RhdCh0aGlzLCBuZXdmZCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQzMihmZFB0ciwgbmV3ZmQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX3JlYWRsaW5rOiB3cmFwKChmZCwgcGF0aFB0ciwgcGF0aExlbiwgYnVmLCBidWZMZW4sIGJ1ZnVzZWQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX1BBVEhfUkVBRExJTkspO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdHMucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIHBhdGhQdHIsIHBhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVsbCA9IHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKTtcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZnMucmVhZGxpbmtTeW5jKGZ1bGwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZWQgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIpLndyaXRlKHIsIGJ1ZiwgYnVmTGVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKGJ1ZnVzZWQsIHVzZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX3JlbW92ZV9kaXJlY3Rvcnk6IHdyYXAoKGZkLCBwYXRoUHRyLCBwYXRoTGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBDSEVDS19GRChmZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX1JFTU9WRV9ESVJFQ1RPUlkpO1xuICAgICAgICAgICAgICAgIGlmICghc3RhdHMucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaE1lbW9yeSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIHBhdGhQdHIsIHBhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZnMucm1kaXJTeW5jKHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBhdGhfcmVuYW1lOiB3cmFwKChvbGRGZCwgb2xkUGF0aCwgb2xkUGF0aExlbiwgbmV3RmQsIG5ld1BhdGgsIG5ld1BhdGhMZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvc3RhdHMgPSBDSEVDS19GRChvbGRGZCwgY29uc3RhbnRzXzEuV0FTSV9SSUdIVF9QQVRIX1JFTkFNRV9TT1VSQ0UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5zdGF0cyA9IENIRUNLX0ZEKG5ld0ZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX1BBVEhfUkVOQU1FX1RBUkdFVCk7XG4gICAgICAgICAgICAgICAgaWYgKCFvc3RhdHMucGF0aCB8fCAhbnN0YXRzLnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRUlOVkFMO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvcCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgb2xkUGF0aCwgb2xkUGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBucCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgbmV3UGF0aCwgbmV3UGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBmcy5yZW5hbWVTeW5jKHBhdGgucmVzb2x2ZShvc3RhdHMucGF0aCwgb3ApLCBwYXRoLnJlc29sdmUobnN0YXRzLnBhdGgsIG5wKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBhdGhfc3ltbGluazogd3JhcCgob2xkUGF0aCwgb2xkUGF0aExlbiwgZmQsIG5ld1BhdGgsIG5ld1BhdGhMZW4pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0cyA9IENIRUNLX0ZEKGZkLCBjb25zdGFudHNfMS5XQVNJX1JJR0hUX1BBVEhfU1lNTElOSyk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0cy5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3AgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIG9sZFBhdGgsIG9sZFBhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbnAgPSBCdWZmZXIuZnJvbSh0aGlzLm1lbW9yeS5idWZmZXIsIG5ld1BhdGgsIG5ld1BhdGhMZW4pLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZnMuc3ltbGlua1N5bmMob3AsIHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBucCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwYXRoX3VubGlua19maWxlOiB3cmFwKChmZCwgcGF0aFB0ciwgcGF0aExlbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0gQ0hFQ0tfRkQoZmQsIGNvbnN0YW50c18xLldBU0lfUklHSFRfUEFUSF9VTkxJTktfRklMRSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGF0cy5wYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IEJ1ZmZlci5mcm9tKHRoaXMubWVtb3J5LmJ1ZmZlciwgcGF0aFB0ciwgcGF0aExlbikudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBmcy51bmxpbmtTeW5jKHBhdGgucmVzb2x2ZShzdGF0cy5wYXRoLCBwKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHBvbGxfb25lb2ZmOiAoc2luLCBzb3V0LCBuc3Vic2NyaXB0aW9ucywgbmV2ZW50cykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBldmVudGMgPSAwO1xuICAgICAgICAgICAgICAgIC8vIEhhdmUgdG8gd2FpdCB0aGlzIGxvbmcgKHRoaXMgZ2V0cyBjb21wdXRlZCBiZWxvdyBpbiB0aGUgV0FTSV9FVkVOVFRZUEVfQ0xPQ0sgY2FzZSkuXG4gICAgICAgICAgICAgICAgbGV0IHdhaXRUaW1lTnMgPSBCaWdJbnQoMCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnROcyA9IEJpZ0ludCh0aGlzLmJpbmRpbmdzLmhydGltZSgpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hNZW1vcnkoKTtcbiAgICAgICAgICAgICAgICAvLyBsb2dUb0ZpbGUoXCJwb2xsX29uZW9mZlwiLCBzaW4sIHNvdXQsIG5zdWJzY3JpcHRpb25zLCBuZXZlbnRzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5zdWJzY3JpcHRpb25zOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcmRhdGEgPSB0aGlzLnZpZXcuZ2V0QmlnVWludDY0KHNpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHNpbiArPSA4O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gdGhpcy52aWV3LmdldFVpbnQ4KHNpbik7XG4gICAgICAgICAgICAgICAgICAgIHNpbiArPSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBsb2dUb0ZpbGUoYHR5cGU9JHt0eXBlfSwgdXNlcmRhdGE9JHt1c2VyZGF0YX1cXG5gKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfRVZFTlRUWVBFX0NMT0NLOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIHBhY2thZ2VzL3ppZy9kaXN0L2xpYi9saWJjL2luY2x1ZGUvd2FzbS13YXNpLW11c2wvd2FzaS9hcGkuaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFsc28gbm90ZSB0aGF0IHRoaXMgY29kZSB3YXMgd3JvbmcgaW4gdXBzdHJlYW07IHRoZXkganVzdCBzb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgZ3Vlc3NlZCBhdCB0aGluZ3MgaW5jb3JyZWN0bHkgYW5kIGNsZWFybHkgbmV2ZXIgdGVzdGVkIGl0IG9uY2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yIG1lIHRoaXMgYXQgbGVhc3Qgd29ya3MgdG8gaW1wbGVtZW50IHNsZWVwIGluIENweXRob24gd2hlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IGlzIHVzaW5nIHNlbGVjdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW4gKz0gNzsgLy8gcGFkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb2NraWQgPSB0aGlzLnZpZXcuZ2V0VWludDMyKHNpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luICs9IDQ7IC8vIHBhZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLnZpZXcuZ2V0QmlnVWludDY0KHNpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luICs9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zdCBwcmVjaXNpb24gPSB0aGlzLnZpZXcuZ2V0QmlnVWludDY0KHNpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luICs9IDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViY2xvY2tmbGFncyA9IHRoaXMudmlldy5nZXRVaW50MTYoc2luLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW4gKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW4gKz0gNjsgLy8gcGFkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFic29sdXRlID0gc3ViY2xvY2tmbGFncyA9PT0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG5vdyhjbG9ja2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsb2dUb0ZpbGUodCwgY2xvY2tpZCwgdGltZXN0YW1wLCBzdWJjbG9ja2ZsYWdzLCBhYnNvbHV0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gY29uc3RhbnRzXzEuV0FTSV9FSU5WQUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBhYnNvbHV0ZSA/IHRpbWVzdGFtcCA6IHQgKyB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhaXROcyA9IGVuZCAtIHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YWl0TnMgPiB3YWl0VGltZU5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWl0VGltZU5zID0gd2FpdE5zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRCaWdVaW50NjQoc291dCwgdXNlcmRhdGEsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXQgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDE2KHNvdXQsIGUsIHRydWUpOyAvLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXQgKz0gMjsgLy8gcGFkIG9mZnNldCAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KHNvdXQsIGNvbnN0YW50c18xLldBU0lfRVZFTlRUWVBFX0NMT0NLKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3V0ICs9IDE7IC8vIHBhZCBvZmZzZXQgM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXQgKz0gNTsgLy8gcGFkZGluZyB0byA4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRjICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfRVZFTlRUWVBFX0ZEX1JFQUQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50c18xLldBU0lfRVZFTlRUWVBFX0ZEX1dSSVRFOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb29rIGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpYi9saWJjL3dhc2kvbGliYy1ib3R0b20taGFsZi9jbG91ZGxpYmMvc3JjL2xpYmMvc3lzL3NlbGVjdC9wc2VsZWN0LmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzZWUgaG93IHBvbGxfb25lb2ZmIGlzIGFjdHVhbGx5IHVzZWQgYnkgd2FzaS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbiBwYXJ0aWN1bGFyLCBmcm9tIHRoZSBjb2RlOlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhID0gZmQgPSB0aGUgZmlsZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsc28sIGZyb20gdGhlIHNlbGVjdCBtYW4gcGFnZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIklmIG5vbmUgb2YgdGhlIHNlbGVjdGVkIGRlc2NyaXB0b3JzIGFyZSByZWFkeSBmb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkIG9wZXJhdGlvbiwgdGhlIHBzZWxlY3QoKSBvciBzZWxlY3QoKSBmdW5jdGlvbiBzaGFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrIHVudGlsIGF0IGxlYXN0IG9uZSBvZiB0aGUgcmVxdWVzdGVkIG9wZXJhdGlvbnMgYmVjb21lc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWR5LCB1bnRpbCB0aGUgdGltZW91dCBvY2N1cnMsIG9yIHVudGlsIGludGVycnVwdGVkIGJ5IGEgc2lnbmFsLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGh1cyB3aGF0IGlzIHN1cHBvc2VkIHRvIGhhcHBlbiBiZWxvdyBpcyBzdXBwb3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJsb2NrIHVudGlsIHRoZSBmZCBpcyByZWFkeSB0byByZWFkIGZyb20gb3Igd3JpdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bywgZXRjLlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb3Igbm93IGF0IGxlYXN0IGlmIHJlYWRpbmcgZnJvbSBzdGRpbiB0aGVuIHdlIGJsb2NrIGZvciBhIHNob3J0IGFtb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRpbWUgaWYgZ2V0U3RkaW4gZGVmaW5lZDsgb3RoZXJ3aXNlLCB3ZSBhdCBsZWFzdCAqcGF1c2UqIGZvciBhIG1vbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0byBhdm9pZCBjcHUgYnVybikgaWYgdGhpcy5zbGVlcCBpcyBhdmFpbGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaW4gKz0gMzsgLy8gcGFkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc3QgZmQgPSB0aGlzLnZpZXcuZ2V0VWludDMyKHNpbiwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2luICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldEJpZ1VpbnQ2NChzb3V0LCB1c2VyZGF0YSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291dCArPSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXRVaW50MTYoc291dCwgY29uc3RhbnRzXzEuV0FTSV9FTk9TWVMsIHRydWUpOyAvLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXQgKz0gMjsgLy8gcGFkIG9mZnNldCAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LnNldFVpbnQ4KHNvdXQsIHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXQgKz0gMTsgLy8gcGFkIG9mZnNldCAzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291dCArPSA1OyAvLyBwYWRkaW5nIHRvIDhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudGMgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlIGp1c3QgZG8gc29tZXRoaW5nIHJlYWxseSBuYWl2ZSwgd2hpY2ggaXMgXCJwYXVzZSBmb3IgYSBsaXR0bGUgd2hpbGVcIi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBzZWVtcyB0byB3b3JrIGZvciBldmVyeSBhcHBsaWNhdGlvbiBJIGhhdmUgc28gZmFyLCBmcm9tIFB5dGhvbiB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5jdXJzZXMsIGV0Yy4gIFRoaXMgYWxzbyBtYWtlcyBpdCBlYXN5IHRvIGhhdmUgbm9uLWJsb2NraW5nIHNsZWVwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gbm9kZS5qcyBhdCB0aGUgdGVybWluYWwgd2l0aG91dCBhIHdvcmtlciB0aHJlYWQsIHdoaWNoIGlzIHZlcnkgbmljZSFcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVmb3JlIEkgaGFkIGl0IGJsb2NrIGhlcmUgdmlhIGdldFN0ZGluIHdoZW4gYXZhaWxhYmxlLCBidXQgdGhhdCBkb2VzIG5vdCB3b3JrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gZ2VuZXJhbDsgaW4gcGFydGljdWxhciwgaXQgYnJlYWtzIG5jdXJzZXMgY29tcGxldGVseS4gSW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuY3Vyc2VzL3R0eS90dHlfdXBkYXRlLmNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZm9sbG93aW5nIGNhbGwgaXMgYXNzdW1lZCBub3QgdG8gYmxvY2ssIGFuZCBpZiBpdCBkb2VzLCB0aGVuIG5jdXJzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbiBiZWNvbWVzIHRvdGFsbHkgYnJva2VuOlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3QoU1BfUEFSTS0+X2NoZWNrZmQgKyAxLCAmZmRzZXQsIE5VTEwsIE5VTEwsICZrdGltZW91dClcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlcmRhdGEgPT0gQmlnSW50KDApICYmIGNvbnN0YW50c18xLldBU0lfRVZFTlRUWVBFX0ZEX1JFQUQgPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3J0UGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0VWludDMyKG5ldmVudHMsIGV2ZW50YywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgdGhlIHRpbWUgaXQgdG9vayB0byBkbyBldmVyeXRoaW5nIGFib3ZlLCB3aGljaFxuICAgICAgICAgICAgICAgIC8vIGNhbiBiZSBhcmJpdHJhcmlseSBsb25nOlxuICAgICAgICAgICAgICAgIGlmICh3YWl0VGltZU5zID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3YWl0VGltZU5zIC09IEJpZ0ludCh0aGlzLmJpbmRpbmdzLmhydGltZSgpKSAtIHN0YXJ0TnM7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxvZ1RvRmlsZShcIndhaXRUaW1lTnNcIiwgd2FpdFRpbWVOcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YWl0VGltZU5zID49IDEwMDAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNsZWVwID09IG51bGwgJiYgIXdhcm5lZEFib3V0U2xlZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuZWRBYm91dFNsZWVwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIigxMDAlIGNwdSBidXJuaW5nIHdhaXRpbmcgZm9yIHN0ZGluOiBwbGVhc2UgZGVmaW5lIGEgd2F5IHRvIHNsZWVwISkgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2xlZXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBydW5uaW5nIGluIGEgd29ya2VyIHRocmVhZCwgYW5kIGhhdmUgKnNvbWUgd2F5KlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIHN5bmNocm9ub3VzbHkgcGF1c2UgZXhlY3V0aW9uIG9mIHRoaXMgdGhyZWFkLiAgWWVhaCFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtcyA9IG5zVG9Ncyh3YWl0VGltZU5zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNsZWVwKG1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSAqKmhvcnJpYmxlKiogMTAwJSBibG9jayBhbmQgMTAwJSBjcHVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3YWl0LCB3aGljaCBtaWdodCBzb3J0IG9mIHdvcmssIGJ1dCBpcyBvYnZpb3VzbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhIHdyb25nIG5pZ2h0bWFyZS4gIFVuZm9ydHVuYXRlbHksIHRoaXMgaXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBwb3NzaWJsZSB0aGluZyB0byBkbyB3aGVuIG5vdCBydW5uaW5nIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSB3b3JrIHRocmVhZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSBCaWdJbnQodGhpcy5iaW5kaW5ncy5ocnRpbWUoKSkgKyB3YWl0VGltZU5zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChCaWdJbnQodGhpcy5iaW5kaW5ncy5ocnRpbWUoKSkgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnVybiB5b3VyIENQVSFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY19leGl0OiAocnZhbCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZGluZ3MuZXhpdChydmFsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FU1VDQ0VTUztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jX3JhaXNlOiAoc2lnKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoc2lnIGluIGNvbnN0YW50c18xLlNJR05BTF9NQVApKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VJTlZBTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5raWxsKGNvbnN0YW50c18xLlNJR05BTF9NQVBbc2lnXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmFuZG9tX2dldDogKGJ1ZlB0ciwgYnVmTGVuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoTWVtb3J5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5yYW5kb21GaWxsU3luYyhuZXcgVWludDhBcnJheSh0aGlzLm1lbW9yeS5idWZmZXIpLCBidWZQdHIsIGJ1Zkxlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLldBU0lfRVNVQ0NFU1M7XG4gICAgICAgICAgICAgICAgLy8gTk9URTogdXBzdHJlYW0gaGFkIFwicmV0dXJuIFdBU0lfRVNVQ0NFU1M7XCIgaGVyZSwgd2hpY2ggSSB0aG91Z2h0IHdhc1xuICAgICAgICAgICAgICAgIC8vIGEgbWFqb3IgYnVnLCBzaW5jZSBnZXRyYW5kb20gcmV0dXJucyB0aGUgKm51bWJlciBvZiByYW5kb20gYnl0ZXMqLlxuICAgICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIEkgdGhpbmsgaW5zdGVhZCB0aGlzIHdhcyBhIGJ1ZyBpbiBtdXNsIG9yIGxpYmMgb3IgemlnIG9yIHNvbWV0aGluZyxcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBnb3QgZml4ZWQgaW4gdmVyc2lvbiAgMC4xMC4wLWRldi40MTYxK2RhYjViYjkyNCwgc2luY2Ugd2l0aCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gcmVsZWFzZSByZXR1cm5pbmcgYW55dGhpbmcgaW5zdGVhZCBvZiBzdWNjZXNzICg9MCkgaGVyZSBhY3R1YWxseVxuICAgICAgICAgICAgICAgIC8vIChCZWZvcmUgcmV0dXJuaW5nIDAgbWFkZSBpdCBzbyBQeXRob24gaHVuZyBteXN0ZXJpb3VzbHkgb24gc3RhcnR1cCwgd2hpY2ggdG9va3NcbiAgICAgICAgICAgICAgICAvLyBtZSBkYXlzIG9mIHN1ZmZlcmluZyB0byBmaWd1cmUgb3V0LiBJbiBwYXJ0aWN1bGFyLCBQeXRob24gc3RhcnR1cFxuICAgICAgICAgICAgICAgIC8vIGhhbmdzIGF0IHB5X2dldHJhbmRvbSBpbiBib290c3RyYXBfaGFzaC5jLilcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gYnVmTGVuO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjaGVkX3lpZWxkKCkge1xuICAgICAgICAgICAgICAgIC8vIFNpbmdsZSB0aHJlYWRlZCBlbnZpcm9ubWVudFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBuby1vcCBpbiBKU1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VTVUNDRVNTO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvY2tfcmVjdigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuV0FTSV9FTk9TWVM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc29ja19zZW5kKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VOT1NZUztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb2NrX3NodXRkb3duKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHNfMS5XQVNJX0VOT1NZUztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGlmIChsb2cuZW5hYmxlZCkge1xuICAgICAgICAgICAgLy8gV3JhcCBlYWNoIG9mIHRoZSBpbXBvcnRzIHRvIHNob3cgdGhlIGNhbGxzIHZpYSB0aGUgZGVidWcgbG9nZ2VyLlxuICAgICAgICAgICAgLy8gV2UgT05MWSBkbyB0aGlzIGlmIHRoZSBsb2dnZXIgaXMgZW5hYmxlZCwgc2luY2UgaXQgbWlnaHRcbiAgICAgICAgICAgIC8vIGJlIGV4cGVuc2l2ZS5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMud2FzaUltcG9ydCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkltcG9ydCA9IHRoaXMud2FzaUltcG9ydFtrZXldO1xuICAgICAgICAgICAgICAgIHRoaXMud2FzaUltcG9ydFtrZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPSBcImZkX3JlYWRcIiAmJiBrZXkgIT0gXCJwb2xsX29uZW9mZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coa2V5LCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHByZXZJbXBvcnQoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IFwiZmRfcmVhZFwiICYmIGtleSAhPSBcInBvbGxfb25lb2ZmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2coXCJyZXN1bHQgPSBcIiwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcImVycm9yOiBcIiwgZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4geyBlbnY6IHRoaXMuZW52LCBGRF9NQVA6IHRoaXMuRkRfTUFQLCBiaW5kaW5nczogdGhpcy5iaW5kaW5ncyB9O1xuICAgIH1cbiAgICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgICAgICB0aGlzLmVudiA9IHN0YXRlLmVudjtcbiAgICAgICAgdGhpcy5GRF9NQVAgPSBzdGF0ZS5GRF9NQVA7XG4gICAgICAgIHRoaXMuYmluZGluZ3MgPSBzdGF0ZS5iaW5kaW5ncztcbiAgICB9XG4gICAgc2hvcnRQYXVzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2xlZXAgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmIChub3cgLSB0aGlzLmxhc3RTdGRpbiA+IDIwMDApIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgKnNvbWUgd2F5KiB0byBzeW5jaHJvbm91c2x5IHBhdXNlIGV4ZWN1dGlvbiBvZlxuICAgICAgICAgICAgLy8gdGhpcyB0aHJlYWQsIHNvIHdlIHNsZWVwIGEgbGl0dGxlIHRvIGF2b2lkIGJ1cm5pbmdcbiAgICAgICAgICAgIC8vIDEwMCUgY3B1LiAgQnV0IG5vdCByaWdodCBhZnRlciByZWFkaW5nIGlucHV0LCBzaW5jZVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHR5cGluZyBmZWVscyBsYWdneS5cbiAgICAgICAgICAgIC8vIFdlIGNhbiBwcm9iYWJseSBnZXQgcmlkIG9mIHRoaXMgZW50aXJlbHkgd2l0aCBhIHByb3BlclxuICAgICAgICAgICAgLy8gd2dldGNoYXIuLi5cbiAgICAgICAgICAgIHRoaXMuc2xlZXAoNTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBhbiB1bnVzZWQgZmlsZSBkZXNjcmlwdG9yLiAgSXQgKndpbGwqIGJlIHRoZSBzbWFsbGVzdFxuICAgIC8vIGF2YWlsYWJsZSBmaWxlIGRlc2NyaXB0b3IsIGV4Y2VwdCB3ZSBkb24ndCB1c2UgMCwxLDJcbiAgICBnZXRVbnVzZWRGaWxlRGVzY3JpcHRvcigpIHtcbiAgICAgICAgbGV0IGZkID0gMztcbiAgICAgICAgd2hpbGUgKHRoaXMuRkRfTUFQLmhhcyhmZCkpIHtcbiAgICAgICAgICAgIGZkICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZkID4gU0NfT1BFTl9NQVgpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwibm8gYXZhaWxhYmxlIGZpbGUgZGVzY3JpcHRvcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZkO1xuICAgIH1cbiAgICByZWZyZXNoTWVtb3J5KCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICghdGhpcy52aWV3IHx8IHRoaXMudmlldy5idWZmZXIuYnl0ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMubWVtb3J5LmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0TWVtb3J5KG1lbW9yeSkge1xuICAgICAgICB0aGlzLm1lbW9yeSA9IG1lbW9yeTtcbiAgICB9XG4gICAgc3RhcnQoaW5zdGFuY2UsIG1lbW9yeSkge1xuICAgICAgICBjb25zdCBleHBvcnRzID0gaW5zdGFuY2UuZXhwb3J0cztcbiAgICAgICAgaWYgKGV4cG9ydHMgPT09IG51bGwgfHwgdHlwZW9mIGV4cG9ydHMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5zdGFuY2UuZXhwb3J0cyBtdXN0IGJlIGFuIE9iamVjdC4gUmVjZWl2ZWQgJHtleHBvcnRzfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVtb3J5ID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lbW9yeSA9IGV4cG9ydHMubWVtb3J5O1xuICAgICAgICAgICAgaWYgKCEobWVtb3J5IGluc3RhbmNlb2YgV2ViQXNzZW1ibHkuTWVtb3J5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5zdGFuY2UuZXhwb3J0cy5tZW1vcnkgbXVzdCBiZSBhIFdlYkFzc2VtYmx5Lk1lbW9yeS4gUmVjY2VpdmVkICR7bWVtb3J5fS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldE1lbW9yeShtZW1vcnkpO1xuICAgICAgICBpZiAoZXhwb3J0cy5fc3RhcnQpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuX3N0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SW1wb3J0TmFtZXNwYWNlKG1vZHVsZSkge1xuICAgICAgICBsZXQgbmFtZXNwYWNlID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaW1wIG9mIFdlYkFzc2VtYmx5Lk1vZHVsZS5pbXBvcnRzKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgY2hlY2sgZm9yIHRoZSBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmIChpbXAua2luZCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhbGxvdyBmdW5jdGlvbnMgaW4gb3RoZXIgbmFtZXNwYWNlcyBvdGhlciB0aGFuIHdhc2lcbiAgICAgICAgICAgIGlmICghaW1wLm1vZHVsZS5zdGFydHNXaXRoKFwid2FzaV9cIikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgbmFtZXNwYWNlID0gaW1wLm1vZHVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgIT09IGltcC5tb2R1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgbmFtZXNwYWNlcyBkZXRlY3RlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lc3BhY2U7XG4gICAgfVxuICAgIGdldEltcG9ydHMobW9kdWxlKSB7XG4gICAgICAgIGxldCBuYW1lc3BhY2UgPSB0aGlzLmdldEltcG9ydE5hbWVzcGFjZShtb2R1bGUpO1xuICAgICAgICBzd2l0Y2ggKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgY2FzZSBcIndhc2lfdW5zdGFibGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB3YXNpX3Vuc3RhYmxlOiB0aGlzLndhc2lJbXBvcnQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgXCJ3YXNpX3NuYXBzaG90X3ByZXZpZXcxXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgd2FzaV9zbmFwc2hvdF9wcmV2aWV3MTogdGhpcy53YXNpSW1wb3J0LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGRldGVjdCBhIFdBU0kgbmFtZXNwYWNlIGZvciB0aGUgV2ViQXNzZW1ibHkgTW9kdWxlXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRXYXNpRmRJbmZvKCkge1xuICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIE5PVCB1c2VkIHlldC4gSXQgY3VycmVudGx5IGNyYXNoZXMuXG4gICAgICAgIGlmICh0aGlzLmVudltcIldBU0lfRkRfSU5GT1wiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgV0FTSV9GRF9JTkZPIGlzIHNldCB0byB0aGVcbiAgICAgICAgICAgIC8vIEpTT04gdmVyc2lvbiBvZiBhIG1hcCBmcm9tIHdhc2kgZmQncyB0byByZWFsIGZkJ3MsIHRoZW5cbiAgICAgICAgICAgIC8vIHdlIGFsc28gaW5pdGlhbGl6ZSBGRF9NQVAgd2l0aCB0aGF0LCBhc3N1bWluZyB0aGVzZVxuICAgICAgICAgICAgLy8gYXJlIGFsbCBpbmhlcml0YWJsZSBmaWxlIGRlc2NyaXB0b3JzIGZvciBlbmRzIG9mIHBpcGVzLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBzb21ldGhpbmcgYWRkZWQgZm9yXG4gICAgICAgICAgICAvLyBweXRob24td2FzbSBmb3JrL2V4ZWMgc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGZkSW5mbyA9IEpTT04ucGFyc2UodGhpcy5lbnZbXCJXQVNJX0ZEX0lORk9cIl0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCB3YXNpX2ZkIGluIGZkSW5mbykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHdhc2lfZmQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZkID0gcGFyc2VJbnQod2FzaV9mZCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuRkRfTUFQLmhhcyhmZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWwgPSBmZEluZm9bd2FzaV9mZF07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhlIGZkIHJlYWxseSBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kaW5ncy5mcy5mc3RhdFN5bmMocmVhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGlzY2FyZGluZyBcIiwgeyB3YXNpX2ZkLCByZWFsIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVhbCxcbiAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGU6IGNvbnN0YW50c18xLldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNlOiBTVERJTl9ERUZBVUxUX1JJR0hUUyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRpbmc6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuRkRfTUFQLnNldChmZCwgZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIGluaXRXYXNpRmRJbmZvOiBcIiwgdGhpcy5GRF9NQVApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJmZEluZm8gPSBcIiwgZmRJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gV0FTSV9GRF9JTkZPXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gV0FTSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdhc2kuanMubWFwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIHRoZSBzdGFydHVwIGZ1bmN0aW9uXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnggPSAoKSA9PiB7XG5cdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBkZXBlbmRzIG9uIG90aGVyIGxvYWRlZCBjaHVua3MgYW5kIGV4ZWN1dGlvbiBuZWVkIHRvIGJlIGRlbGF5ZWRcblx0dmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8odW5kZWZpbmVkLCBbMjk4XSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMjgzNSkpKVxuXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbn07XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3MgYW5kIHNpYmxpbmcgY2h1bmtzIGZvciB0aGUgZW50cnlwb2ludFxuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgXCIwNmUyZGZmNjU4NWEwZDYwNjNhNFwiICsgXCIuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLy8gXCIxXCIgbWVhbnMgXCJhbHJlYWR5IGxvYWRlZFwiXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ3NTM6IDFcbn07XG5cbi8vIGltcG9ydFNjcmlwdHMgY2h1bmsgbG9hZGluZ1xudmFyIGluc3RhbGxDaHVuayA9IChkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0d2hpbGUoY2h1bmtJZHMubGVuZ3RoKVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkcy5wb3AoKV0gPSAxO1xuXHRwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaSA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHQvLyBcIjFcIiBpcyB0aGUgc2lnbmFsIGZvciBcImFscmVhZHkgbG9hZGVkXCJcblx0aWYoIWluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRpbXBvcnRTY3JpcHRzKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKSk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua19jb3dhc21fd2Vic2l0ZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfY293YXNtX3dlYnNpdGVcIl0gfHwgW107XG52YXIgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24gPSBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IGluc3RhbGxDaHVuaztcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdCIsIi8vIHJ1biBzdGFydHVwXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18ueCgpO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibmV4dCIsIl9faW1wb3J0RGVmYXVsdCIsInRoaXMiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1dGlsXzEiLCJkZWJ1Z18xIiwibWV0YWRhdGFfMSIsImxvZyIsImRlZmF1bHQiLCJTVEFDS19TSVpFIiwiY29uc3RydWN0b3IiLCJnZXRGdW5jdGlvbiIsIm1lbW9yeSIsImdsb2JhbE9mZnNldFRhYmxlIiwiZnVuY3Rpb25UYWJsZSIsInJlYWRGaWxlU3luYyIsImltcG9ydE9iamVjdCIsImltcG9ydFdlYkFzc2VtYmx5U3luYyIsImdldE1haW5JbnN0YW5jZUV4cG9ydHMiLCJkbGVycm9yUHRyIiwicGF0aFRvTGlicmFyeSIsImhhbmRsZVRvTGlicmFyeSIsIm1haW5HZXRGdW5jdGlvbiIsImFkZF9kbG1ldGhvZHMiLCJlbnYiLCJkbG1ldGhvZCIsImJpbmQiLCJnZXRTdGF0ZSIsInN0YXRlIiwiU2V0IiwiaGFuZGxlIiwiYWRkIiwic2V0U3RhdGUiLCJoYXMiLCJkbGNsb3NlIiwicGFyc2VJbnQiLCJtYWxsb2MiLCJieXRlcyIsInB1cnBvc2UiLCJfbWFsbG9jIiwiZiIsIkVycm9yIiwicHRyIiwiZXJyIiwiY29uc29sZSIsIndhcm4iLCJmcmVlIiwiX2ZyZWUiLCJkbG9wZW5FbnZIYW5kbGVyIiwicGF0aCIsImtleSIsIlJlZmxlY3QiLCJnZXQiLCJzeW1ib2xWaWFQb2ludGVyIiwibmFtZSIsInN5bSIsImRsb3BlbiIsInBhdGhuYW1lUHRyIiwiX2ZsYWdzIiwicmVjdlN0cmluZyIsImJpbmFyeSIsIlVpbnQ4QXJyYXkiLCJtZXRhZGF0YSIsIm1lbUFsaWduIiwiTWF0aCIsInBvdyIsIm1lbW9yeUFsaWduIiwibWF4IiwibWVtb3J5U2l6ZSIsImFsbG9jIiwic3RhY2tfYWxsb2MiLCJfX21lbW9yeV9iYXNlIiwiYWxpZ25NZW1vcnkiLCJfX3RhYmxlX2Jhc2UiLCJ0YWJsZVNpemUiLCJnZXROZXh0VGFibGVQb3MiLCJfX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlIiwidGFibGUiLCJfX3N0YWNrX3BvaW50ZXIiLCJXZWJBc3NlbWJseSIsIkdsb2JhbCIsIm11dGFibGUiLCJsaWJJbXBvcnRPYmplY3QiLCJQcm94eSIsIm1lbSIsImZ1bmMiLCJwcmVwYXJlRm9ySW1wb3J0IiwidDAiLCJlbmFibGVkIiwiRGF0ZSIsInZhbHVlT2YiLCJpbnN0YW5jZSIsInN5bVRvUHRyIiwiZnVuY01hcCIsInZhbCIsInNldCIsInN5bU5hbWUiLCJpbmRleCIsIm1lbU1hcCIsIngiLCJwdHJCZWZvcmVPZmZzZXQiLCJlcnJvciIsIl9fd2FzbV9jYWxsX2N0b3JzIiwiX193YXNtX2FwcGx5X2RhdGFfcmVsb2NzIiwia2V5cyIsIm1hcCIsIm4iLCJsaWJyYXJ5IiwiZGxzeW0iLCJzeW1ib2xQdHIiLCJsaWIiLCJzZXRfZGxlcnJvciIsImRsYWRkciIsImRlbGV0ZSIsInMiLCJzZW5kU3RyaW5nIiwic2xpY2UiLCJkbGVycm9yIiwiYXZhaWxhYmxlVGFibGVJbmRleGVzIiwibmV4dFRhYmxlUG9zIiwidXBkYXRlQWZ0ZXJJbXBvcnQiLCJub256ZXJvUG9zaXRpb25zIiwibGVuZ3RoIiwiZ3JvdyIsImdldE5leHRBdmFpbGFibGVJbmRleCIsInNldExhdGVyIiwiX2luZGV4IiwiR09UIiwiR09UTWVtSGFuZGxlciIsIkdPVEZ1bmNIYW5kbGVyIiwiXyIsInJ0biIsInN0dWJfMSIsImZ1bmN0aW9uX3RhYmxlXzEiLCJkbG9wZW5fMSIsImdsb2JhbF9vZmZzZXRfdGFibGVfMSIsImxvZ0ltcG9ydCIsImFzeW5jIiwiaW1wb3J0V2ViQXNzZW1ibHkiLCJzdHViIiwiYWxsb3dNYWluRXhwb3J0cyIsIm1haW5JbnN0YW5jZSIsIk1lbW9yeSIsImluaXRpYWwiLCJUYWJsZSIsImVsZW1lbnQiLCJmdW5jdGlvblZpYVBvaW50ZXIiLCJkbG9wZW5NYW5hZ2VyIiwiaW5jbHVkZXMiLCJzdGFydHNXaXRoIiwiaW1wb3J0T2JqZWN0V2l0aFBvc3NpYmxlU3R1YiIsImdldERsb3BlblN0YXRlIiwiZ290Iiwic2V0RGxvcGVuU3RhdGUiLCJNQnRvUGFnZXMiLCJpbXBvcnRfMSIsImVudW1lcmFibGUiLCJvZmZzZXQiLCJlbmQiLCJnZXRMRUIiLCJyZXQiLCJtdWwiLCJieXRlIiwiZ2V0U3RyaW5nIiwibGVuIiwibWF4Qnl0ZXNUb1JlYWQiLCJlbmRJZHgiLCJlbmRQdHIiLCJVVEY4RGVjb2RlciIsImRlY29kZSIsIlVURjhBcnJheVRvU3RyaW5nIiwiZmFpbElmIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIlVpbnQzMkFycmF5Iiwic3ViYXJyYXkiLCJidWZmZXIiLCJzZWN0aW9uX3NpemUiLCJjdXN0b21TZWN0aW9uIiwibmVlZGVkRHlubGlicyIsInRsc0V4cG9ydHMiLCJ3ZWFrSW1wb3J0cyIsInRhYmxlQWxpZ24iLCJuZWVkZWREeW5saWJzQ291bnQiLCJpIiwibGlibmFtZSIsInB1c2giLCJXQVNNX0RZTElOS19NRU1fSU5GTyIsIldBU01fRFlMSU5LX05FRURFRCIsIldBU01fRFlMSU5LX0VYUE9SVF9JTkZPIiwiV0FTTV9EWUxJTktfSU1QT1JUX0lORk8iLCJXQVNNX1NZTUJPTF9UTFMiLCJXQVNNX1NZTUJPTF9CSU5ESU5HX01BU0siLCJXQVNNX1NZTUJPTF9CSU5ESU5HX1dFQUsiLCJzdWJzZWN0aW9uVHlwZSIsInN1YnNlY3Rpb25TaXplIiwiY291bnQiLCJzeW1uYW1lIiwiVGV4dERlY29kZXIiLCJsb2dVc2UiLCJsb2dGaXJzdCIsInR5cGUiLCJ0YXJnZXQiLCJTdHJpbmciLCJhcmdzIiwiZnVuY3Rpb25OYW1lIiwic3R1YlVzZWQiLCJsb2dTdHViVXNlIiwic3RybGVuIiwidiIsInRleHREZWNvZGVyIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiY2hhclB0ciIsInN0ciIsInN0ckFzQXJyYXkiLCJlbmNvZGUiLCJhcnJheSIsIkludDhBcnJheSIsInNpemUiLCJhbGlnbm1lbnQiLCJjZWlsIiwiTUIiLCJpbml0Q29uc3RhbnRzIiwiY29uc3RhbnRzIiwiY29udGV4dCIsIm5hbWVzIiwidmFsdWVzIiwiY2FsbEZ1bmN0aW9uIiwicmVjdiIsIkpTT04iLCJwYXJzZSIsInN0cmluZyIsInJlY3ZKc29uT2JqZWN0Iiwic2xlZXAiLCJlcG9sbF9jcmVhdGUiLCJfc2l6ZSIsImVwb2xsX2NyZWF0ZTEiLCJlcG9sbF9jdGwiLCJfZXBmZCIsIl9vcCIsIl9mZCIsIl9lcG9sbF9ldmVudF9wdHIiLCJlcG9sbF93YWl0IiwiX21heGV2ZW50cyIsInRpbWVvdXQiLCJuYXRpdmVUb1dhc20iLCJjb25zdGFudHNfMSIsImVycm5vIiwid2FzaUVycm5vIiwicG9zaXgiLCJlTmF0aXZlIiwiZVdhc20iLCJlcnJub18xIiwicGF0aF8xIiwiV0FTTSIsIkJ1ZmZlciIsImZyb20iLCJ3YXNpIiwicnVuIiwiZnMiLCJjaGlsZF9wcm9jZXNzIiwicmVhbF9mZCIsInZpcnR1YWxfZmQiLCJkYXRhIiwiRkRfTUFQIiwicmVhbCIsImdldEluaGVyaXRhYmxlRGVzY3JpcHRvcnNNYXAiLCJ3YXNpX2ZkIiwiaXNfaW5oZXJpdGFibGUiLCJweXRob25fd2FzbV9zZXRfaW5oZXJpdGFibGUiLCJmZCIsImluaGVyaXRhYmxlIiwic2V0X2luaGVyaXRhYmxlIiwicHl0aG9uX3dhc21fZm9ya19leGVjIiwiZXhlY19hcnJheV9wdHIiLCJhcmd2X3B0ciIsImVudnBfcHRyIiwiY3dkIiwicDJjcmVhZCIsInAyY3dyaXRlIiwiYzJwcmVhZCIsImMycHdyaXRlIiwiZXJycmVhZCIsImVycndyaXRlIiwiZXJycGlwZV9yZWFkIiwiZXJycGlwZV93cml0ZSIsImNsb3NlX2ZkcyIsInJlc3RvcmVfc2lnbmFscyIsImNhbGxfc2V0c2lkIiwicGdpZF90b19zZXQiLCJjYWxsX3NldGdpZCIsImdpZCIsImNhbGxfc2V0Z3JvdXBzIiwiZ3JvdXBzX3NpemUiLCJncm91cHMiLCJjYWxsX3NldHVpZCIsInVpZCIsImNoaWxkX3VtYXNrIiwiY2hpbGRfc2lnbWFzayIsInB5X2Zkc190b19rZWVwIiwiZXJyX21hcCIsIm4ydyIsIm5hdGl2ZV9lcnJubyIsIkVOT0VOVCIsIldBU0lfRkRfSU5GTyIsInN0cmluZ2lmeSIsImVudnAiLCJhcnJheU9mU3RyaW5ncyIsIm9wdHMiLCJleGVjX2FycmF5IiwiYXJndiIsImZkc190b19rZWVwIiwiYXJyYXlPZkkzMiIsInBpZCIsImZvcmtfZXhlYyIsImNvd2FzbV92Zm9ya2V4ZWMiLCJhcmd2UHRyIiwicGF0aFB0ciIsImRpciIsInNwbGl0IiwicGF0aFRvQ21kIiwiam9pbiIsInJlc29sdmUiLCJzdGF0U3luYyIsIm1vZGUiLCJTX0lYVVNSIiwiX2VyciIsImV4aXN0c1N5bmMiLCJ3YXNtIiwiZmlsZW5hbWUiLCJvcGVuU3luYyIsImIiLCJyZWFkU3luYyIsImVxdWFscyIsImlzV2FzbSIsImV4ZWNGaWxlU3luYyIsInN0ZGlvIiwic3RhdHVzIiwicnVuTmF0aXZlIiwidHJhY2UiLCJmb3JrX2V4ZWNfMSIsImVwb2xsXzEiLCJuZXRkYl8xIiwibmV0aWZfMSIsIm90aGVyXzEiLCJzY2hlZF8xIiwic2lnbmFsXzEiLCJzb2NrZXRfMSIsInNwYXduXzEiLCJzdGRsaWJfMSIsInN0ZGlvXzEiLCJzdGF0XzEiLCJ0ZXJtaW9zXzEiLCJ0aW1lXzEiLCJ1bmlzdGRfMSIsIndhaXRfMSIsImNvbnN0YW50c18yIiwibG9nTm90SW1wbGVtZW50ZWQiLCJsb2dDYWxsIiwibG9nUmV0dXJuIiwicHJvY2VzcyIsIl9fU1RVUElEX0hBQ0tfXyIsIlAiLCJRIiwic3luY2RpciIsIm5hdGl2ZUVycm5vVG9TeW1ib2wiLCJzeW1ib2wiLCJzZXRFcnJub0Zyb21OYXRpdmUiLCJuYXRpdmVFcnJubyIsImNoZGlyIiwiZ2V0Y3dkIiwiY29kZSIsIkVOT1NZUyIsImluaXQiLCJ3YXNtVG9OYXRpdmVTb2NrdHlwZSIsIndhc21Ub05hdGl2ZUZhbWlseSIsImZhbWlseSIsIkFGX0lORVQiLCJBRl9JTkVUNiIsIm5hdGl2ZVRvV2FzbUZhbWlseSIsInNvY2t0eXBlIiwibmF0aXZlU29ja3R5cGUiLCJuYXRpdmVUb1dhc21Tb2NrdHlwZSIsIndhc21Tb2NrdHlwZSIsInNlbmQiLCJuZXRkYiIsIm5vdEltcGxlbWVudGVkIiwic2VuZFNvY2thZGRyIiwic2FfZmFtaWx5IiwiYWlfYWRkcmxlbiIsInNhX2RhdGEiLCJ2aWV3IiwiRGF0YVZpZXciLCJzZXRVaW50MTYiLCJzZXRVaW50OCIsInNlbmRQdHIiLCJhZGRyZXNzIiwic2V0VWludDMyIiwic2VuZEFycmF5T2ZTdHJpbmdzIiwic2VuZEhvc3RlbnQiLCJob3N0ZW50IiwiaF9hZGRydHlwZSIsImhfbmFtZSIsImhfYWxpYXNlcyIsImhfbGVuZ3RoIiwiaF9hZGRyX2xpc3QiLCJnZXRob3N0YnluYW1lIiwibmFtZVB0ciIsImdldGhvc3RieWFkZHIiLCJhZGRyUHRyIiwiX2xlbiIsImFkZHJTdHJpbmdQdHIiLCJhZGRyU3RyaW5nIiwiZ2V0YWRkcmluZm8iLCJub2RlUHRyIiwic2VydmljZVB0ciIsImhpbnRzUHRyIiwicmVzUHRyIiwibm9kZSIsInNlcnZpY2UiLCJoaW50cyIsImZsYWdzIiwiZ2V0VWludDMyIiwicHJvdG9jb2wiLCJyZWN2SGludHMiLCJhZGRyaW5mb0FycmF5IiwiYWlfbmV4dCIsImFkZHJpbmZvIiwiaW5mbyIsImFpX3NvY2t0eXBlIiwiYWlfZmFtaWx5IiwiYWlfYWRkciIsImFpX2ZsYWdzIiwiYWlfcHJvdG9jb2wiLCJhaV9jYW5vbm5hbWUiLCJnYWlfc3RyZXJyb3JfY2FjaGUiLCJnYWlfc3RyZXJyb3IiLCJlcnJjb2RlIiwic3RyUHRyIiwiaHN0cmVycm9yX2NhY2hlIiwiaHN0cmVycm9yIiwiaF9lcnJub19wdHIiLCJfX2hfZXJybm9fbG9jYXRpb24iLCJpMzIiLCJpZl9pbmRleHRvbmFtZSIsImlmaW5kZXgiLCJpZm5hbWVQdHIiLCJpZm5hbWUiLCJJRk5BTVNJWiIsImlmX25hbWV0b2luZGV4IiwiaWZfbmFtZWluZGV4IiwibmkiLCJpZl9mcmVlbmFtZWluZGV4Iiwic2VuZFN0YXR2ZnMiLCJidWZQdHIiLCJmX2JzaXplIiwiZl9mcnNpemUiLCJCaWdJbnQiLCJmX2Jsb2NrcyIsImZfYmZyZWUiLCJmX2JhdmFpbCIsImZfZmlsZXMiLCJmX2ZmcmVlIiwiZl9mYXZhaWwiLCJmX2ZzaWQiLCJmX2ZsYWciLCJmX25hbWVtYXgiLCJ1c2VyX2Zyb21fdWlkX2NhY2hlIiwic3lzbG9nIiwibG9naW5fdHR5Iiwic3RhdHZmcyIsImZzdGF0dmZzIiwiY3Rlcm1pZCIsImN0ZXJtaWRQdHIiLCJnZXRwd25hbV9yIiwiX25hbWVQdHIiLCJfcGFzc3dkUHRyIiwiX2J1ZmZlclB0ciIsIl9idWZzaXplIiwicmVzdWx0X3B0cl9wdHIiLCJwb2ludGVyIiwiZ2V0cHd1aWQiLCJnZXRwd3VpZF9yIiwiX3VpZCIsIm9wZW5wdHkiLCJtc3luYyIsIm1hZHZpc2UiLCJtcmVtYXAiLCJ0bXBmaWxlIiwidGNmbHVzaCIsImdldHB3bmFtIiwiZ2V0cmxpbWl0Iiwic2V0cmxpbWl0IiwidXNlcl9mcm9tX3VpZCIsIm5vdXNlciIsImdyb3VwX2Zyb21fZ2lkIiwibm9ncm91cCIsImdldHJ1c2FnZSIsIl93aG8iLCJfcl91c2FnZV9wdHIiLCJzY2hlZCIsInNldFNpZ25hbFNldCIsImdldFNpZ25hbFNldCIsInNpZ25hbF90Iiwic2V0UHRyIiwic2lnbmFsTWFzayIsInNpZ25hbCIsImtpbGwiLCJyYWlzZSIsInNpZyIsImtpbGxwZyIsInNpZ2VtcHR5c2V0IiwiY2xlYXIiLCJzaWdmaWxsc2V0Iiwic2lnYWRkc2V0Iiwic2lnbnVtIiwic2lnZGVsc2V0Iiwic2lnaXNtZW1iZXIiLCJzaWdwcm9jbWFzayIsImhvdyIsIm9sZHNldFB0ciIsIlNJR19CTE9DSyIsIlNJR19VTkJMT0NLIiwiU0lHX1NFVE1BU0siLCJzZXRTaWduYWxTZXRUb01hc2siLCJzaWdzdXNwZW5kIiwicHRocmVhZF9zaWdtYXNrIiwic29ja2V0Iiwic29ja2FkZHJQdHIiLCJhZGRyZXNzX2xlbiIsInRvU3RyaW5nIiwiZ2V0c29ja25hbWUiLCJhZGRyZXNzTGVuUHRyIiwiY29ubmVjdCIsImdldEZpbGVBY3Rpb25zIiwiZmlsZUFjdGlvbnMiLCJzcGF3bl9maWxlQWN0aW9ucyIsImdldEF0dHJzIiwic3Bhd25fYXR0cnMiLCJnZXRBdHRyIiwiZXhwYW5kIiwiYXR0cnMiLCJhdHRyIiwic2lnZGVmYXVsdFB0ciIsInNpZ2RlZmF1bHQiLCJzaWdtYXNrUHRyIiwic2lnbWFzayIsInBvc2l4X3NwYXduYXR0cl9zZXRzY2hlZHBhcmFtIiwiYXR0clB0ciIsInNjaGVkcGFyYW1QdHIiLCJzY2hlZHBhcmFtIiwic2NoZWRfcHJpb3JpdHkiLCJwb3NpeF9zcGF3bmF0dHJfZ2V0c2NoZWRwYXJhbSIsInBvc2l4X3NwYXduYXR0cl9zZXRzY2hlZHBvbGljeSIsInNjaGVkcG9saWN5IiwicG9zaXhfc3Bhd25hdHRyX2dldHNjaGVkcG9saWN5Iiwic2NoZWRwb2xpY3lQdHIiLCJwb3NpeF9zcGF3bmF0dHJfaW5pdCIsInBvc2l4X3NwYXduYXR0cl9kZXN0cm95IiwicG9zaXhfc3Bhd25hdHRyX3NldGZsYWdzIiwicG9zaXhfc3Bhd25hdHRyX2dldGZsYWdzIiwiZmxhZ3NQdHIiLCJwb3NpeF9zcGF3bmF0dHJfc2V0cGdyb3VwIiwicGdyb3VwIiwicG9zaXhfc3Bhd25hdHRyX2dldHBncm91cCIsInBncm91cFB0ciIsInBvc2l4X3NwYXduYXR0cl9zZXRzaWdtYXNrIiwicG9zaXhfc3Bhd25hdHRyX2dldHNpZ21hc2siLCJjdXIiLCJwb3NpeF9zcGF3bmF0dHJfc2V0c2lnZGVmYXVsdCIsInBvc2l4X3NwYXduYXR0cl9nZXRzaWdkZWZhdWx0IiwicG9zaXhfc3Bhd24iLCJwaWRQdHIiLCJmaWxlQWN0aW9uc1B0ciIsImVudnBQdHIiLCJwb3NpeF9zcGF3bnAiLCJwb3NpeF9zcGF3bl9maWxlX2FjdGlvbnNfaW5pdCIsInBvc2l4X3NwYXduX2ZpbGVfYWN0aW9uc19kZXN0cm95IiwicG9zaXhfc3Bhd25fZmlsZV9hY3Rpb25zX2FkZGNsb3NlIiwicG9zaXhfc3Bhd25fZmlsZV9hY3Rpb25zX2FkZG9wZW4iLCJvZmxhZyIsInBvc2l4X3NwYXduX2ZpbGVfYWN0aW9uc19hZGRkdXAyIiwibmV3X2ZkIiwiY2htb2QiLCJfZmNobW9kIiwiZmNobW9kYXQiLCJkaXJmZCIsImxjaG1vZCIsInVtYXNrIiwibWFzayIsIm1rZmlmbyIsIm1rbm9kIiwidG1wbmFtIiwic1B0ciIsImoiLCJmcm9tQ2hhckNvZGUiLCJmbG9vciIsInJhbmRvbSIsInRtcG5hbV9idWYiLCJwb3BlbiIsIl9jb21tYW5kUHRyIiwiX3R5cGVQdHIiLCJwY2xvc2UiLCJfc3RyZWFtUHRyIiwib3MiLCJzZXRqbXAiLCJsb25nam1wIiwic2lnbG9uZ2ptcCIsInNpZ3NldGptcCIsImdldGxvYWRhdmciLCJsb2FkYXZnRG91YmxlQXJyYXlQdHIiLCJuZWxlbSIsImxvYWRhdmciLCJhdmciLCJmNjQiLCJzeXN0ZW0iLCJjb21tYW5kUHRyIiwic3Bhd25TeW5jIiwiY29tbWFuZCIsInN0ZG91dCIsInN0ZGVyciIsInNoZWxsIiwicmVhbHBhdGgiLCJyZXNvbHZlZFBhdGhQdHIiLCJyZXNvbHZlZFBhdGgiLCJyZWFscGF0aFN5bmMiLCJGTEFHUyIsImNfaWZsYWciLCJjX29mbGFnIiwiY19jZmxhZyIsImNfbGZsYWciLCJuYXRpdmVfdG9fd2FzaSIsInRpb19uYXRpdmUiLCJ0aW9fd2FzaSIsInNvcnQiLCJ0Y2dldGF0dHIiLCJ0aW9QdHIiLCJ1MzIiLCJ0ZXJtaW9zX3NldCIsInRjc2V0YXR0ciIsIl9vcHRpb25hbF9hY3Rpb25zIiwidGVybWlvc19nZXQiLCJ0aW9fbmF0aXZlX29yaWciLCJ0aW9fd2FzaV9jdXJyZW50Iiwic29tZXRoaW5nQ2hhbmdlZCIsIlRDU0FOT1ciLCJ0Y2RyYWluIiwidGNmbG93IiwidGNzZW5kYnJlYWsiLCJkYXRlRm9ybWF0IiwiYWRqdGltZSIsInNldHRpbWVvZmRheSIsImNsb2NrX3NldHRpbWUiLCJfY2xrX2lkIiwidGltZXNwZWMiLCJ0dl9zZWMiLCJjbWQiLCJjbWQyIiwiYXJnczIiLCJwbGF0Zm9ybSIsImRhdGVUaW1lIiwid2FzaV9qc18xIiwiY2FsbFdpdGhTdHJpbmciLCJ0b05hdGl2ZUZkIiwiU1RESU4iLCJTVERPVVQiLCJ1bmlzdGQiLCJjaG93biIsImNob3duU3luYyIsImxjaG93biIsImxjaG93blN5bmMiLCJfZmNob3duIiwiZmNob3duU3luYyIsImdldHVpZCIsImdldGdpZCIsIl9nZXRldWlkIiwiZ2V0ZXVpZCIsImdldGVnaWQiLCJnZXRncm91cHMiLCJnaWRzZXRzaXplIiwiZ3JvdXBsaXN0UHRyIiwibWluIiwiZ2V0cGlkIiwiZ2V0cGdpZCIsInNldHBnaWQiLCJwZ2lkIiwiZ2V0cGdycCIsIm5pY2UiLCJpbmNyIiwicCIsImdldFByaW9yaXR5Iiwic2V0UHJpb3JpdHkiLCJnZXRwcmlvcml0eSIsIndoaWNoIiwid2hvIiwic2V0cHJpb3JpdHkiLCJkdXAiLCJvbGRmZCIsIm5ld2ZkX3JlYWwiLCJuZXdmZCIsImdldFVudXNlZEZpbGVEZXNjcmlwdG9yIiwiZHVwMiIsInhfb2xkIiwieF9uZXciLCJzeW5jIiwiZnN5bmNTeW5jIiwic2V0dWlkIiwic2V0ZXVpZCIsInNldGVnaWQiLCJzZXRnaWQiLCJzZXRzaWQiLCJzaWQiLCJnZXRzaWQiLCJzZXRyZXVpZCIsInNldHJlZ2lkIiwiZ2V0cHBpZCIsInNldGdyb3VwcyIsInNldHBncnAiLCJ0Y2dldHBncnAiLCJ0Y3NldHBncnAiLCJmb3JrIiwiY2xvc2VfZXZlbnRfbG9vcCIsImZvcmsxIiwidmZvcmsiLCJmb3JrcHR5IiwiZ2V0bG9naW4iLCJnZXRsb2dpbl9wdHIiLCJ1c2VybmFtZSIsInVzZXJJbmZvIiwiZ2V0aG9zdG5hbWUiLCJob3N0bmFtZSIsInNldGhvc3RuYW1lIiwidHR5bmFtZSIsInR0eW5hbWVfcHRyIiwidHR5bmFtZV9yIiwiYWxhcm0iLCJzZWNvbmRzIiwiZ2V0cmVzdWlkIiwicnVpZFB0ciIsImV1aWRQdHIiLCJzdWlkUHRyIiwicnVpZCIsImV1aWQiLCJzdWlkIiwiZ2V0cmVzZ2lkIiwicmdpZFB0ciIsImVnaWRQdHIiLCJzZ2lkUHRyIiwicmdpZCIsImVnaWQiLCJzZ2lkIiwic2V0cmVzdWlkIiwic2V0cmVzZ2lkIiwiZXhlY3ZlIiwiX2V4ZWN2ZSIsInBhdGhuYW1lIiwiZXhlY3YiLCJleGVjdnAiLCJmaWxlUHRyIiwiZmlsZSIsImV4ZWNscCIsImZleGVjdmUiLCJfZmV4ZWN2ZSIsInBpcGUiLCJwaXBlZmRQdHIiLCJyZWFkZmQiLCJ3cml0ZWZkIiwid2FzaV9yZWFkZmQiLCJyaWdodHMiLCJmaWxldHlwZSIsIldBU0lfRklMRVRZUEVfU09DS0VUX1NUUkVBTSIsIndhc2lfd3JpdGVmZCIsInBpcGUyIiwibmF0aXZlRmxhZ3MiLCJPX05PTkJMT0NLIiwibG9ja2YiLCJjbWROYXRpdmUiLCJwYXVzZSIsImluaXRncm91cHMiLCJ1c2VyUHRyIiwiZ3JvdXAiLCJnZXRncm91cGxpc3QiLCJncm91cFB0ciIsIm5ncm91cHNQdHIiLCJ1c2VyIiwibmdyb3VwcyIsImsiLCJmY2hkaXIiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwic3VwZXIiLCJuYXRpdmVPcHRpb25zIiwib3B0aW9ucyIsIm5hdGl2ZV9vcHRpb25zIiwib3B0aW9uIiwid2FpdCIsIndzdGF0dXNQdHIiLCJ3c3RhdHVzIiwid2FpdGlkIiwid2FpdHBpZCIsIndhaXQzIiwicnVzYWdlUHRyIiwiREVGQVVMVF9DT05GSUciLCJjcmVhdGVLZXkiLCJpZ25vcmVTaW5nbGVVbmRlZmluZWQiLCJhc3luY0ZuIiwiY29uZmlnIiwiaW5mbGlnaHQiLCJ1bmRlZmluZWQiLCJoYXNPd25Qcm9wZXJ0eSIsImFwcGx5IiwidGhlbiIsInJlc3VsdHMiLCJicm93c2VyXzEiLCJpbml0XzEiLCJldmVudHNfMSIsInBvc2l4X2Jyb3dzZXJfMSIsImlvX3VzaW5nX2F0b21pY3NfMSIsImlvX3VzaW5nX3NlcnZpY2Vfd29ya2VyXzEiLCJ3YXNtSW1wb3J0QnJvd3NlciIsIndhc21VcmwiLCJmc1NwZWMiLCJYIiwiWSIsImdldERhdGEiLCJmZXRjaCIsInppcHVybCIsImFycmF5QnVmZmVyIiwibW91bnRwb2ludCIsImNyZWF0ZUZpbGVTeXN0ZW0iLCJzb3VyY2UiLCJiaW5kaW5ncyIsIk1vZHVsZSIsIkluc3RhbmNlIiwibWF4TWVtb3J5TUIiLCJpbnN0YW50aWF0ZVN0cmVhbWluZyIsInNlbGYiLCJkb2N1bWVudCIsIlBhcmVudCIsIkV2ZW50RW1pdHRlciIsInBvc3RNZXNzYWdlIiwib25tZXNzYWdlIiwiZW1pdCIsInBhcmVudCIsIndhc21JbXBvcnQiLCJjYXB0dXJlT3V0cHV0IiwiSU9IYW5kbGVyIiwiY3Jvc3NPcmlnaW5Jc29sYXRlZCIsIm1haW4iLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJvIiwibSIsImsyIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiX19zZXRNb2R1bGVEZWZhdWx0IiwiX19pbXBvcnRTdGFyIiwicmVzdWx0IiwicHJvdG90eXBlIiwiY2FsbCIsInJldXNlSW5GbGlnaHRfMSIsImluc3RhbmNlXzEiLCJkeWxpbmtfMSIsInRyYW1wb2xpbmVfMSIsInBvc2l4X2NvbnRleHRfMSIsImNhY2hlIiwidCIsIm1heGltdW0iLCJ3YXNtT3B0cyIsInJlcG9ydEVycm9yIiwid2FzbUVudiIsIndhc21HZXRTaWduYWxTdGF0ZSIsIndhc21TZW5kU3RyaW5nIiwid2FzbVNldEV4Y2VwdGlvbiIsInJlc3VsdEV4Y2VwdGlvbiIsImdldHJhbmRvbSIsImJ1ZkxlbiIsInJhbmRvbUZpbGxTeW5jIiwiX1B5X2Vtc2NyaXB0ZW4iLCJfUHlfZW1zY3JpcHRlbl9ydW50aW1lIiwid2FzaUNvbmZpZyIsInByZW9wZW5zIiwiZ2V0U3RkaW4iLCJzZW5kU3Rkb3V0Iiwic2VuZFN0ZGVyciIsIndhc2lfc25hcHNob3RfcHJldmlldzEiLCJ3YXNpSW1wb3J0IiwiZHlsaW5rT3B0aW9ucyIsInBvc2l4Q29udGV4dCIsImluamVjdEZ1bmN0aW9ucyIsInN0YXJ0IiwidGltZSIsInR5cGVzXzEiLCJoYW5kbGVNZXNzYWdlIiwiZXZlbnQiLCJpb0hhbmRsZXIiLCJkZWJ1ZyIsImVuYWJsZSIsImdldFNpZ25hbFN0YXRlIiwic2VuZE91dHB1dCIsIlN0cmVhbSIsIlNUREVSUiIsIndhaXRVbnRpbExvYWRlZCIsInJlYWRkaXJTeW5jIiwidXJsIiwib24iLCJyZXNwIiwiaWQiLCJzZW5kX3RvX3dhc21fMSIsInJlY3ZfZnJvbV93YXNtXzEiLCJhd2FpdGluZ18xIiwiU01BTExfU1RSSU5HX1NJWkUiLCJXYXNtSW5zdGFuY2VTeW5jIiwiX2dldEZ1bmN0aW9uQ2FjaGUiLCJ0ZXJtaW5hdGUiLCJleGVjIiwid3JpdGVUb1N0ZGluIiwiX2RhdGEiLCJyIiwiZGxsIiwiY2FsbFdpdGhTbWFsbFN0cmluZyIsImVuY29kZWRTdHJpbmciLCJjX2ZyZWUiLCJwdHJzIiwiY19tYWxsb2MiLCJJbnQzMkFycmF5IiwiZ2V0U21hbGxTdHJpbmdQdHIiLCJzbWFsbFN0cmluZ1B0ciIsImdldEZ1bmN0aW9uVXNpbmdEbG9wZW4iLCJnZXRQdHIiLCJmUHRyIiwiY2xvc2VEeW5hbWljTGlicmFyeSIsIl9zaWciLCJkaXJuYW1lIiwiY2FsbGJhY2siLCJjYiIsIm1rZGlyIiwicmVjdXJzaXZlIiwid3JpdGVGaWxlIiwic3RkaW5MZW5ndGhCdWZmZXIiLCJzdGRpbkJ1ZmZlciIsIm91dHB1dExlbmd0aEJ1ZmZlciIsIm91dHB1dEJ1ZmZlciIsInNpZ25hbEJ1ZmZlciIsInN0ZGluTGVuZ3RoIiwib3V0cHV0TGVuZ3RoIiwic2lnbmFsU3RhdGUiLCJzbGVlcEFycmF5IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJtaWxsaXNlY29uZHMiLCJBdG9taWNzIiwibG9hZCIsImNvcHkiLCJzdG9yZSIsIm5vdGlmeSIsInN0cmVhbSIsImNvcGllZCIsImRlY29kZXIiLCJ3YXJuQnJva2VuIiwic2VydmljZVdvcmtlckJyb2tlbiIsImxhc3RTaWduYWxDaGVjayIsInJlcXVlc3QiLCJib2R5IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm1zIiwiZ2V0U2lnbmFsIiwicmVzcG9uc2VUZXh0Iiwibm93IiwicG9zaXhfMSIsImxvZGFzaF8xIiwicG9zaXhFbnYiLCJjcmVhdGVQb3NpeEVudiIsImV4aXQiLCJjbG9uZURlZXAiLCJ3YXNpX3N0YXRlIiwicmV0dXJuX2NvZGUiLCJSZWN2RnJvbVdhc21BYnN0cmFjdEJhc2UiLCJnZXRJbnQzMiIsInBvaW50ZXIyIiwiU2VuZFRvV2FzbUFic3RyYWN0QmFzZSIsInNldEludDMyIiwic2V0RmxvYXQ2NCIsImYzMiIsInNldEZsb2F0MzIiLCJkZXN0IiwiYnVmIiwiYnl0ZUxlbmd0aCIsImt3ZHMiLCJvYmoiLCJjbG9zdXJlIiwiX2hydGltZSIsInByZXZpb3VzVGltZXN0YW1wIiwicGVyZm9ybWFuY2UiLCJnZXRUaW1lIiwibm93T2Zmc2V0IiwidGltaW5nIiwibmF2aWdhdGlvblN0YXJ0IiwiX3BlcmZvbWFuY2VQb2x5ZmlsbCIsImJhc2VOb3ciLCJjbG9ja3RpbWUiLCJuYW5vc2Vjb25kcyIsImJpZ2ludCIsImRpZmYiLCJyYW5kb21maWxsXzEiLCJwYXRoX2Jyb3dzZXJpZnlfMSIsImJyb3dzZXJfaHJ0aW1lXzEiLCJocnRpbWUiLCJXQVNJRXhpdEVycm9yIiwiV0FTSUtpbGxFcnJvciIsImlzVFRZIiwiV0FTSV9FTk9NU0ciLCJXQVNJX0VOT01FTSIsIldBU0lfRU5PTElOSyIsIldBU0lfRU5PTENLIiwiV0FTSV9FTk9FWEVDIiwiV0FTSV9FTk9FTlQiLCJXQVNJX0VOT0RFViIsIldBU0lfRU5PQlVGUyIsIldBU0lfRU5GSUxFIiwiV0FTSV9FTkVUVU5SRUFDSCIsIldBU0lfRU5FVFJFU0VUIiwiV0FTSV9FTkVURE9XTiIsIldBU0lfRU5BTUVUT09MT05HIiwiV0FTSV9FTVVMVElIT1AiLCJXQVNJX0VNU0dTSVpFIiwiV0FTSV9FTUxJTksiLCJXQVNJX0VNRklMRSIsIldBU0lfRUxPT1AiLCJXQVNJX0VJU0RJUiIsIldBU0lfRUlTQ09OTiIsIldBU0lfRUlPIiwiV0FTSV9FSU5WQUwiLCJXQVNJX0VJTlRSIiwiV0FTSV9FSU5QUk9HUkVTUyIsIldBU0lfRUlMU0VRIiwiV0FTSV9FSURSTSIsIldBU0lfRUhPU1RVTlJFQUNIIiwiV0FTSV9FRkJJRyIsIldBU0lfRUZBVUxUIiwiV0FTSV9FRVhJU1QiLCJXQVNJX0VEUVVPVCIsIldBU0lfRURPTSIsIldBU0lfRURFU1RBRERSUkVRIiwiV0FTSV9FREVBRExLIiwiV0FTSV9FQ09OTlJFU0VUIiwiV0FTSV9FQ09OTlJFRlVTRUQiLCJXQVNJX0VDT05OQUJPUlRFRCIsIldBU0lfRUNISUxEIiwiV0FTSV9FQ0FOQ0VMRUQiLCJXQVNJX0VCVVNZIiwiV0FTSV9FQkFETVNHIiwiV0FTSV9FQkFERiIsIldBU0lfRUFMUkVBRFkiLCJXQVNJX0VBR0FJTiIsIldBU0lfRUFGTk9TVVBQT1JUIiwiV0FTSV9FQUREUk5PVEFWQUlMIiwiV0FTSV9FQUREUklOVVNFIiwiV0FTSV9FQUNDRVMiLCJXQVNJX0UyQklHIiwiV0FTSV9FU1VDQ0VTUyIsIldBU0lfU0lHVlRBTFJNIiwiV0FTSV9TSUdVU1IyIiwiV0FTSV9TSUdVU1IxIiwiV0FTSV9TSUdVUkciLCJXQVNJX1NJR1RUT1UiLCJXQVNJX1NJR1RUSU4iLCJXQVNJX1NJR1RTVFAiLCJXQVNJX1NJR1RSQVAiLCJXQVNJX1NJR1RFUk0iLCJXQVNJX1NJR1NUT1AiLCJXQVNJX1NJR1NFR1YiLCJXQVNJX1NJR1FVSVQiLCJXQVNJX1NJR1BJUEUiLCJXQVNJX1NJR0tJTEwiLCJXQVNJX1NJR0lOVCIsIldBU0lfU0lHSUxMIiwiV0FTSV9TSUdIVVAiLCJXQVNJX1NJR0ZQRSIsIldBU0lfU0lHQ09OVCIsIldBU0lfU0lHQ0hMRCIsIldBU0lfU0lHQlVTIiwiV0FTSV9TSUdBTFJNIiwiV0FTSV9TSUdBQlJUIiwiV0FTSV9FTk9UQ0FQQUJMRSIsIldBU0lfRVhERVYiLCJXQVNJX0VUWFRCU1kiLCJXQVNJX0VUSU1FRE9VVCIsIldBU0lfRVNUQUxFIiwiV0FTSV9FU1JDSCIsIldBU0lfRVNQSVBFIiwiV0FTSV9FUk9GUyIsIldBU0lfRVJBTkdFIiwiV0FTSV9FUFJPVE9UWVBFIiwiV0FTSV9FUFJPVE9OT1NVUFBPUlQiLCJXQVNJX0VQUk9UTyIsIldBU0lfRVBJUEUiLCJXQVNJX0VQRVJNIiwiV0FTSV9FT1dORVJERUFEIiwiV0FTSV9FT1ZFUkZMT1ciLCJXQVNJX0VOWElPIiwiV0FTSV9FTk9UVFkiLCJXQVNJX0VOT1RTVVAiLCJXQVNJX0VOT1RTT0NLIiwiV0FTSV9FTk9UUkVDT1ZFUkFCTEUiLCJXQVNJX0VOT1RFTVBUWSIsIldBU0lfRU5PVERJUiIsIldBU0lfRU5PVENPTk4iLCJXQVNJX0VOT1NZUyIsIldBU0lfRU5PU1BDIiwiV0FTSV9FTk9QUk9UT09QVCIsIlJJR0hUU19SRUdVTEFSX0ZJTEVfQkFTRSIsIlJJR0hUU19DSEFSQUNURVJfREVWSUNFX0lOSEVSSVRJTkciLCJSSUdIVFNfQ0hBUkFDVEVSX0RFVklDRV9CQVNFIiwiUklHSFRTX0JMT0NLX0RFVklDRV9JTkhFUklUSU5HIiwiUklHSFRTX0JMT0NLX0RFVklDRV9CQVNFIiwiUklHSFRTX0FMTCIsIldBU0lfUklHSFRfU09DS19TSFVURE9XTiIsIldBU0lfUklHSFRfUE9MTF9GRF9SRUFEV1JJVEUiLCJXQVNJX1JJR0hUX1BBVEhfVU5MSU5LX0ZJTEUiLCJXQVNJX1JJR0hUX1BBVEhfUkVNT1ZFX0RJUkVDVE9SWSIsIldBU0lfUklHSFRfUEFUSF9TWU1MSU5LIiwiV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9TRVRfVElNRVMiLCJXQVNJX1JJR0hUX0ZEX0ZJTEVTVEFUX1NFVF9TSVpFIiwiV0FTSV9SSUdIVF9GRF9GSUxFU1RBVF9HRVQiLCJXQVNJX1JJR0hUX1BBVEhfRklMRVNUQVRfU0VUX1RJTUVTIiwiV0FTSV9SSUdIVF9QQVRIX0ZJTEVTVEFUX1NFVF9TSVpFIiwiV0FTSV9SSUdIVF9QQVRIX0ZJTEVTVEFUX0dFVCIsIldBU0lfUklHSFRfUEFUSF9SRU5BTUVfVEFSR0VUIiwiV0FTSV9SSUdIVF9QQVRIX1JFTkFNRV9TT1VSQ0UiLCJXQVNJX1JJR0hUX1BBVEhfUkVBRExJTksiLCJXQVNJX1JJR0hUX0ZEX1JFQURESVIiLCJXQVNJX1JJR0hUX1BBVEhfT1BFTiIsIldBU0lfUklHSFRfUEFUSF9MSU5LX1RBUkdFVCIsIldBU0lfUklHSFRfUEFUSF9MSU5LX1NPVVJDRSIsIldBU0lfUklHSFRfUEFUSF9DUkVBVEVfRklMRSIsIldBU0lfUklHSFRfUEFUSF9DUkVBVEVfRElSRUNUT1JZIiwiV0FTSV9SSUdIVF9GRF9BTExPQ0FURSIsIldBU0lfUklHSFRfRkRfQURWSVNFIiwiV0FTSV9SSUdIVF9GRF9XUklURSIsIldBU0lfUklHSFRfRkRfVEVMTCIsIldBU0lfUklHSFRfRkRfU1lOQyIsIldBU0lfUklHSFRfRkRfRkRTVEFUX1NFVF9GTEFHUyIsIldBU0lfUklHSFRfRkRfU0VFSyIsIldBU0lfUklHSFRfRkRfUkVBRCIsIldBU0lfUklHSFRfRkRfREFUQVNZTkMiLCJXQVNJX0ZERkxBR19TWU5DIiwiV0FTSV9GREZMQUdfUlNZTkMiLCJXQVNJX0ZERkxBR19OT05CTE9DSyIsIldBU0lfRkRGTEFHX0RTWU5DIiwiV0FTSV9GREZMQUdfQVBQRU5EIiwiV0FTSV9GSUxFVFlQRV9TWU1CT0xJQ19MSU5LIiwiV0FTSV9GSUxFVFlQRV9TT0NLRVRfREdSQU0iLCJXQVNJX0ZJTEVUWVBFX1JFR1VMQVJfRklMRSIsIldBU0lfRklMRVRZUEVfRElSRUNUT1JZIiwiV0FTSV9GSUxFVFlQRV9DSEFSQUNURVJfREVWSUNFIiwiV0FTSV9GSUxFVFlQRV9CTE9DS19ERVZJQ0UiLCJXQVNJX0ZJTEVUWVBFX1VOS05PV04iLCJXQVNJX1NJR1hGU1oiLCJXQVNJX1NJR1hDUFUiLCJTSUdOQUxfTUFQIiwiRVJST1JfTUFQIiwiV0FTSV9XSEVOQ0VfRU5EIiwiV0FTSV9XSEVOQ0VfQ1VSIiwiV0FTSV9XSEVOQ0VfU0VUIiwiV0FTSV9TVERFUlJfRklMRU5PIiwiV0FTSV9TVERPVVRfRklMRU5PIiwiV0FTSV9TVERJTl9GSUxFTk8iLCJXQVNJX0RJUkNPT0tJRV9TVEFSVCIsIldBU0lfUFJFT1BFTlRZUEVfRElSIiwiV0FTSV9PX1RSVU5DIiwiV0FTSV9PX0VYQ0wiLCJXQVNJX09fRElSRUNUT1JZIiwiV0FTSV9PX0NSRUFUIiwiV0FTSV9GSUxFU1RBVF9TRVRfTVRJTV9OT1ciLCJXQVNJX0ZJTEVTVEFUX1NFVF9NVElNIiwiV0FTSV9GSUxFU1RBVF9TRVRfQVRJTV9OT1ciLCJXQVNJX0ZJTEVTVEFUX1NFVF9BVElNIiwiV0FTSV9FVkVOVFRZUEVfRkRfV1JJVEUiLCJXQVNJX0VWRU5UVFlQRV9GRF9SRUFEIiwiV0FTSV9FVkVOVFRZUEVfQ0xPQ0siLCJXQVNJX0NMT0NLX1RIUkVBRF9DUFVUSU1FX0lEIiwiV0FTSV9DTE9DS19QUk9DRVNTX0NQVVRJTUVfSUQiLCJXQVNJX0NMT0NLX01PTk9UT05JQyIsIldBU0lfQ0xPQ0tfUkVBTFRJTUUiLCJSSUdIVFNfVFRZX0lOSEVSSVRJTkciLCJSSUdIVFNfVFRZX0JBU0UiLCJSSUdIVFNfU09DS0VUX0lOSEVSSVRJTkciLCJSSUdIVFNfU09DS0VUX0JBU0UiLCJSSUdIVFNfRElSRUNUT1JZX0lOSEVSSVRJTkciLCJSSUdIVFNfRElSRUNUT1JZX0JBU0UiLCJSSUdIVFNfUkVHVUxBUl9GSUxFX0lOSEVSSVRJTkciLCJFMkJJRyIsIkVBQ0NFUyIsIkVBRERSSU5VU0UiLCJFQUREUk5PVEFWQUlMIiwiRUFGTk9TVVBQT1JUIiwiRUFMUkVBRFkiLCJFQUdBSU4iLCJFQkFERiIsIkVCQURNU0ciLCJFQlVTWSIsIkVDQU5DRUxFRCIsIkVDSElMRCIsIkVDT05OQUJPUlRFRCIsIkVDT05OUkVGVVNFRCIsIkVDT05OUkVTRVQiLCJFREVBRExPQ0siLCJFREVTVEFERFJSRVEiLCJFRE9NIiwiRURRVU9UIiwiRUVYSVNUIiwiRUZBVUxUIiwiRUZCSUciLCJFSE9TVERPV04iLCJFSE9TVFVOUkVBQ0giLCJFSURSTSIsIkVJTFNFUSIsIkVJTlBST0dSRVNTIiwiRUlOVFIiLCJFSU5WQUwiLCJFSU8iLCJFSVNDT05OIiwiRUlTRElSIiwiRUxPT1AiLCJFTUZJTEUiLCJFTUxJTksiLCJFTVNHU0laRSIsIkVNVUxUSUhPUCIsIkVOQU1FVE9PTE9ORyIsIkVORVRET1dOIiwiRU5FVFJFU0VUIiwiRU5FVFVOUkVBQ0giLCJFTkZJTEUiLCJFTk9CVUZTIiwiRU5PREVWIiwiRU5PRVhFQyIsIkVOT0xDSyIsIkVOT0xJTksiLCJFTk9NRU0iLCJFTk9NU0ciLCJFTk9QUk9UT09QVCIsIkVOT1NQQyIsIkVOT1RDT05OIiwiRU5PVERJUiIsIkVOT1RFTVBUWSIsIkVOT1RSRUNPVkVSQUJMRSIsIkVOT1RTT0NLIiwiRU5PVFRZIiwiRU5YSU8iLCJFT1ZFUkZMT1ciLCJFT1dORVJERUFEIiwiRVBFUk0iLCJFUElQRSIsIkVQUk9UTyIsIkVQUk9UT05PU1VQUE9SVCIsIkVQUk9UT1RZUEUiLCJFUkFOR0UiLCJFUk9GUyIsIkVTUElQRSIsIkVTUkNIIiwiRVNUQUxFIiwiRVRJTUVET1VUIiwiRVRYVEJTWSIsIkVYREVWIiwidW56aXBfMSIsIm1lbWZzXzEiLCJ1bmlvbmZzXzEiLCJzcGVjVG9GcyIsInNwZWMiLCJuYXRpdmVGcyIsImRpcmVjdG9yeSIsImNyZWF0ZUZzRnJvbVZvbHVtZSIsIlZvbHVtZSIsIm1rZGlyU3luYyIsInppcEZzIiwibG9hZGluZ1Byb21pc2UiLCJ6aXBGc0FzeW5jIiwiemlwZmlsZSIsInRyYW5zbGF0ZSIsImZsYWciLCJwcm9taXNlcyIsIm1hcEZsYWdzIiwibWVtRnMiLCJjb250ZW50cyIsInZvbCIsImZyb21KU09OIiwicmVsZWFzZWRGZHMiLCJmZEVyciIsImZkT3V0IiwiZmRJbiIsImRldkZzIiwic3BlY3MiLCJ1ZnMiLCJVbmlvbiIsInVzZSIsIndhc2lfMSIsImZzXzEiLCJXQVNJRXJyb3IiLCJzZXRQcm90b3R5cGVPZiIsImZmbGF0ZV8xIiwiQXJyYXlCdWZmZXIiLCJ6IiwidW56aXBTeW5jIiwicmVsYXRpdmVQYXRoIiwiY29udGVudCIsImVudHJpZXMiLCJvdXRwdXRGaWxlbmFtZSIsImVuZHNXaXRoIiwid3JpdGVGaWxlU3luYyIsImNobW9kU3luYyIsImxvZ09wZW4iLCJ0eXBlZGFycmF5X3RvX2J1ZmZlcl8xIiwiU1RESU5fREVGQVVMVF9SSUdIVFMiLCJTVERPVVRfREVGQVVMVF9SSUdIVFMiLCJTVERFUlJfREVGQVVMVF9SSUdIVFMiLCJtc1RvTnMiLCJtc0ludCIsInRydW5jIiwiZGVjaW1hbCIsInJvdW5kIiwibnNUb01zIiwibnMiLCJuc0ludCIsIk51bWJlciIsIndyYXAiLCJlIiwicHJldiIsInN0YXQiLCJlbnRyeSIsInN0YXRzIiwiZnN0YXRTeW5jIiwicmlnaHRzQmFzZSIsInJpZ2h0c0luaGVyaXRpbmciLCJ0cmFuc2xhdGVGaWxlQXR0cmlidXRlcyIsImJhc2UiLCJpbmhlcml0aW5nIiwiaXNCbG9ja0RldmljZSIsImlzQ2hhcmFjdGVyRGV2aWNlIiwiaXNEaXJlY3RvcnkiLCJpc0ZJRk8iLCJpc0ZpbGUiLCJpc1NvY2tldCIsImlzU3ltYm9saWNMaW5rIiwid2FybmVkQWJvdXRTbGVlcCIsImxhc3RTdGRpbiIsIk1hcCIsIk9fUkRPTkxZIiwiZmFrZVBhdGgiLCJnZXRpb3ZzIiwiaW92cyIsImlvdnNMZW4iLCJyZWZyZXNoTWVtb3J5IiwiQXJyYXkiLCJDSEVDS19GRCIsIkNQVVRJTUVfU1RBUlQiLCJjbG9ja0lkIiwiYXJnc19nZXQiLCJhcmd2QnVmIiwiY29mZnNldCIsImZvckVhY2giLCJhIiwid3JpdGUiLCJhcmdzX3NpemVzX2dldCIsImFyZ2MiLCJhcmd2QnVmU2l6ZSIsInJlZHVjZSIsImFjYyIsImVudmlyb25fZ2V0IiwiZW52aXJvbiIsImVudmlyb25CdWYiLCJlbnZpcm9uX3NpemVzX2dldCIsImVudmlyb25Db3VudCIsImVudmlyb25CdWZTaXplIiwiZW52UHJvY2Vzc2VkIiwiY2xvY2tfcmVzX2dldCIsInJlc29sdXRpb24iLCJyZXMiLCJzZXRCaWdVaW50NjQiLCJjbG9ja190aW1lX2dldCIsIl9wcmVjaXNpb24iLCJmZF9hZHZpc2UiLCJfb2Zmc2V0IiwiX2FkdmljZSIsImZkX2FsbG9jYXRlIiwiZmRfY2xvc2UiLCJjbG9zZVN5bmMiLCJmZF9kYXRhc3luYyIsImZkYXRhc3luY1N5bmMiLCJmZF9mZHN0YXRfZ2V0IiwiZmRfZmRzdGF0X3NldF9mbGFncyIsImZkX2Zkc3RhdF9zZXRfcmlnaHRzIiwiZnNSaWdodHNCYXNlIiwiZnNSaWdodHNJbmhlcml0aW5nIiwiZmRfZmlsZXN0YXRfZ2V0IiwicnN0YXRzIiwiZGV2IiwiaW5vIiwibmxpbmsiLCJhdGltZU1zIiwibXRpbWVNcyIsImN0aW1lTXMiLCJmZF9maWxlc3RhdF9zZXRfc2l6ZSIsInN0U2l6ZSIsImZ0cnVuY2F0ZVN5bmMiLCJmZF9maWxlc3RhdF9zZXRfdGltZXMiLCJzdEF0aW0iLCJzdE10aW0iLCJmc3RmbGFncyIsImF0aW0iLCJhdGltZSIsIm10aW0iLCJtdGltZSIsImF0aW1mbGFncyIsIm10aW1mbGFncyIsImZ1dGltZXNTeW5jIiwiZmRfcHJlc3RhdF9nZXQiLCJmZF9wcmVzdGF0X2Rpcl9uYW1lIiwicGF0aExlbiIsImZkX3B3cml0ZSIsIm53cml0dGVuIiwid3JpdHRlbiIsImlvdiIsInciLCJ3cml0ZVN5bmMiLCJmZF93cml0ZSIsIklTX1NURE9VVCIsIklTX1NUREVSUiIsImZkX3ByZWFkIiwibnJlYWQiLCJyZWFkIiwib3V0ZXIiLCJyciIsImZkX3JlYWQiLCJJU19TVERJTiIsInBvc2l0aW9uIiwic2hvcnRQYXVzZSIsImZkX3JlYWRkaXIiLCJjb29raWUiLCJidWZ1c2VkUHRyIiwid2l0aEZpbGVUeXBlcyIsInN0YXJ0UHRyIiwibmFtZUxlbmd0aCIsImxzdGF0U3luYyIsImJ1ZnVzZWQiLCJmZF9yZW51bWJlciIsInRvIiwiZmRfc2VlayIsIndoZW5jZSIsIm5ld09mZnNldFB0ciIsImZkX3RlbGwiLCJvZmZzZXRQdHIiLCJmZF9zeW5jIiwicGF0aF9jcmVhdGVfZGlyZWN0b3J5IiwicGF0aF9maWxlc3RhdF9nZXQiLCJwYXRoX2ZpbGVzdGF0X3NldF90aW1lcyIsIl9kaXJmbGFncyIsInV0aW1lc1N5bmMiLCJwYXRoX2xpbmsiLCJvbGRGZCIsIl9vbGRGbGFncyIsIm9sZFBhdGgiLCJvbGRQYXRoTGVuIiwibmV3RmQiLCJuZXdQYXRoIiwibmV3UGF0aExlbiIsIm9zdGF0cyIsIm5zdGF0cyIsIm9wIiwibnAiLCJsaW5rU3luYyIsInBhdGhfb3BlbiIsIm9mbGFncyIsImZzRmxhZ3MiLCJmZFB0ciIsIm5vZmxhZ3MiLCJPX1JEV1IiLCJPX1dST05MWSIsIm5lZWRlZEJhc2UiLCJuZWVkZWRJbmhlcml0aW5nIiwiT19DUkVBVCIsIk9fRElSRUNUT1JZIiwiT19FWENMIiwiT19UUlVOQyIsIk9fQVBQRU5EIiwiT19EU1lOQyIsIk9fU1lOQyIsIk9fUlNZTkMiLCJmdWxsVW5yZXNvbHZlZCIsImZ1bGwiLCJyZWFsZmQiLCJwYXRoX3JlYWRsaW5rIiwicmVhZGxpbmtTeW5jIiwidXNlZCIsInBhdGhfcmVtb3ZlX2RpcmVjdG9yeSIsInJtZGlyU3luYyIsInBhdGhfcmVuYW1lIiwicmVuYW1lU3luYyIsInBhdGhfc3ltbGluayIsInN5bWxpbmtTeW5jIiwicGF0aF91bmxpbmtfZmlsZSIsInVubGlua1N5bmMiLCJwb2xsX29uZW9mZiIsInNpbiIsInNvdXQiLCJuc3Vic2NyaXB0aW9ucyIsIm5ldmVudHMiLCJldmVudGMiLCJ3YWl0VGltZU5zIiwic3RhcnROcyIsInVzZXJkYXRhIiwiZ2V0QmlnVWludDY0IiwiZ2V0VWludDgiLCJjbG9ja2lkIiwidGltZXN0YW1wIiwic3ViY2xvY2tmbGFncyIsImdldFVpbnQxNiIsImFic29sdXRlIiwid2FpdE5zIiwicHJvY19leGl0IiwicnZhbCIsInByb2NfcmFpc2UiLCJyYW5kb21fZ2V0Iiwic2NoZWRfeWllbGQiLCJzb2NrX3JlY3YiLCJzb2NrX3NlbmQiLCJzb2NrX3NodXRkb3duIiwicHJldkltcG9ydCIsInNldE1lbW9yeSIsIl9zdGFydCIsImdldEltcG9ydE5hbWVzcGFjZSIsIm1vZHVsZSIsIm5hbWVzcGFjZSIsImltcCIsImltcG9ydHMiLCJraW5kIiwiZ2V0SW1wb3J0cyIsIndhc2lfdW5zdGFibGUiLCJpbml0V2FzaUZkSW5mbyIsImZkSW5mbyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiTyIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiZnVsZmlsbGVkIiwiZXZlcnkiLCJzcGxpY2UiLCJjaHVua0lkIiwiUHJvbWlzZSIsImFsbCIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93IiwicHJvcCIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVwbGFjZSIsImluc3RhbGxlZENodW5rcyIsImNodW5rTG9hZGluZ0dsb2JhbCIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==